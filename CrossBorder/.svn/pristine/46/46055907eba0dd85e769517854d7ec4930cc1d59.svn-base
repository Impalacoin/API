package com.impalapay.airtel.servlet.export.pdf;

import com.impalapay.airtel.airtimegw.util.export.PdfUtil;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import java.io.IOException;
import java.net.MalformedURLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.TimeZone;

import com.impalapay.airtel.accountmgmt.session.SessionConstants;
import com.impalapay.airtel.accountmgmt.session.SessionStatistics;
import com.impalapay.airtel.cache.CacheVariables;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.log4j.Logger;

import com.impalapay.airtel.beans.accountmgmt.Account;
import com.impalapay.airtel.beans.geolocation.Country;
import net.sf.ehcache.Cache;
import net.sf.ehcache.CacheManager;

/**
 * Allows the client to export account summary activity to a PDF document.
 * <p>
 * Copyright (c) Impalapay Ltd., Jan 31, 2015
 *
 * @author <a href="mailto:eugene@impalapay.com">Eugene Chimita</a>
 * @version %I%, %G%
 */
public class ExportPDF extends HttpServlet {

    private Logger logger;
   
    private Font bigFont = new Font(Font.FontFamily.TIMES_ROMAN, 22, Font.BOLD);
    private Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
    private Font normalText = new Font(Font.FontFamily.COURIER, 12);
    private Document document;
    private PdfWriter writer;
    // Strings used in the PDF Document
    final String PDF_TITLE = "Airtel IMT Country transactions Summary";
    final String PDF_SUBTITLE = "Report Generated For: ";
    final String PDF_BOTTOM_TEXT = "Tel: +254 \n"
            + "Web: http://www.impalapay.com\n"
            + "Email: support@impalapay.com\n"
            + "CONFIDENTIAL, Â© Copyright impalapay Ltd";
    private Cache accountsCache, statisticsCache;

    /**
     *
     * @param config
     * @throws ServletException
     */
    @Override
    public void init(ServletConfig config) throws ServletException {
        super.init(config);

        


        CacheManager mgr = CacheManager.getInstance();

        accountsCache = mgr.getCache(CacheVariables.CACHE_ACCOUNTS_BY_USERNAME);
        statisticsCache = mgr.getCache(CacheVariables.CACHE_STATISTICS_BY_USERNAME);


        logger = Logger.getLogger(this.getClass());
    }

    /**
     *
     * @param request
     * @param response
     * @throws ServletException, IOException
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        ServletContext context = getServletContext();

        response.setContentType("application/pdf");


        Account account = new Account();
        HttpSession session = request.getSession(false);

        String sessionUsername = (String) session.getAttribute(SessionConstants.ACCOUNT_SIGN_IN_KEY);
        net.sf.ehcache.Element element;


        element = accountsCache.get(sessionUsername);
        account = (Account) element.getObjectValue();


        SessionStatistics statistics = new SessionStatistics();

        if ((element = statisticsCache.get(sessionUsername)) != null) {
            statistics = (SessionStatistics) element.getObjectValue();
        }


        document = new Document(PageSize.A4, 36, 36, 54, 54);

        try {
            writer = PdfWriter.getInstance(document, response.getOutputStream());
            

            PdfUtil event = new PdfUtil();
            writer.setBoxSize("art", new Rectangle(36, 54, 559, 788));
            writer.setPageEvent(event);

            populatePDFDocument(statistics, account,
                    context.getRealPath("/images/impala.gif"));

        } catch (DocumentException e) {
            logger.error("DocumentException Exception while writing into the document");
            logger.error(ExceptionUtils.getStackTrace(e));
        }
    }

    /**
     * This method Populates the PDF document
     *
     * @param statistics 
     * @param account 
     */
    private void populatePDFDocument(SessionStatistics statistics, Account account,
            String logoFilePath) {
        SimpleDateFormat formatter;
        String formattedDate;
        Date date = new Date();
        try {

            document.open();

            Paragraph preface = new Paragraph();
            // We add one empty line
            addEmptyLine(preface, 1);
            // Lets write a big header
            preface.add(new Paragraph(PDF_TITLE, bigFont));

            addEmptyLine(preface, 1);

            formatter = new SimpleDateFormat("dd, MMM yyyy HH:mm z");
            formatter.setTimeZone(TimeZone.getTimeZone("GMT+3"));
            formattedDate = formatter.format(date);

            // Will create: Report generated by: _name, _date
            preface.add(new Paragraph(PDF_SUBTITLE + account.getUsername(), smallBold));

            preface.add(new Paragraph(formattedDate, smallBold));

            addEmptyLine(preface, 30);

            preface.add(createImage(logoFilePath));

            preface.add(new Paragraph(PDF_BOTTOM_TEXT));

            preface.setAlignment(Element.ALIGN_RIGHT);

            document.add(preface);

            // Start a new page
            document.newPage();

            // step 4
            Phrase phrase = new Phrase(
                    formattedDate,
                    normalText);

            
            document.add(phrase);
            
            document.add(addEmptyLine(new Paragraph("This is the total count of transactions requests."), 1));

    

            Map<Country, Integer> countryTransactionCountTotal = statistics.getCountryTransactionCountTotal();
            Iterator<Country> transactionIter = countryTransactionCountTotal.keySet().iterator();
            Country country;
            BaseColor baseColor=new BaseColor(202,225,255);
            
            Font boldFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
            
            PdfPCell countryHeader = new PdfPCell(new Paragraph("country",boldFont));
            countryHeader.setBackgroundColor(baseColor);
            
            PdfPCell countHeader = new PdfPCell(new Paragraph("Count",boldFont));
            countHeader.setBackgroundColor(baseColor);
            countHeader.setHorizontalAlignment(Element.ALIGN_RIGHT);
            
            PdfPCell amountHeader = new PdfPCell(new Paragraph("Amount",boldFont));
            amountHeader.setBackgroundColor(baseColor);
            amountHeader.setHorizontalAlignment(Element.ALIGN_RIGHT);
            
            PdfPTable totalTransactionCountTable = new PdfPTable(2);
            totalTransactionCountTable.setHorizontalAlignment(Element.ALIGN_LEFT);
            
            
            
            totalTransactionCountTable.addCell(countryHeader);
            totalTransactionCountTable.addCell(countHeader);
            
            PdfPCell countValue,amountValue;

            while (transactionIter.hasNext()) {
                country = transactionIter.next();
                             
                countValue=new PdfPCell(new Paragraph(String.valueOf(countryTransactionCountTotal.get(country))));
                countValue.setHorizontalAlignment(Element.ALIGN_RIGHT);

                totalTransactionCountTable.addCell(country.getName());
                totalTransactionCountTable.addCell(countValue);

            }

            document.add(totalTransactionCountTable);

            document.add(addEmptyLine(new Paragraph("This is the total count and value of transaction requests that have been successful."), 1));
           

            DecimalFormat amountFormatter = new DecimalFormat("usd #,###");
            
            

            Map<Country, Integer> countryTransactionCountSuccess = statistics.getCountryTransactionCountSuccess();

            Map<Country, Double> countryTransactionAmountSuccess = statistics.getCountryTransactionAmountSuccess();

            Iterator<Country> successIter = countryTransactionCountSuccess.keySet().iterator();
            
            PdfPTable successTransactionCountTable = new PdfPTable(3);
            successTransactionCountTable.setHorizontalAlignment(Element.ALIGN_LEFT);
            
            successTransactionCountTable.addCell(countryHeader);
            successTransactionCountTable.addCell(countHeader);
            successTransactionCountTable.addCell(amountHeader);

            while (successIter.hasNext()) {
                country = successIter.next();
                
                countValue=new PdfPCell(new Paragraph(String.valueOf(countryTransactionCountTotal.get(country))));
                countValue.setHorizontalAlignment(Element.ALIGN_RIGHT);

                amountValue = new PdfPCell(new Paragraph(amountFormatter.format(countryTransactionAmountSuccess.get(country))));
                amountValue.setHorizontalAlignment(Element.ALIGN_RIGHT);
                

                successTransactionCountTable.addCell(country.getName());
                successTransactionCountTable.addCell(countValue);
                successTransactionCountTable.addCell(amountValue);

            }
            
            document.add(successTransactionCountTable);
            // step 5
            document.close();

        } catch (DocumentException e) {
            logger.error("DocumentException Exception while writing into the document");
            logger.error(ExceptionUtils.getStackTrace(e));
        }
    }

    /**
     * This method returns an itext image of the Impala Logo
     *
     * @return {@link Image}
     */
    private Image createImage(String logoFilePath) {
        Image imgLogo = null;

        try {
            imgLogo = Image.getInstance(logoFilePath);
            imgLogo.scaleToFit(100, 100);
            imgLogo.setAlignment(Element.ALIGN_RIGHT);

        } catch (BadElementException e) {
            logger.error("BadElementException Exception while creating an image");
            logger.error(ExceptionUtils.getStackTrace(e));

        } catch (MalformedURLException e) {
            logger.error("MalformedURLException Exception for the path");
            logger.error(ExceptionUtils.getStackTrace(e));

        } catch (IOException e) {
            logger.error("IOException Exception while creating an image");
            logger.error(ExceptionUtils.getStackTrace(e));
        }

        return imgLogo;
    }

    /**
     * This method adds an empty line to the PDF document
     *
     * @param paragraph
     * @param number
     * @return Paragraph
     */
    private Paragraph addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
        return paragraph;
    }

    /**
     *
     * @param request
     * @param response
     * @throws ServletException, IOException
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doPost(request, response);
    }
    /**
     * A serial version uid
     */
    private static final long serialVersionUID = 4262544639420765610L;
}

/*
 ** Local Variables:
 **   mode: java
 **   c-basic-offset: 2
 **   tab-width: 2
 **   indent-tabs-mode: nil
 ** End:
 **
 ** ex: set softtabstop=2 tabstop=2 expandtab:
 **
 */
