VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "MyLibClass"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit
Public MyClass As MyClass
Public Interest_Rounding_Paise As Long, Install_Rounding_Paise As Long
Private Recset As New ADODB.Recordset
Private Company_Name As String, Current_User As Byte
Private Ledger_Last_Month_Close_date As Date
Private Rs_LTran As New ADODB.Recordset, CloseBal(5) As Currency, Save_Int_Type As Byte
Private BCharges_Rounding_Paise As Long

Private Interest_RecSet As New ADODB.Recordset
Private Prev_Rate_Code As Integer, Prev_Int_Type As Byte
Private Prev_Txn_Code As String, Prev_Tran_Group As Byte
Private SalDiscPer As Currency, MaxDiscAmt As Currency, DiscRate As Currency
Private Prev_ALR_Ac_Type As Integer, Prev_ALR_Commission As Currency
Private Limit_for_Closing_Loan As Long

' Variables for Insert_GL_New & Saving_GL_POst_New
Private Gl_Num_Codes As Integer
Private Gl_Type_Arr(200) As Integer, Gl_Sect_Arr(200) As Integer
Private Gl_Dept_Arr(200) As Integer, Gl_CodeAmt_Arr(200) As Currency
Private Total_GlCredit As Currency, Total_GlDebit As Currency

' Variables for Returning Values to Full & Final Settlement of Loans
Private LL_Pre_Payment_Charges As Currency, LL_Closing_Fees As Currency, LL_Ledger_Fees As Currency
Private Salary_Post_Parameters As Byte

Private Disc_Rate As Currency, Max_Discount_Allowed As Currency, Advance_Allow_Perc As Currency
Private Salary_Adv_Process_Percentage As Currency, Pkg_Begin_Date_SAL As Date

Private UseDbPrefix As String, Use_Connection As Integer
Public Connection_Open_Flag As Byte
Private AKS_Save_Next_Date As Date

' Variable for FD Module
Private WH_Tax_Perc As Currency, WH_Tax_Round_Off As Integer, FD_Interest_Round_Off As Integer

'For GL Posting Vouchers
Private Bank_Book_Unit(250) As Integer, Bank_Book_Code(250) As Integer, Bank_Book_Post_Acnt(250) As String, Num_Bank_Book As Byte

'For Acnt Bal and Ledger

Private Temp_Date As Date
Private Temp_Month As Byte, Temp_Day As Byte, Op_Month As Byte, Rec_Debit As Byte
Private Temp_Year As Long, Temp_YYMM As Long
Private Op_year As Long, Op_YYMM As Long
Private Last_day_flag As Byte
Private Fst_Date As Date, OpBal_Dt As Date
Private First_Date As String, OpBal_Date As String, OnDate As String
Private OpeningBalance As Currency
Private Prev_Bkcode As Integer

Private Num_Ledg As Byte, Num_Banks As Byte, Num_TDS As Byte
Private Arr_Ledg(50) As String, Arr_Banks(50) As Integer
Private Arr_TDS_Type(50) As Byte, Arr_TDS_Code(50) As Integer

Private Rec_Ledger As String, Rec_Dept As String
Private Rec_Amount As Currency
Private Rec_Book_Type As Integer, Rec_Bank_Code As Integer, Rec_Book_Code As Integer
Private Rec_Book_Head As Byte, Month_Flag As Byte
Private DbAmt As Currency, CrAmt As Currency

'Variable for Editing Fin_Sub_Entries
Private Main_Entry_Amount  As Currency, Main_Entry_Dbcr As Byte, Main_Entry_Ledger As String
Private Main_Entry_RecType As Byte
Private Memo_DtFrom As Date, AcPeriod As Integer
Private Ledger_Code As String
Private Temp_Flag As Byte

Private DateFrom As Date, DateTill As Date, Lowest_Date As Date
Private Next_Date As Date, Prev_Month As Byte
Private DTFrom As String, dtTill As String, Next_Dt As String

Private High_Date As Date, PVD_Date As Date, UVD_Date As Date
Private MEM_Date As Date

Private PVD_RowId As Long, UVD_RowId As Long
Private MEM_RowId As Long

Private rs_Set1 As New ADODB.Recordset
Private rs_Set3 As New ADODB.Recordset

Private rs_PVD As New ADODB.Recordset
Private rs_UVD As New ADODB.Recordset
Private rs_MEM As New ADODB.Recordset
Private rs_Cheque As New ADODB.Recordset
Private SubEntry_Recset As New ADODB.Recordset
Private Temp_Recset1 As New ADODB.Recordset
Private rs_Date As New ADODB.Recordset
Private UserUnit As Integer

Private Bank_Sum_Flag As Byte, Ledg_Sum_Flag As Byte, TDS_Sum_Flag As Byte
Private Prev_Rec_Knt As Long, Cur_Rec_Knt As Long
Private Prev_Dt_From As Date, Prev_Dt_Till As Date, Prev_unit As Integer, Prev_Ledger As String

Private Chq_Types(20) As String, Chq_Desc(20) As String * 2, Num_Chq_Types As Byte
Private Flag_BkType(100) As Byte, Flag_BkCode(100) As Integer, Flag_Cash(100) As Byte, Flag_Doc_Type(100) As String, Flag_Num As Byte
Private Set_Rec_No(9) As Long
Private Rec_No(50) As Long, Set_Flags(30) As Byte, Eof_Flag(30) As Byte
Private Total_Debit(30) As Currency, Total_Credit(30) As Currency
Private Pur_Available_Flag As Byte, Scroll_Available_Flag As Byte, Temp_RecFlag As Byte
Private Give_Cash_Flag As Byte, Give_RecPay_Flag As Byte, Give_Doc_Name As String

Private SubEntry_Ac(10) As String, SubEntry_Dbcr(10) As Byte, SubEntry_Amt(10) As Currency
Private SubEntry_AcName(10) As String
Private SubEntry_Kount As Byte, SubEntry_Total As Currency

Public Function Check_Book_Freeze_Date(ByVal Br_Code As Integer, ByVal Book_Type As Byte, ByVal Book_Code As Integer) As Date
Dim Sqlstr As String, Recset As New ADODB.Recordset
    Check_Book_Freeze_Date = MyClass.Branch_Working_Date
    Sqlstr = "select pdb_freezedt from " & MyClass.gUnifyDb & "prm_daybk where pdb_unit = " & Br_Code & " and " & _
            "pdb_book = " & Book_Type & " and pdb_code = " & Book_Code
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Check_Book_Freeze_Date")
    If Recset.EOF = False Then Check_Book_Freeze_Date = IIf(IsNull(Recset!pdb_freezedt), #1/1/1900#, Recset!pdb_freezedt)
    Exit Function
End Function


Public Sub Insert_ATM_Status_Txn(ByVal Customer_Home_Branch As Integer, ByVal Cust_Id As Long, _
                        ByVal Account_Type As Integer, ByVal Account_No As Long, ByVal Txn_No As Long, ByVal Status_Flag As Byte)
Dim Sqlstr As String, Recset As New ADODB.Recordset
Dim ATM_Ac_No As String

    If MyClass.ATM_Implemented_Flag <= 0 Then Exit Sub
    ATM_Ac_No = Make_ATM_AcNo(Customer_Home_Branch, Cust_Id, Account_Type, Account_No)
    'First Check whether this a/c has atm card
    Sqlstr = "select ffbs_acno from " & MyClass.gUnifyDb & "atm_register where ffbs_acno = '" & ATM_Ac_No & "' and post_flag >=1"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Insert_ATM_Status_txn_1")
    If Recset.EOF = True Then Exit Sub
    
    If Txn_No = 0 Then Txn_No = 9999
    Sqlstr = "insert into " & MyClass.gUnifyDb & "export_atm_txn (txn_br_code,txn_date,txn_no,txn_time,txn_clear_date," & _
            "ffbs_acno,txn_amt,txn_code,txn_desc,clear_bal,withdral_bal,status_flag,main_txn) values(" & MyClass.Unit_Code & ",'" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "'," & _
            " " & Txn_No & "," & Format(Now(), "HHMM") & ",'01-Jan-1900','" & ATM_Ac_No & "'," & _
            " 0,'STA','LOCK',0,0," & Status_Flag & ",0)"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Insert_ATM_Status_txn_2")
    Exit Sub
End Sub
Private Function Valid_ATM_Customer(ByVal BrCode As Integer, ByVal CustId As Long, ByVal AcType As Integer, _
                                    ByVal AcNo As Long) As Byte

    'Valid Atm Customer 0 = Not valid
    '                   1 = Valid
                                                
Dim Ffbs_Acno As String
Dim Recset As New ADODB.Recordset, Sqlstr As String

    Valid_ATM_Customer = 0
    If Set_Connection(BrCode) <> 0 Then Exit Function
                        
    Ffbs_Acno = Make_ATM_AcNo(BrCode, CustId, AcType, AcNo)
    Sqlstr = "select ffbs_acno from " & UseDbPrefix & "atm_register where ffbs_acno = '" & Ffbs_Acno & "' and post_flag = 2"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Valid_ATM_Customer")
    If Recset.EOF = False Then Valid_ATM_Customer = 1
    Exit Function
End Function

Public Sub Check_GL_Link_Parameters_Savings(ByRef Err_Flag As Byte)
Dim Sqlstr As String, Recset As New ADODB.Recordset
Dim Temp_Recset As New ADODB.Recordset
Dim TTxnCode As String
Dim RecType As Integer
Dim Txn_Code As String, Ac_Categ As String
Dim TDSect As Integer, TDType As Integer, TDDept As Integer
Dim TCSect As Integer, TCType As Integer, TCDept As Integer


    Err_Flag = 1
    Sqlstr = "select distinct txn_code from " & MyClass.gUnifyDb & "nsav_txn"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Check_Gl_Link_Parameters_Savings_01")
    Do While Recset.EOF = False
        TTxnCode = Trim$(IIf(IsNull(Recset.Fields(0).value), "", Recset.Fields(0).value))
        
        Sqlstr = "select txn_code from " & MyClass.gUnifyDb & "ac_txn_type where txn_code = '" & TTxnCode & "'"
        Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(Me, "Chick_GL_Link_parameters_savings")
        If Temp_Recset.EOF = True Then
            MsgBox "Savings GL Link Parameters are not defined for Txn Code " + TTxnCode
            Exit Sub
        End If
        Recset.MoveNext
    Loop
    
    'Now Get All Link parameters from ac_txn_type
    Sqlstr = "select * from " & MyClass.gUnifyDb & "ac_txn_type"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Check_Gl_Link_Parameters_Savings_02")
    Do While Recset.EOF = False
        RecType = IIf(IsNull(Recset!Type_Code), 0, Recset!Type_Code)
        Txn_Code = Trim$(IIf(IsNull(Recset!Txn_Code), "", Recset!Txn_Code))
        Ac_Categ = Trim$(IIf(IsNull(Recset!Ac_Categ), "", Recset!Ac_Categ))
'Type_Code
'Txn_Code
'Ac_Categ

        TDSect = IIf(IsNull(Recset!dr_sect), 0, Recset!dr_sect)
        TDType = IIf(IsNull(Recset!dr_type_code), 0, Recset!dr_type_code)
        TDDept = IIf(IsNull(Recset!dr_dept), 0, Recset!dr_dept)
        
        TCSect = IIf(IsNull(Recset!Cr_Sect), 0, Recset!Cr_Sect)
        TCType = IIf(IsNull(Recset!cr_type_code), 0, Recset!cr_type_code)
        TCDept = IIf(IsNull(Recset!Cr_Dept), 0, Recset!Cr_Dept)
        
        If TDSect <> 0 Or TDType <> 0 And TDDept <> 0 Then
            Sqlstr = "select gl_sect from " & MyClass.gUnifyDb & "chart_of_acct " & _
                    " where gl_sect = " & TDSect & " and gl_type_code = " & TDType & " and gl_dept = " & TDDept
            Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(Me, "Check_Gl_Link_Parameters_Savings_90")
            If Temp_Recset.EOF = True Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Debit Account " + CStr(TDSect) + "/" + CStr(TDType) + "/" + CStr(TDDept) + " Not defined in Chart_of_acct "
                Exit Sub
            End If
        End If
        If TCSect <> 0 Or TCType <> 0 And TCDept <> 0 Then
            Sqlstr = "select gl_sect from " & MyClass.gUnifyDb & "chart_of_acct " & _
                    " where gl_sect = " & TCSect & " and gl_type_code = " & TCType & " and gl_dept = " & TCDept
            Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(Me, "Check_Gl_Link_Parameters_Savings_91")
            If Temp_Recset.EOF = True Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Credit Account " + CStr(TCSect) + "/" + CStr(TCType) + "/" + CStr(TCDept) + " Not defined in Chart_of_acct "
                Exit Sub
            End If
        End If

        If TDSect <> 0 Or TDType <> 0 Or TDDept <> 0 Then
            If TCSect = 0 And TCType = 0 And TCDept = 0 Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Credit Account not defined in Savings Link Parameter"
            End If
        End If

        If TCSect <> 0 Or TCType <> 0 Or TCDept <> 0 Then
            If TDSect = 0 And TDType = 0 And TDDept = 0 Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Debit Account not defined in Savings Link Parameter"
            End If
        End If

'dr_sect_2
'dr_type_code_2
'dr_dept_2
'
'cr_sect_2
'cr_type_code_2
'cr_dept_2
        TDSect = IIf(IsNull(Recset!dr_sect_2), 0, Recset!dr_sect_2)
        TDType = IIf(IsNull(Recset!dr_type_code_2), 0, Recset!dr_type_code_2)
        TDDept = IIf(IsNull(Recset!dr_dept_2), 0, Recset!dr_dept_2)
        
        TCSect = IIf(IsNull(Recset!Cr_Sect_2), 0, Recset!Cr_Sect_2)
        TCType = IIf(IsNull(Recset!cr_type_code_2), 0, Recset!cr_type_code_2)
        TCDept = IIf(IsNull(Recset!Cr_Dept_2), 0, Recset!Cr_Dept_2)
        
        If TDSect <> 0 Or TDType <> 0 And TDDept <> 0 Then
            Sqlstr = "select gl_sect from " & MyClass.gUnifyDb & "chart_of_acct " & _
                    " where gl_sect = " & TDSect & " and gl_type_code = " & TDType & " and gl_dept = " & TDDept
            Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(Me, "Check_Gl_Link_Parameters_Savings_90")
            If Temp_Recset.EOF = True Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Debit Account " + CStr(TDSect) + "/" + CStr(TDType) + "/" + CStr(TDDept) + " Not defined in Chart_of_acct "
                Exit Sub
            End If
        End If
        If TCSect <> 0 Or TCType <> 0 And TCDept <> 0 Then
            Sqlstr = "select gl_sect from " & MyClass.gUnifyDb & "chart_of_acct " & _
                    " where gl_sect = " & TCSect & " and gl_type_code = " & TCType & " and gl_dept = " & TCDept
            Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(Me, "Check_Gl_Link_Parameters_Savings_91")
            If Temp_Recset.EOF = True Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Credit Account " + CStr(TCSect) + "/" + CStr(TCType) + "/" + CStr(TCDept) + " Not defined in Chart_of_acct "
                Exit Sub
            End If
        End If

        If TDSect <> 0 Or TDType <> 0 Or TDDept <> 0 Then
            If TCSect = 0 And TCType = 0 And TCDept = 0 Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Credit Account not defined in Savings Link Parameter"
            End If
        End If

        If TCSect <> 0 Or TCType <> 0 Or TCDept <> 0 Then
            If TDSect = 0 And TDType = 0 And TDDept = 0 Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Debit Account not defined in Savings Link Parameter"
            End If
        End If

'
'dr_sect_al
'dr_type_code_al
'dr_dept_al
'
'cr_sect_al
'cr_type_code_al
'cr_dept_al
        TDSect = IIf(IsNull(Recset!dr_sect_al), 0, Recset!dr_sect_al)
        TDType = IIf(IsNull(Recset!dr_type_code_al), 0, Recset!dr_type_code_al)
        TDDept = IIf(IsNull(Recset!dr_dept_al), 0, Recset!dr_dept_al)
        
        TCSect = IIf(IsNull(Recset!Cr_Sect_al), 0, Recset!Cr_Sect_al)
        TCType = IIf(IsNull(Recset!cr_type_code_al), 0, Recset!cr_type_code_al)
        TCDept = IIf(IsNull(Recset!Cr_Dept_al), 0, Recset!Cr_Dept_al)
        
        If TDSect <> 0 Or TDType <> 0 And TDDept <> 0 Then
            Sqlstr = "select gl_sect from " & MyClass.gUnifyDb & "chart_of_acct " & _
                    " where gl_sect = " & TDSect & " and gl_type_code = " & TDType & " and gl_dept = " & TDDept
            Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(Me, "Check_Gl_Link_Parameters_Savings_90")
            If Temp_Recset.EOF = True Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Debit Account " + CStr(TDSect) + "/" + CStr(TDType) + "/" + CStr(TDDept) + " Not defined in Chart_of_acct "
                Exit Sub
            End If
        End If
        If TCSect <> 0 Or TCType <> 0 And TCDept <> 0 Then
            Sqlstr = "select gl_sect from " & MyClass.gUnifyDb & "chart_of_acct " & _
                    " where gl_sect = " & TCSect & " and gl_type_code = " & TCType & " and gl_dept = " & TCDept
            Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(Me, "Check_Gl_Link_Parameters_Savings_91")
            If Temp_Recset.EOF = True Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Credit Account " + CStr(TCSect) + "/" + CStr(TCType) + "/" + CStr(TCDept) + " Not defined in Chart_of_acct "
                Exit Sub
            End If
        End If

        If TDSect <> 0 Or TDType <> 0 Or TDDept <> 0 Then
            If TCSect = 0 And TCType = 0 And TCDept = 0 Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Credit Account not defined in Savings Link Parameter"
            End If
        End If

        If TCSect <> 0 Or TCType <> 0 Or TCDept <> 0 Then
            If TDSect = 0 And TDType = 0 And TDDept = 0 Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Debit Account not defined in Savings Link Parameter"
            End If
        End If


'
'dr_sect_2_al
'dr_type_code_2_al
'dr_dept_2_al
'
'cr_sect_2_al
'cr_type_code_2_al
'cr_dept_2_al
        TDSect = IIf(IsNull(Recset!dr_sect_2_al), 0, Recset!dr_sect_2_al)
        TDType = IIf(IsNull(Recset!dr_type_code_2_al), 0, Recset!dr_type_code_2_al)
        TDDept = IIf(IsNull(Recset!dr_dept_2_al), 0, Recset!dr_dept_2_al)
        
        TCSect = IIf(IsNull(Recset!Cr_Sect_2_al), 0, Recset!Cr_Sect_2_al)
        TCType = IIf(IsNull(Recset!cr_type_code_2_al), 0, Recset!cr_type_code_2_al)
        TCDept = IIf(IsNull(Recset!Cr_Dept_2_al), 0, Recset!Cr_Dept_2_al)
        
        If TDSect <> 0 Or TDType <> 0 And TDDept <> 0 Then
            Sqlstr = "select gl_sect from " & MyClass.gUnifyDb & "chart_of_acct " & _
                    " where gl_sect = " & TDSect & " and gl_type_code = " & TDType & " and gl_dept = " & TDDept
            Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(Me, "Check_Gl_Link_Parameters_Savings_90")
            If Temp_Recset.EOF = True Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Debit Account " + CStr(TDSect) + "/" + CStr(TDType) + "/" + CStr(TDDept) + " Not defined in Chart_of_acct "
                Exit Sub
            End If
        End If
        If TCSect <> 0 Or TCType <> 0 And TCDept <> 0 Then
            Sqlstr = "select gl_sect from " & MyClass.gUnifyDb & "chart_of_acct " & _
                    " where gl_sect = " & TCSect & " and gl_type_code = " & TCType & " and gl_dept = " & TCDept
            Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(Me, "Check_Gl_Link_Parameters_Savings_91")
            If Temp_Recset.EOF = True Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Credit Account " + CStr(TCSect) + "/" + CStr(TCType) + "/" + CStr(TCDept) + " Not defined in Chart_of_acct "
                Exit Sub
            End If
        End If

        If TDSect <> 0 Or TDType <> 0 Or TDDept <> 0 Then
            If TCSect = 0 And TCType = 0 And TCDept = 0 Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Credit Account not defined in Savings Link Parameter"
            End If
        End If

        If TCSect <> 0 Or TCType <> 0 Or TCDept <> 0 Then
            If TDSect = 0 And TDType = 0 And TDDept = 0 Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Debit Account not defined in Savings Link Parameter"
            End If
        End If

'
'dr_sect_hr
'dr_type_code_hr
'dr_dept_hr
'
'cr_sect_hr
'cr_type_code_hr
'cr_dept_hr
        TDSect = IIf(IsNull(Recset!dr_sect_hr), 0, Recset!dr_sect_hr)
        TDType = IIf(IsNull(Recset!dr_type_code_hr), 0, Recset!dr_type_code_hr)
        TDDept = IIf(IsNull(Recset!dr_dept_hr), 0, Recset!dr_dept_hr)
        
        TCSect = IIf(IsNull(Recset!Cr_Sect_hr), 0, Recset!Cr_Sect_hr)
        TCType = IIf(IsNull(Recset!cr_type_code_hr), 0, Recset!cr_type_code_hr)
        TCDept = IIf(IsNull(Recset!Cr_Dept_hr), 0, Recset!Cr_Dept_hr)
        
        If TDSect <> 0 Or TDType <> 0 And TDDept <> 0 Then
            Sqlstr = "select gl_sect from " & MyClass.gUnifyDb & "chart_of_acct " & _
                    " where gl_sect = " & TDSect & " and gl_type_code = " & TDType & " and gl_dept = " & TDDept
            Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(Me, "Check_Gl_Link_Parameters_Savings_90")
            If Temp_Recset.EOF = True Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Debit Account " + CStr(TDSect) + "/" + CStr(TDType) + "/" + CStr(TDDept) + " Not defined in Chart_of_acct "
                Exit Sub
            End If
        End If
        If TCSect <> 0 Or TCType <> 0 And TCDept <> 0 Then
            Sqlstr = "select gl_sect from " & MyClass.gUnifyDb & "chart_of_acct " & _
                    " where gl_sect = " & TCSect & " and gl_type_code = " & TCType & " and gl_dept = " & TCDept
            Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(Me, "Check_Gl_Link_Parameters_Savings_91")
            If Temp_Recset.EOF = True Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Credit Account " + CStr(TCSect) + "/" + CStr(TCType) + "/" + CStr(TCDept) + " Not defined in Chart_of_acct "
                Exit Sub
            End If
        End If

        If TDSect <> 0 Or TDType <> 0 Or TDDept <> 0 Then
            If TCSect = 0 And TCType = 0 And TCDept = 0 Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Credit Account not defined in Savings Link Parameter"
            End If
        End If

        If TCSect <> 0 Or TCType <> 0 Or TCDept <> 0 Then
            If TDSect = 0 And TDType = 0 And TDDept = 0 Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Debit Account not defined in Savings Link Parameter"
            End If
        End If
'
'dr_sect_2_hr
'dr_type_code_2_hr
'dr_dept_2_hr
'
'cr_sect_2_hr
'cr_type_code_2_hr
'cr_dept_2_hr
        TDSect = IIf(IsNull(Recset!dr_sect_2_hr), 0, Recset!dr_sect_2_hr)
        TDType = IIf(IsNull(Recset!dr_type_code_2_hr), 0, Recset!dr_type_code_2_hr)
        TDDept = IIf(IsNull(Recset!dr_dept_2_hr), 0, Recset!dr_dept_2_hr)
        
        TCSect = IIf(IsNull(Recset!Cr_Sect_2_hr), 0, Recset!Cr_Sect_2_hr)
        TCType = IIf(IsNull(Recset!cr_type_code_2_hr), 0, Recset!cr_type_code_2_hr)
        TCDept = IIf(IsNull(Recset!Cr_Dept_2_hr), 0, Recset!Cr_Dept_2_hr)
        
        If TDSect <> 0 Or TDType <> 0 And TDDept <> 0 Then
            Sqlstr = "select gl_sect from " & MyClass.gUnifyDb & "chart_of_acct " & _
                    " where gl_sect = " & TDSect & " and gl_type_code = " & TDType & " and gl_dept = " & TDDept
            Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(Me, "Check_Gl_Link_Parameters_Savings_90")
            If Temp_Recset.EOF = True Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Debit Account " + CStr(TDSect) + "/" + CStr(TDType) + "/" + CStr(TDDept) + " Not defined in Chart_of_acct "
                Exit Sub
            End If
        End If
        If TCSect <> 0 Or TCType <> 0 And TCDept <> 0 Then
            Sqlstr = "select gl_sect from " & MyClass.gUnifyDb & "chart_of_acct " & _
                    " where gl_sect = " & TCSect & " and gl_type_code = " & TCType & " and gl_dept = " & TCDept
            Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(Me, "Check_Gl_Link_Parameters_Savings_91")
            If Temp_Recset.EOF = True Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Credit Account " + CStr(TCSect) + "/" + CStr(TCType) + "/" + CStr(TCDept) + " Not defined in Chart_of_acct "
                Exit Sub
            End If
        End If

        If TDSect <> 0 Or TDType <> 0 Or TDDept <> 0 Then
            If TCSect = 0 And TCType = 0 And TCDept = 0 Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Credit Account not defined in Savings Link Parameter"
            End If
        End If

        If TCSect <> 0 Or TCType <> 0 Or TCDept <> 0 Then
            If TDSect = 0 And TDType = 0 And TDDept = 0 Then
                MsgBox "For Txn Code " + Txn_Code + " For Category " + Ac_Categ + " For Acnt Type " + CStr(RecType) + vbCrLf _
                        + " Debit Account not defined in Savings Link Parameter"
            End If
        End If

    
    
        Recset.MoveNext
    Loop
    
    Err_Flag = 0
    Exit Sub
End Sub
Public Sub Post_FFBSGL(ByVal Num_Entries As Integer, ByVal Bk_Type As Byte, ByVal Bk_Code As Integer, ByRef Entry_Accode() As String, _
                        ByRef Entry_DbCr() As Byte, ByRef Entry_Amt() As Currency, ByRef Entry_Narr() As String)

Dim Sqlstr As String, Recset As New ADODB.Recordset
Dim Voch_No As Long, I As Long
Dim Acpd As Integer, Total_Debit As Currency, Total_Credit As Currency
Dim Entry_No As Integer, Row_Id As Long, Byte_Flag As Byte
Dim Null_Str As String
Dim User_Str As String


    If Num_Entries = 0 Then Exit Sub
    If Num_Entries > 200 Then
        MsgBox "POST_FFBSGL Function Can Handle only 200 Functions"
        Exit Sub
    End If
        
    User_Str = "XXX"
    If Bk_Code = 2 Then User_Str = "ATM"
        
    Total_Credit = 0
    Total_Debit = 0
    Acpd = Year(MyClass.Branch_Working_Date)

    For I = 1 To Num_Entries
        If Entry_DbCr(I) <= 1 Then Total_Credit = Total_Credit + Entry_Amt(I)
        If Entry_DbCr(I) >= 2 Then Total_Debit = Total_Debit + Entry_Amt(I)
    Next I

    If Total_Debit <> Total_Credit Then MsgBox "Total Debit and Total Credit are Not Matching"
        
    Call AKS_BeginTrans(MyClass.Connection_No)

    'Here We have to allot voucher no
    Call Allot_Voucher_No(MyClass.Unit_Code, Year(MyClass.Branch_Working_Date), Bk_Type, Bk_Code, 0, MyClass.Branch_Working_Date, Voch_No)
    
    'Here we have to insert into voucher header
    Sqlstr = "insert into " & MyClass.gUnifyDb & "gl_voc_pass_hdr(vp_unit,vp_ac_year,vp_bktype,vp_bkcode,vp_voc_no,vp_rec_flag,vp_control_no," & _
        "vp_date,vp_party,vp_amount,vp_drcr,vp_canflag,vp_pay,vp_narr,vp_passflag,vp_voctype,vp_cr_unit,vp_cr_acyear," & _
        "vp_cr_bktype,vp_cr_bkcode,vp_cr_vocno,vp_cr_recflag,vp_bill_no,vp_bill_dt,vp_bill_amt,vp_bill_ret,vp_bill_adv," & _
        "vp_prep_by,vp_prep_on,vp_pass_to,vp_clear_by,vp_clear_on,vp_net_amt,vp_rcpt_no,vp_scrollno) values(" & MyClass.Unit_Code & "," & _
        " " & Acpd & "," & Bk_Type & "," & Bk_Code & "," & Voch_No & ",0," & Voch_No & "," & _
        " '" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "',' '," & Total_Debit & ",0,0,' '," & _
        " '" & Entry_Narr(1) & "',1,'JV',0,0," & _
        " 0,0,0,0,' '," & _
        " '01-JAN-1900',0,0,0, " & _
        " 'XXX','" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "','ZZZ','ZZZ'," & _
        " '" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "',0,0,0)"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(Me, "POST_FFBSGL_1")

    Null_Str = ""
    
    'Here we have to insert into voucher detail
    For I = 1 To Num_Entries
        Row_Id = GL_Get_Row_ID("PASS_VOC")
        Entry_No = I * 10
        Sqlstr = "insert into " & MyClass.gUnifyDb & "gl_voc_pass_dtl(vcp_unit,vcp_ac_year,vcp_bktype," & _
                  "vcp_bkcode,vcp_vocno,vcp_recflag,vcp_entry_no,vcp_controlno,vcp_date,vcp_accode,vcp_amt," & _
                  "vcp_crdr,vcp_narr,vcp_refno,vcp_tds_flag,vcp_oprlog,vcp_cancel,vcp_maturity_date,row_id) values(" & MyClass.Unit_Code & "," & Acpd & "," & _
                  " " & Bk_Type & "," & Bk_Code & "," & Voch_No & ",0," & Entry_No & "," & _
                  " " & Voch_No & ",'" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "','" & Entry_Accode(I) & "'," & Entry_Amt(I) & "," & _
                  " " & Entry_DbCr(I) & ",'" & Entry_Narr(I) & "','" & Null_Str & "',0,'" & Oper_Log & "',0,'01-JAN-1900'," & Row_Id & ")"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(Me, "POST_FFBSGL_1")
    Next I

    'Here we have to post bal rec
     Call GL_Post_Voucher(MyClass.Unit_Code, Acpd, Bk_Type, Bk_Code, Voch_No, 0, 0, Byte_Flag)
     Call AKS_EndTrans(MyClass.Connection_No)
     
     Exit Sub
End Sub

Public Sub Post_FFBSGL_ATM(ByVal Num_Entries As Integer, ByVal Bk_Type As Byte, ByVal Bk_Code As Integer, ByRef Entry_Accode() As String, _
                        ByRef Entry_DbCr() As Byte, ByRef Entry_Amt() As Currency, ByRef Entry_Narr() As String, ByRef Entry_RefNo() As String, Optional ByVal Current_Connection As Integer)

Dim Sqlstr As String, Recset As New ADODB.Recordset
Dim Voch_No As Long, I As Long
Dim Acpd As Integer, Total_Debit As Currency, Total_Credit As Currency
Dim Entry_No As Integer, Row_Id As Long, Byte_Flag As Byte
Dim Null_Str As String, User_Str As String
Dim TempDb As String, Temp_Connection As Integer



    If Num_Entries = 0 Then Exit Sub
    If Num_Entries > 200 Then
        MsgBox "POST_FFBSGL_ATM Function Can Handle only 200 Functions"
        Exit Sub
    End If
        
    TempDb = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If Current_Connection <> 0 Then
        Temp_Connection = Current_Connection
        TempDb = MyClass.ATM_DB
    End If
        
        
    User_Str = "XXX"
    If Bk_Code = 2 Then User_Str = "ATM"
        
    Total_Credit = 0
    Total_Debit = 0
    Acpd = Year(MyClass.Branch_Working_Date)

    For I = 1 To Num_Entries
        If Entry_DbCr(I) <= 1 Then Total_Credit = Total_Credit + Entry_Amt(I)
        If Entry_DbCr(I) >= 2 Then Total_Debit = Total_Debit + Entry_Amt(I)
    Next I

    If Total_Debit <> Total_Credit Then MsgBox "Total Debit and Total Credit are Not Matching"
        
    'Here We have to allot voucher no
    Call Allot_Voucher_No(MyClass.Unit_Code, Year(MyClass.Branch_Working_Date), Bk_Type, Bk_Code, 0, MyClass.Branch_Working_Date, Voch_No, Temp_Connection)
    
    'Here we have to insert into voucher header
    Sqlstr = "insert into " & TempDb & "gl_voc_pass_hdr(vp_unit,vp_ac_year,vp_bktype,vp_bkcode,vp_voc_no,vp_rec_flag,vp_control_no," & _
        "vp_date,vp_party,vp_amount,vp_drcr,vp_canflag,vp_pay,vp_narr,vp_passflag,vp_voctype,vp_cr_unit,vp_cr_acyear," & _
        "vp_cr_bktype,vp_cr_bkcode,vp_cr_vocno,vp_cr_recflag,vp_bill_no,vp_bill_dt,vp_bill_amt,vp_bill_ret,vp_bill_adv," & _
        "vp_prep_by,vp_prep_on,vp_pass_to,vp_clear_by,vp_clear_on,vp_net_amt,vp_rcpt_no,vp_scrollno) values(" & MyClass.Unit_Code & "," & _
        " " & Acpd & "," & Bk_Type & "," & Bk_Code & "," & Voch_No & ",0," & Voch_No & "," & _
        " '" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "',' '," & Total_Debit & ",0,0,' '," & _
        " '" & Entry_Narr(1) & "',1,'JV',0,0," & _
        " 0,0,0,0,' '," & _
        " '01-JAN-1900',0,0,0, " & _
        " 'XXX','" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "','ZZZ','ZZZ'," & _
        " '" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "',0,0,0)"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(Me, "POST_FFBSGL_ATM_1")

    Null_Str = ""
    
    'Here we have to insert into voucher detail
    For I = 1 To Num_Entries
        Row_Id = GL_Get_Row_ID("PASS_VOC", Temp_Connection)
        
        Entry_No = I * 10
        Sqlstr = "insert into " & TempDb & "gl_voc_pass_dtl(vcp_unit,vcp_ac_year,vcp_bktype," & _
                  "vcp_bkcode,vcp_vocno,vcp_recflag,vcp_entry_no,vcp_controlno,vcp_date,vcp_accode,vcp_amt," & _
                  "vcp_crdr,vcp_narr,vcp_refno,vcp_tds_flag,vcp_oprlog,vcp_cancel,vcp_maturity_date,row_id) values(" & MyClass.Unit_Code & "," & Acpd & "," & _
                  " " & Bk_Type & "," & Bk_Code & "," & Voch_No & ",0," & Entry_No & "," & _
                  " " & Voch_No & ",'" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "','" & Entry_Accode(I) & "'," & Entry_Amt(I) & "," & _
                  " " & Entry_DbCr(I) & ",'" & Entry_Narr(I) & "','" & Entry_RefNo(I) & "',0,'" & Oper_Log & "',0,'01-JAN-1900'," & Row_Id & ")"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(Me, "POST_FFBSGL_ATM_1")
    Next I
    
    'Here we have to post bal rec
     Call GL_Post_Voucher(MyClass.Unit_Code, Acpd, Bk_Type, Bk_Code, Voch_No, 0, 0, Byte_Flag, Temp_Connection)
     Exit Sub
End Sub
Public Sub Allot_Voucher_No(ByVal Unit As Integer, ByVal AcPeriod As Integer, ByVal BkType As Byte, ByVal BkCode As Integer, ByVal RecFlag As Byte, ByVal Voucher_DAte As Date, ByRef voucher_no As Long, Optional Current_Connection As Integer)
Dim Sqlstr As String
Dim Recset As New ADODB.Recordset
Dim Pattern As Byte
Dim x_Month As Integer, x_Day As Integer
Dim Abs_Voch_No As Long
Dim TempDb As String, Temp_Connection As Integer

    TempDb = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If Current_Connection <> 0 Then
        TempDb = MyClass.ATM_DB
        Temp_Connection = Current_Connection
    End If
    
    voucher_no = 0
    Pattern = 0
    Sqlstr = "select pdb_numflag from " & TempDb & "prm_daybk where pdb_unit = " & Unit & " and " & _
            " pdb_book = " & BkType & " and pdb_code = " & BkCode
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(Me, "Allot_Voucher_No")
    If Recset.EOF = False Then Pattern = IIf(IsNull(Recset!pdb_numflag), 0, Recset!pdb_numflag)
    
    ' Pattern - 0 = Manual Numbering
    ' Pattern - 1 = Daily Numbering
    ' Pattern - 2 = Monthly Numbering
    ' Pattern - 3 = AcPeriod wise
    ' Pattern - 4 = Yearly Numbering

    AcPeriod = Year(MyClass.Accounting_Year_Begin_Date)
    x_Month = Month(Voucher_DAte) 'Month
    x_Day = Day(Voucher_DAte)     'Day
    
    If Pattern >= 3 Then
        x_Month = 0
        x_Day = 0
    End If

    If Pattern = 2 Then x_Day = 0
    If Pattern = 0 Then Exit Sub

Get_Last_Voucher_No:

    Sqlstr = "select dn_lastvocno  from " & TempDb & "gl_docno " & _
                " where dn_unit = " & Unit & " and " & _
                      " dn_acpd = " & AcPeriod & " and " & _
                      " dn_bktype = " & BkType & " and " & _
                      " dn_bkcode = " & BkCode & " and " & _
                      " dn_rec_flag = " & RecFlag & " and " & _
                      " dn_month = " & x_Month & " and dn_day = " & x_Day
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(Me, "Allot_VoucherNo")

    If Recset.EOF = True Then
        Sqlstr = "insert into " & TempDb & "gl_docno (dn_unit,dn_acpd,dn_bktype,dn_bkcode,dn_rec_flag,dn_month,dn_day,dn_lastcontno,dn_lastvocno) " & _
                    " values (" & Unit & ", " & AcPeriod & ", " & BkType & "," & BkCode & ", " & RecFlag & ", " & x_Month & ", " & x_Day & ",0,0)"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(Me, "Allot_VoucherNo")
        GoTo Get_Last_Voucher_No
    End If
    If Recset.RecordCount > 1 Then
        MsgBox ("Multiple Records in Document No File, Please Call Amity Software Ltd.")
    End If
    voucher_no = Recset!dn_lastvocno

Next_Number:

    voucher_no = voucher_no + 1
    Abs_Voch_No = voucher_no
    If Pattern = 2 Then Abs_Voch_No = x_Month * 10000000 + voucher_no
    If Pattern = 1 Then Abs_Voch_No = x_Month * 10000000 + x_Day * 1000 + voucher_no

    Sqlstr = "select count(*) from " & TempDb & "gl_voc_pass_hdr " & _
                " where vp_unit = " & Unit & " and " & _
                      " vp_ac_year = " & AcPeriod & " and " & _
                      " vp_bktype = " & BkType & " and " & _
                      " vp_bkcode = " & BkCode & " and " & _
                      " vp_voc_no = " & Abs_Voch_No & " and " & _
                      " vp_rec_flag = " & RecFlag & " "
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(Me, "Allot_VoucherNo")
    If IIf(IsNull(Recset.Fields(0).value), 0, Recset.Fields(0).value) > 0 Then GoTo Next_Number

    Sqlstr = "update " & TempDb & "gl_docno set  dn_lastvocno  = " & voucher_no & _
                " where dn_unit = " & Unit & " and " & _
                      " dn_acpd = " & AcPeriod & " and " & _
                      " dn_bktype = " & BkType & " and " & _
                      " dn_bkcode = " & BkCode & " and " & _
                      " dn_rec_flag = " & RecFlag & " and " & _
                      " dn_month = " & x_Month & " and dn_day = " & x_Day
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(Me, "Allot_VoucherNo")
    voucher_no = Abs_Voch_No
    Exit Sub
End Sub
Public Function FD_Compute_WHTax(ByVal Br_Code As Integer, ByVal Cust_Code As Long, ByVal Int_Credited As Currency, ByVal Int_Till_Date As Date) As Currency
Dim Sqlstr As String, Recset As New ADODB.Recordset
Dim With_Holding_Tax As Currency, Long_Var As Long

    If WH_Tax_Perc = 100 Then
        'Fist get with holding tax percentage
        Call Get_Loan_Parameter("FD_WTAX", Long_Var)
        WH_Tax_Perc = Long_Var
        WH_Tax_Perc = WH_Tax_Perc / 100
        ' Round Off Parameter for WH Tax Amount
        Call Get_Loan_Parameter("FD_RND_WHT", Long_Var)
        WH_Tax_Round_Off = Long_Var
        If WH_Tax_Round_Off = 0 Then WH_Tax_Round_Off = 5
    End If
    
    With_Holding_Tax = Format(Int_Credited * WH_Tax_Perc * 0.01, "0.00")
    
    'now we have to see that whether this account is tax exempted or not
    Sqlstr = "select ex_type, ex_valid_till from " & MyClass.gUnifyDb & "fdr_tax_exempt" & _
            " where ex_branch = " & Br_Code & " and ex_cust_code = " & Cust_Code
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "FD_Credit_Interest_3B")
    If Recset.EOF = False Then
        Do While Recset.EOF = False
            If Int_Till_Date <= IIf(IsNull(Recset!ex_valid_till), #12/31/2099#, Recset!ex_valid_till) Then
                With_Holding_Tax = 0
            End If
            Recset.MoveNext
        Loop
    End If
    If With_Holding_Tax <> 0 Then Call round_off_amt(With_Holding_Tax, WH_Tax_Round_Off, With_Holding_Tax)
    FD_Compute_WHTax = With_Holding_Tax
    Exit Function
End Function


Public Sub Return_Loan_Closing_Values(ByRef Pre_pay_Charges As Currency, ByRef Ledger_Fee As Currency, ByRef Closing_Fee As Currency)
    Pre_pay_Charges = LL_Pre_Payment_Charges
    Ledger_Fee = LL_Ledger_Fees
    Closing_Fee = LL_Closing_Fees
    Exit Sub
End Sub

Public Sub Post_Loan_Interest(ByVal BranchCode As Integer, ByVal AcntType As Integer, _
                              ByVal AcntNumber As Integer, ByVal Int_Debited As Currency, _
                              ByVal Int_From_Date As Date, ByVal Int_Till_Date As Date, _
                              ByVal Int_On_Principal As Currency, ByVal Narrat As String)
Dim Trans_Date As Date, Txn_No As Long
Dim Sqlstr As String, Recset As New ADODB.Recordset
Dim Ora_Branch As Byte

    If Set_Connection(BranchCode) <> 0 Then Exit Sub
    If Int_Debited <= 0 Then Exit Sub
    Trans_Date = MyClass.Branch_Working_Date
    
    'kunal 19-042007    Checking the oracle flag for the branch to treat the time field accordingly
    Ora_Branch = 0
    Sqlstr = "select par_no from " & MyClass.ForeignDb & "aks_parameter where par_key = 'ORA_BR'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Post_Payment_in_Loan_0")
    If Recset.EOF = False Then Ora_Branch = IIf(IsNull(Recset!Par_No), 0, Recset!Par_No)
    
    Call Get_Transaction_No(BranchCode, MyClass.Branch_Working_Date, Txn_No)
    Trans_Date = MyClass.Branch_Working_Date
    Narrat = Trim$(Narrat)
    If Narrat = "" Then Narrat = "INTEREST Debited"
    ' Append This Record in Loan Transaction
    If Ora_Branch = 1 Then
        Sqlstr = "insert into " & UseDbPrefix & "ltrans(ltxn_br_cd,ltxn_acnt_year,ltxn_txn_no," & _
                "ltxn_txn_date,ltxn_ac_hbr_cd,ltxn_ac_type_code,ltxn_ac_srno,ltxn_txn_time, " & _
                "ltxn_txn_code,ltxn_dr_cd,ltxn_effective_date,ltxn_amount,ltxn_princ_amt," & _
                "ltxn_interest_amt,ltxn_cap_interest_rec,ltxn_narration,ltxn_chq_no,ltxn_bank_drawn," & _
                "ltxn_chq_date,ltxn_operator,ltxn_post_status,ltxn_cross_ac_hbr_cd,ltxn_cross_ac_type_code," & _
                "ltxn_cross_ac_srno,ltxn_rec_type,ltxn_uncap_bank_chg,ltxn_cap_bank_chg," & _
                "ltxn_int_date_from,ltxn_int_date_till,ltxn_int_rate,ltxn_int_cal_on," & _
                "ltxn_src_prg) values(" & BranchCode & "," & Year(Trans_Date) & "," & Txn_No & "," & _
                "'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & BranchCode & "," & AcntType & "," & AcntNumber & "," & Format(Now(), "HHMM") & "," & _
                "'" & TL_Interest_Debited & "',1,'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & Int_Debited & ",0," & _
                "0,0,'" & Narrat & "',0,''," & _
                "'01-JAN-1900','" & Left$(gsUser_Login, 3) & "',0,0,0," & _
                "0,2,0,0," & _
                "'" & Format(Int_From_Date, "dd-mmm-yyyy") & "','" & Format(Int_Till_Date, "dd-mmm-yyyy") & "',0," & Int_On_Principal & ",0)"
    Else
        Sqlstr = "insert into " & UseDbPrefix & "ltrans(ltxn_br_cd,ltxn_acnt_year,ltxn_txn_no," & _
                "ltxn_txn_date,ltxn_ac_hbr_cd,ltxn_ac_type_code,ltxn_ac_srno,ltxn_txn_time, " & _
                "ltxn_txn_code,ltxn_dr_cd,ltxn_effective_date,ltxn_amount,ltxn_princ_amt," & _
                "ltxn_interest_amt,ltxn_cap_interest_rec,ltxn_narration,ltxn_chq_no,ltxn_bank_drawn," & _
                "ltxn_chq_date,ltxn_operator,ltxn_post_status,ltxn_cross_ac_hbr_cd,ltxn_cross_ac_type_code," & _
                "ltxn_cross_ac_srno,ltxn_rec_type,ltxn_uncap_bank_chg,ltxn_cap_bank_chg," & _
                "ltxn_int_date_from,ltxn_int_date_till,ltxn_int_rate,ltxn_int_cal_on," & _
                "ltxn_src_prg) values(" & BranchCode & "," & Year(Trans_Date) & "," & Txn_No & "," & _
                "'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & BranchCode & "," & AcntType & "," & AcntNumber & ",'" & Format(Now(), "HH:MM") & "'," & _
                "'" & TL_Interest_Debited & "',1,'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & Int_Debited & ",0," & _
                "0,0,'" & Narrat & "',0,''," & _
                "'01-JAN-1900','" & Left$(gsUser_Login, 3) & "',0,0,0," & _
                "0,2,0,0," & _
                "'" & Format(Int_From_Date, "dd-mmm-yyyy") & "','" & Format(Int_Till_Date, "dd-mmm-yyyy") & "',0," & Int_On_Principal & ",0)"
    End If
    
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Post_Loan_Interest_1")
    
    ' Also update this debit interest in Loan Master; Last Interested Computed upto
    Sqlstr = "Update " & UseDbPrefix & "laccounts set lm_unrec_int_amt = lm_unrec_int_amt + " & Format(Int_Debited, "0.00") & _
        ", lm_last_int_comp_dt = '" & Format(Int_Till_Date, "dd-mmm-yyyy") & "'," & _
        " lm_last_dr_date = '" & Format(Trans_Date, "dd-mmm-yyyy") & "'" & _
        " where lm_hbr_cd = " & BranchCode & " and lm_type_code = " & AcntType & " " & _
        " and lm_ac_srno = " & AcntNumber
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Post_Loan_Interest_2")
    
    Call Update_Cbk_Flag(0)
    Exit Sub
End Sub


Private Function Get_Loan_Close_Limit()
    If Limit_for_Closing_Loan = 0 Then
        Call Get_Loan_Parameter("LMN_BL_CLS", Limit_for_Closing_Loan)
        ' Since Value Stored is in Cents, convert it to Dollars
        Limit_for_Closing_Loan = Limit_for_Closing_Loan / 100
    End If
    Get_Loan_Close_Limit = Limit_for_Closing_Loan
    Exit Function
End Function

'Public Sub Init_MyLibClass()
'Dim Int_Flag As Integer
'    'Initialization of Library Variables
'    Company_Name = MyClass.Company_Name
'    Current_User = MyClass.Current_User
'    Call Set_Working_Date(MyClass.Branch_Working_Date)
'    Call Set_FFBSValues(MyClass.Branch_Working_Date, Int_Flag)
'    Prev_Int_Type = 9
'    Prev_Rate_Code = 9999
'    Prev_Txn_Code = ""
'    Prev_Tran_Group = 0
'    SalDiscPer = 0
'    MaxDiscAmt = 0
'    DiscRate = 0
'    Prev_ALR_Ac_Type = 0
'    Prev_ALR_Commission = 0
'    Exit Sub
'End Sub
Public Sub Check_Bank_Charges_TxnCodes(ByRef Err_Flag As Byte)
Dim Sqlstr As String
Dim Recset As New ADODB.Recordset, TmpRecset As New ADODB.Recordset
Dim AcType As Integer, I As Integer, TxnCode As String
Dim Bal_Amt As Currency, Txn_Amt As Currency

    Err_Flag = 0
    
    '/**** Check record in BANK_COMM_CHG Table For Category and Txn Code = STC,LIF,LDF,CLS, BCQ *****/
    Sqlstr = "select distinct lm_type_code from " & MyClass.gUnifyDb & "laccounts "
    Sqlstr = Sqlstr + " where lm_hbr_cd = " & MyClass.Unit_Code & " and lm_type_code < " & Loan_Type_For_SalAdv & " and lm_ac_status =0"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then
        Err_Flag = 1
        Call MyClass.Display_Message("SQL Error in Check_Bank_Charges_Txncodes_1")
        Exit Sub
    End If
    
    Do While Recset.EOF = False
        AcType = IIf(IsNull(Recset!lm_type_code), 0, Recset!lm_type_code)
        
        I = 1
        For I = 1 To 5
            If I = 1 Then TxnCode = TC_Standing_Order_Charges
            If I = 2 Then TxnCode = TC_Loan_Late_Fee
            If I = 3 Then TxnCode = TC_Ledger_Fee
            If I = 4 Then TxnCode = TC_Loan_Closing_Fee
            If I = 5 Then TxnCode = TC_Bounced_Cheque_Charges_On_Loan
        
            Sqlstr = "select bcc_bal_amt, bcc_txn_amt from " & MyClass.gUnifyDb & "bank_comm_chg"
            Sqlstr = Sqlstr + " where bcc_txn_code = '" & TxnCode & "'  Bcc_br_code = " & MyClass.Unit_Code & " and bcc_ac_type= " & AcType
            Call Fire_Sql(Sqlstr, TmpRecset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then
                Err_Flag = 2
                Call MyClass.Display_Message("SQL Error in Check_Bank_Charges_Txncodes_2")
                Exit Sub
            End If
            If TmpRecset.EOF = True Then
                Err_Flag = 3
                Call MyClass.Display_Message("Rec for A/C Type=" + CStr(AcType) + " Txn Code= " + TxnCode + " Not in Bank_comm_chg. " + "First Define. Then Proceed ! ")
                Exit Sub
            End If
        Next I
        Recset.MoveNext
    Loop
    Exit Sub
End Sub

Public Sub Find_Loan_Int_Rate(ByVal Loan_Categ As String, ByVal Acnt_Type As Integer, Acnt_Number As Long, ByRef Int_Type As Byte, ByRef Int_Rate_Code As Integer)
Dim Acnt_Categ As String, Recset As New ADODB.Recordset
Dim Sqlstr As String

    Int_Type = 0
    Int_Rate_Code = 0
    If Acnt_Type >= Loan_Type_For_SalAdv Then Exit Sub
    
    Acnt_Categ = Loan_Categ
    If Acnt_Type <> 0 And Acnt_Number <> 0 Then
        Sqlstr = "select lm_category from laccounts " & _
                " where lm_hbr_cd = " & MyClass.Unit_Code & " and lm_type_code = " & Acnt_Type & " and lm_ac_srno = " & Acnt_Number
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Find_Loan_int_Rate_1")
        Acnt_Categ = ""
        If Recset.EOF = False Then Acnt_Categ = Trim$(IIf(IsNull(Recset!lm_category), "", Recset!lm_category))
    End If
    
    Sqlstr = "select int_type,int_rate_code from " & MyClass.gUnifyDb & "loan_ac_categ where loan_categ = '" & Acnt_Categ & "' "
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Find_Loan_Int_Rate_2")
    If Recset.EOF = False Then
        Int_Type = IIf(IsNull(Recset!Int_Type), 0, Recset!Int_Type)
        Int_Rate_Code = IIf(IsNull(Recset!Int_Rate_Code), 0, Recset!Int_Rate_Code)
    End If
    Exit Sub
End Sub


Public Sub Get_Loan_Int_Rate(ByVal Base_Interest_Code As Byte, ByVal Date_From As Date, ByRef Int_Rate As Currency)
Dim Sqlstr As String, Recset As New ADODB.Recordset
    
    Sqlstr = "select br_int_rate from " & MyClass.gUnifyDb & "lbase_rates where br_rate_type = 'L' and " & _
             " br_rate_cd = " & Base_Interest_Code & " and br_date_from <= '" & Format(Date_From, "dd-mmm-yyyy") & "' order by br_date_from desc"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_Loan_Int_Rate_1")
    Int_Rate = 0
    If Not Recset.EOF Then Int_Rate = IIf(IsNull(Recset!br_int_rate), 0, Recset!br_int_rate)
    Exit Sub
End Sub




Public Sub Post_Salary(ByVal Source_Prg As Integer, ByVal Salary_Company As Integer, _
                            ByVal Salary_Type As Byte, ByVal RefNo As String, _
                            ByVal Salary_Year As Integer, ByVal Salary_Month As Byte, _
                            ByVal Processing_Branch As Integer, ByVal Salary_Txn_date As Date, _
                            ByVal Customer_Branch As Integer, ByVal Cust_Id As Long, _
                            ByVal Account_Type As Integer, ByVal Account_No As Long, _
                            ByVal Salary_Txn_Code As String, ByVal Salary_Amount As Currency, _
                            ByVal Teller_Id As String, _
                            ByRef Advance_Allowed As Currency, ByRef Loan_Deducted As Currency, _
                            ByRef Err_Flag As Integer, Optional ByVal TxnClear_Date As Date)
                            
Dim Sqlstr As String, Recset As New ADODB.Recordset, Temp_Recset As New ADODB.Recordset, Catg_Recset As New ADODB.Recordset
Dim Arrear_RecSet As New ADODB.Recordset, Ac_Recset As New ADODB.Recordset

Dim Clear_bal As Currency, UnClear_bal As Currency, Block_Amt As Currency, Drawing_Power As Currency
Dim Balance_Amount As Currency, Recovery_Amt As Currency, Amt_Accepted As Currency, Amount_Available As Currency
Dim New_Sanction_Amt As Currency, Arrear_Amt As Currency, Temp_Amt As Currency, Total_Arrear_Amt As Currency
Dim Comm_Amt As Currency, Unrec_Int_Amt As Currency
Dim Disbursed_Amt As Currency, Recovered_Amt As Currency

Dim Loan_AcNo As Long, Loan_AcType As Integer, Loan_Txn_No As Long, Loan_Date As Date, Due_Date As Date
Dim Txn_No As Long, Txn_Clear_Date As Date, Narration As String
Dim Cheque_Number As Long, Cheque_Date As Date, Cheque_Bank As String
Dim Discount_Amount As Currency, Disc_No As Long

Dim Next_Month_Begin_Date As Date, Next_Month As Byte, Next_Month_Year As Integer, Sal_Month_Begin_Date As Date
Dim Compute_Bank_Charge_Flag As Byte, Byte_Flag As Byte, J As Integer

Dim Salaried_Customer As Byte, Sav_Ac_Categ As String, Recov_Sal As Byte
Dim Null_String As String, Null_Date As Date
Dim Pkg_Open_Bal As Currency
Dim Balance_Read_Flag As Byte, Present_Sanction_Amt As Currency

    Err_Flag = 0
    Advance_Allowed = 0
    Loan_Deducted = 0
    If Processing_Branch <> MyClass.Unit_Code Then Exit Sub
    
    If Salary_Post_Parameters = 0 Then GoSub Initial_Parameters
    
    Next_Month_Begin_Date = Month_End_Date("01-" + Month_Name(Salary_Month) + "-" + CStr(Salary_Year)) + 1
    Sal_Month_Begin_Date = Month_Begin_Date("01-" + Month_Name(Salary_Month) + "-" + CStr(Salary_Year))
    Next_Month = Month(Next_Month_Begin_Date)
    Next_Month_Year = Year(Next_Month_Begin_Date)
    
    ' Make sure that Duplicate Salary is Not Posted
    Sqlstr = "select txn_code from " & MyClass.gUnifyDb & "nsav_txn " & _
             " where txn_hbr_cd = " & Customer_Branch & " and cust_idno = " & Cust_Id & " and " & _
             " type_code = " & Account_Type & " and ac_srno = " & Account_No & _
             " and txn_code = '" & Salary_Txn_Code & "' " & _
             " and txn_amt = " & Format(Salary_Amount, "0.00") & " " & _
             " and chq_no = " & Salary_Type & " " & _
             " and chq_date = '" & Format(Sal_Month_Begin_Date, "dd-mmm-yyyy") & "'"
    Call Fire_Sql(Sqlstr, Arrear_RecSet, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_1A")
    If Arrear_RecSet.EOF = False Then
        Err_Flag = 3
        Exit Sub
    End If
    
    
   
    'Get savings account category for posting transaction
    Sqlstr = "select ac_categ, salaried_cust, block_amt,pkg_open_bal from " & MyClass.gUnifyDb & "nsav_account " & _
             " where br_code = " & Customer_Branch & " and cust_idno = " & Cust_Id & " and " & _
             " type_code = " & Account_Type & " and ac_srno = " & Account_No & " and ac_status <> 9 "
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_1A")
    If Recset.EOF = True Then
        Err_Flag = 1
        Exit Sub
    End If
    Salaried_Customer = IIf(IsNull(Recset!Salaried_Cust), 0, Recset!Salaried_Cust)
    Sav_Ac_Categ = Trim$(IIf(IsNull(Recset!Ac_Categ), "", Recset!Ac_Categ))
    Block_Amt = Trim$(IIf(IsNull(Recset!Block_Amt), 0, Recset!Block_Amt))
    Pkg_Open_Bal = IIf(IsNull(Recset!Pkg_Open_Bal), 0, Recset!Pkg_Open_Bal)
    
    'WorkOut Clear Date for salary transactions
    If IsMissing(TxnClear_Date) = True Or TxnClear_Date = #12:00:00 AM# Then
        Call Get_Clear_Date(Salary_Txn_date, Salary_Txn_Code, Txn_Clear_Date)
    Else
        Txn_Clear_Date = TxnClear_Date
    End If
    
    
    ' Generate Narration
    If Trim$(RefNo) = "" Then
        Narration = "Salary For " + Month_Name(Salary_Month) + "-" + CStr(Salary_Year)
        If Salary_Type = 1 Then Narration = "Mini-Bonus Received"
        If Salary_Type = 2 Then Narration = "Bonus Received"
        ' For CRC Transactions, Put Reference Number in Narration
        If Salary_Txn_Code = "CRC" Then Narration = RefNo
    Else
        Narration = RefNo
    End If
    
    'Post Salary Amount in Savings. Use 'Insert_Transaction Function' instead of Post Transaction
    ' It will do Automatic Loan Recovery & Other Things as well
    Txn_No = 0
    Comm_Amt = 0
    Cheque_Number = Salary_Type
    Cheque_Date = Sal_Month_Begin_Date
    Cheque_Bank = ""
    Compute_Bank_Charge_Flag = 1
    Call Insert_Transaction(Source_Prg, Processing_Branch, Salary_Txn_date, Format(Now(), "HHMM"), _
            Txn_No, Customer_Branch, Cust_Id, Account_Type, Account_No, Salary_Txn_Code, _
            Salary_Amount, Comm_Amt, Narration, Txn_Clear_Date, Teller_Id, Cheque_Number, Cheque_Date, _
            Cheque_Bank, 0, 0, 0, 0, 0, 0, 0, 0, _
            Compute_Bank_Charge_Flag, 0, Sav_Ac_Categ, Block_Amt, Err_Flag, Pkg_Begin_Date_SAL, Pkg_Open_Bal)
    If Err_Flag <> 0 Then
        Err_Flag = 2
        Exit Sub
    End If
    Call Get_Customer_Balance(Customer_Branch, Cust_Id, Account_Type, Account_No, Salary_Txn_date, Clear_bal, UnClear_bal, Pkg_Begin_Date_SAL, Pkg_Open_Bal)
    Amount_Available = Clear_bal - Block_Amt
    If Amount_Available < 0 Then Amount_Available = 0
    Balance_Read_Flag = 0
    ' ============================================
    ' Deduct Salary Advance from Balance Available
    ' ============================================
    If Salary_Type = 0 And Txn_Clear_Date <= Salary_Txn_date Then
        Balance_Read_Flag = 1
        GoSub Auto_Sal_Adv_Recovery
    End If
    
    ' ============================================
    ' Perform Salary Loan (Normal Loans) Recovery
    ' ============================================
    Call Do_Events
    Call Salary_Loan_Recovery(Customer_Branch, Cust_Id, Account_Type, Account_No, Salary_Type, Salary_Txn_Code, _
                                Salary_Amount, Txn_Clear_Date, Err_Flag, Block_Amt, Pkg_Begin_Date_SAL, Pkg_Open_Bal)
    If Err_Flag = 9 Then Err_Flag = 0
    ' ============================================
    ' Executing Standing Instructions for (SAVE)
    ' ============================================
    If Txn_Clear_Date <= Salary_Txn_date Then
        Call Exec_Standing_Instr_From_Salary(Cust_Id, Account_Type, Account_No, Sav_Ac_Categ, Block_Amt, Pkg_Begin_Date_SAL, Pkg_Open_Bal)
    End If
    
    ' ============================================
    ' Give Sanction for Salary Advance
    ' ============================================
    If Salaried_Customer >= 1 And Sav_Ac_Categ <> "S" And Salary_Txn_Code <> "CRC" Then
        New_Sanction_Amt = Salary_Amount * 0.01 * Advance_Allow_Perc
        Call round_off_amt(New_Sanction_Amt, 100, New_Sanction_Amt)
        '#*#* The following statement added by murty as per steve discussed with koshy 11/07/05
        'If New_Sanction_Amt > 5000 Then New_Sanction_Amt = 5000
        If New_Sanction_Amt > Max_Discount_Allowed Then New_Sanction_Amt = Max_Discount_Allowed
        
Read_Existing_Sanction:

        'Check whether record exists in laccounts table for this account
        Sqlstr = "select lm_type_code,lm_ac_srno,lm_sanctioned_amt,lm_loan_date,lm_disb_amt,lm_princ_rec from " & MyClass.gUnifyDb & "laccounts " & _
                " where lm_hbr_cd = " & Customer_Branch & " and " & _
                " lm_sav_cust_idno = " & Cust_Id & " and " & _
                " lm_type_code = " & Loan_Type_For_SalAdv & " and  lm_sav_ac_type_code = " & Account_Type & " and " & _
                " lm_sav_ac_srno = " & Account_No
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_2A")
        'if record does not exist then insert a record
        Present_Sanction_Amt = 0
        If Recset.EOF = False Then Present_Sanction_Amt = IIf(IsNull(Recset!lm_sanctioned_amt), 0, Recset!lm_sanctioned_amt)
        If Recset.EOF = True Then
            GoSub Get_Loan_Ac_Srno
            Null_String = ""
            Sqlstr = "insert into " & MyClass.gUnifyDb & "laccounts(lm_hbr_cd,lm_type_code,lm_ac_srno," & _
                "lm_cust_idno,lm_category,lm_purpose,lm_industry,lm_fund_source,lm_loan_date,lm_sanctioned_amt,lm_maturity_date," & _
                "lm_no_of_installments,lm_latest_install_amt, lm_install_freq," & _
                "lm_first_install_date,lm_addnl_int_rate,lm_disb_amt,lm_first_disb_date," & _
                "lm_int_cap,lm_princ_rec,lm_cap_int_rec,lm_amt_written_off," & _
                "lm_unrec_int_amt,lm_unrec_bnk_chg,lm_last_int_comp_dt," & _
                "lm_tot_int_rec,lm_close_date,lm_last_dr_date,lm_last_cr_date," & _
                "lm_last_reschedue_date,lm_ac_status,lm_operator,lm_operator_date," & _
                "lm_operator_time,lm_sav_ac_type_code,lm_sav_ac_srno," & _
                "lm_sav_cust_idno,lm_bnk_cap,lm_cap_bnk_rec,lm_base_int_type,lm_base_int_code, " & _
                "lm_addnl_process_chg) values(" & _
                " " & Customer_Branch & "," & Loan_Type_For_SalAdv & "," & Loan_AcNo & "," & _
                    " " & Cust_Id & ",'" & Loan_Categ_For_SalAdv & "',0,0,'" & IIf(Null_String = "", " ", Null_String) & "'," & _
                    " '01-JAN-1900', 0 ,'01-JAN-1900'," & _
                    " 0,0,9,'01-JAN-1900',0,0,'" & Format(Salary_Txn_date, "dd-mmm-yyyy") & "'," & _
                    " 0,0,0,0, 0,0,'01-JAN-1900', 0,'01-JAN-1900','01-JAN-1900','01-JAN-1900'," & _
                    " '01-JAN-1900',0,'" & Left$(gsUser_Login, 3) & "','" & Format(Salary_Txn_date, "dd-mmm-yyyy") & "'," & _
                    " " & Format(Now(), "HHMM") & "," & Account_Type & "," & Account_No & "," & _
                    " " & Cust_Id & ",0,0,'L',0,0)"
            Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_2B")
            GoTo Read_Existing_Sanction
        End If
        'Update the record
        Loan_AcType = IIf(IsNull(Recset!lm_type_code), 0, Recset!lm_type_code)
        Loan_AcNo = IIf(IsNull(Recset!lm_ac_srno), 0, Recset!lm_ac_srno)
        Loan_Date = IIf(IsNull(Recset!lm_loan_date), Null_Date, Recset!lm_loan_date)
        Disbursed_Amt = IIf(IsNull(Recset!lm_disb_amt), 0, Recset!lm_disb_amt)
        Recovered_Amt = IIf(IsNull(Recset!lm_princ_rec), 0, Recset!lm_princ_rec)
        
         'Updte sanctioned amount with addition
        Sqlstr = "update " & MyClass.gUnifyDb & "laccounts set lm_sanctioned_amt = "
        If Loan_Date = Next_Month_Begin_Date Then
            If Present_Sanction_Amt + New_Sanction_Amt > Max_Discount_Allowed Then New_Sanction_Amt = Max_Discount_Allowed
            'SQLStr = SQLStr & "lm_sanctioned_amt + " & New_Sanction_Amt
            Sqlstr = Sqlstr & New_Sanction_Amt
        End If
        
        If Loan_Date <> Next_Month_Begin_Date Then
            Sqlstr = Sqlstr & New_Sanction_Amt
            ' Update Disbursed Amount Here; Just reduce by Amount already recovered
            Disbursed_Amt = Disbursed_Amt - Recovered_Amt
            Recovered_Amt = 0
            If Disbursed_Amt < 0 Then Disbursed_Amt = 0
            Sqlstr = Sqlstr & ",lm_disb_amt = " & Disbursed_Amt & " ,lm_princ_rec = 0 "
        End If
        
        Sqlstr = Sqlstr & ",lm_loan_date = '" & Format(Next_Month_Begin_Date, "dd-mmm-yyyy") & _
        "', lm_ac_status = 0 where lm_hbr_cd = " & Customer_Branch & _
        " and lm_type_code = " & Loan_AcType & " and lm_ac_srno = " & Loan_AcNo
        Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_2C")
        Advance_Allowed = New_Sanction_Amt
    End If
    
    ' ============================================
    ' Give Discounting
    ' ============================================
    ' Asper Steve For CRC there is no discounting 22/08/2005
    ' He Specified in the List also
'    If Salary_Txn_Code = "CRC" And Txn_Clear_Date > Salary_Txn_date Then
'        'Select All Loan Arrears
'        SQLStr = "select lm_type_code,lm_ac_srno,lm_category from " & MyClass.gUnifyDb & "laccounts " & _
'                " where lm_hbr_cd = " & Customer_Branch & " and " & _
'                " lm_sav_cust_idno = " & Cust_Id & " and " & _
'                " lm_type_code < " & Loan_Type_For_SalAdv & " and  lm_sav_ac_type_code = " & Account_type & " and " & _
'                " lm_sav_ac_srno = " & Account_No & " and lm_ac_status =0"
'        Call Fire_Sql(SQLStr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
'        If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_2D")
'        Total_Arrear_Amt = 0
'        Do While Not Recset.EOF
'            Loan_AcType = IIf(IsNull(Recset!lm_type_code), 0, Recset!lm_type_code)
'            Loan_AcNo = IIf(IsNull(Recset!lm_ac_srno), 0, Recset!lm_ac_srno)
'            Call Get_Loan_Arrear(Customer_Branch, Loan_AcType, Loan_AcNo, Txn_Clear_Date, Arrear_Amt, Due_Date)
'            If Arrear_Amt < 0 Then Arrear_Amt = 0
'            Total_Arrear_Amt = Total_Arrear_Amt + Arrear_Amt
'            Recset.MoveNext
'        Loop
'        'work out discount allow amount
'        Temp_Amt = Salary_Amount - Total_Arrear_Amt
'        If Temp_Amt < 0 Then Temp_Amt = 0
'        Discount_Amount = Temp_Amt * 0.01 * Advance_Allow_Perc
'        Call round_off_amt(Discount_Amount, 100, Discount_Amount)
'        If Discount_Amount > Max_Discount_Allowed Then Discount_Amount = Max_Discount_Allowed
'        If Discount_Amount > 0 Then
'            'get customer balance
'            Call Get_Customer_Balance(Customer_Branch, Cust_Id, Account_type, Account_No, Salary_Txn_date, Clear_bal, UnClear_bal)
'            'Get Discount Number
'            SQLStr = "select max(disc_no) from " & MyClass.gUnifyDb & "discounting"
'            Call Fire_Sql(SQLStr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
'            If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_2F")
'            Disc_No = 0
'            If Temp_Recset.EOF = False Then Disc_No = IIf(IsNull(Temp_Recset.Fields(0).Value), 0, Temp_Recset.Fields(0).Value)
'            Disc_No = Disc_No + 1
'            'Insert a record in discount table
'            SQLStr = "insert into " & MyClass.gUnifyDb & "discounting(disc_date,disc_no,hbr_code," & _
'                    "cust_idno,type_code, ac_srno,disc_amt,comm_per,clear_bal,unclear_bal," & _
'                    "operator,operator_date,operator_time) " & _
'                    " values('" & Format(Salary_Txn_date, "dd-mmm-yyyy") & "'," & Disc_No & "," & _
'                    Customer_Branch & "," & Cust_Id & "," & Account_type & "," & Account_No & "," & _
'                    Discount_Amount & "," & Disc_Rate & "," & Clear_bal & "," & UnClear_bal & ",'" & _
'                    gsUser_Login & "','" & Format(Salary_Txn_date, "dd-mmm-yyyy") & "','" & _
'                    Format(Now(), "HH:MM") & "')"
'            Call Fire_Sql(SQLStr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
'            If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_2G")
'            'update nsav_account
'            SQLStr = "update " & MyClass.gUnifyDb & "nsav_account set discount_rate = " & Disc_Rate & "," & _
'                    " discount_amt = " & Discount_Amount & " where br_code = " & Customer_Branch & " and " & _
'                    " cust_idno = " & Cust_Id & " and type_code = " & Account_type & " and ac_srno = " & Account_No
'            Call Fire_Sql(SQLStr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
'            If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_2E")
'        End If
'    End If
    Err_Flag = 0
    Exit Sub
        
Get_Loan_Ac_Srno:
    
    'Check Loan Category for Salary Advance Exists or Not
    Sqlstr = "select loan_categ from " & MyClass.gUnifyDb & "loan_ac_categ where loan_categ = '" & Loan_Categ_For_SalAdv & "'"
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_AA0")
    If Temp_Recset.EOF = True Then
        Sqlstr = "insert into " & MyClass.gUnifyDb & "loan_ac_categ (loan_categ,categ_name,process_charges," & _
                "max_amt_wout_sec,int_type,install_type,int_rate_code,pre_pay_chgs," & _
                "ledg_fee_appl,insurance_premium_appl,recov_auto,recov_salary,recov_credit) values(" & _
                " '" & Loan_Categ_For_SalAdv & "','Salary Advance',0,0,0,0,0,0,0,0,0,0,0)"
        Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_AA1")
    End If
    
    Sqlstr = "select last_srno from " & MyClass.gUnifyDb & "ac_type " & _
             " where sys_type_code = 21 and type_code = " & Loan_Type_For_SalAdv
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_AA")
    If Temp_Recset.EOF Then
        Sqlstr = "insert into " & MyClass.gUnifyDb & "ac_type(type_code,sys_type_code,type_name,last_srno,catg_code) " & _
                " values(" & Loan_Type_For_SalAdv & ",21,'Salary Advance Loan',0,'AD')"
        Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_AA1")
        GoTo Get_Loan_Ac_Srno
    End If
    Loan_AcNo = Temp_Recset!last_srno
    
Loop_Para:
    
    Loan_AcNo = Loan_AcNo + 1
    'check in laccounts table whether this number exists
    Sqlstr = "select lm_cust_idno from " & MyClass.gUnifyDb & "laccounts" & _
            " where lm_hbr_cd = " & Customer_Branch & " and lm_type_code = " & Loan_Type_For_SalAdv & " and " & _
            " lm_ac_srno=" & Loan_AcNo
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_AC")
    If Not Temp_Recset.EOF Then GoTo Loop_Para
    
    Sqlstr = "update " & MyClass.gUnifyDb & "ac_type set last_srno = " & Loan_AcNo & _
            " where sys_type_code = 21 and type_code = " & Loan_Type_For_SalAdv
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_AA")
    Return

Initial_Parameters:
    
    'Get Salary Advance Allow Parameter
    Sqlstr = "select par_no from " & MyClass.gUnifyDb & "aks_parameter where par_key= 'SALDISCPER'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_0C")
    Advance_Allow_Perc = 30
    If Recset.EOF = False Then Advance_Allow_Perc = IIf(IsNull(Recset!Par_No), 0, Recset!Par_No)
        
    ''get the Max Discount allowed for NCC
    Sqlstr = "select par_no from " & MyClass.gUnifyDb & "aks_parameter where par_key='SALMAXAMT'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_0D")
    Max_Discount_Allowed = 5000
    If Recset.EOF = False Then Max_Discount_Allowed = IIf(IsNull(Recset!Par_No), 0, Recset!Par_No)
    
    '' get Commission Rate for Discounting
    Sqlstr = "select par_no from " & MyClass.gUnifyDb & "aks_parameter where par_key='SALDISCRAT'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_0E")
    Disc_Rate = 10
    If Recset.EOF = False Then Disc_Rate = IIf(IsNull(Recset!Par_No), 0, Recset!Par_No)
        
    Pkg_Begin_Date_SAL = #1/1/1920#
    Sqlstr = "select pkg_begin_date from " & MyClass.gUnifyDb & "nsav_sysparam where home_branch = " & MyClass.Unit_Code
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Post_Salary_0F")
    If Recset.EOF = False Then Pkg_Begin_Date_SAL = IIf(IsNull(Recset!Pkg_Begin_Date), #1/1/1920#, Recset!Pkg_Begin_Date)
        
    Salary_Post_Parameters = 1
    Return

Auto_Sal_Adv_Recovery:
    
    Loan_Deducted = 0
    If Balance_Read_Flag = 0 Then Call Get_Customer_Balance(Customer_Branch, Cust_Id, Account_Type, Account_No, MyClass.Branch_Working_Date, Clear_bal, UnClear_bal, Pkg_Begin_Date_SAL, Pkg_Open_Bal)
    Drawing_Power = Clear_bal - Block_Amt
    If Drawing_Power <= 0 Then Return
    Amount_Available = Drawing_Power

    ' Find Out Loan Accounts of this customer (Loan Type = Salary Advance)
    Sqlstr = "select lm_ac_srno from " & MyClass.gUnifyDb & "laccounts" & _
            " where lm_hbr_cd = " & Customer_Branch & " and lm_sav_cust_idno = " & Cust_Id & _
            " and lm_sav_ac_type_code = " & Account_Type & " and lm_sav_ac_srno = " & Account_No & _
            " and lm_type_code = " & Loan_Type_For_SalAdv
    Call Fire_Sql(Sqlstr, Arrear_RecSet, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Auto_Sal_Adv_Recovery_4")
    Do While Arrear_RecSet.EOF = False
        Call Get_Loan_Balance(MyClass.Unit_Code, Loan_Type_For_SalAdv, IIf(IsNull(Arrear_RecSet!lm_ac_srno), 0, Arrear_RecSet!lm_ac_srno), MyClass.Branch_Working_Date, Balance_Amount, Unrec_Int_Amt, Byte_Flag)
        If Balance_Amount > 0 Then
            Recovery_Amt = Balance_Amount
            If Recovery_Amt > Amount_Available Then Recovery_Amt = Amount_Available
            If Recovery_Amt > 0 Then
                GoSub Execute_Recovery
                Amount_Available = Amount_Available - Recovery_Amt
                Loan_Deducted = Loan_Deducted + Recovery_Amt
            End If
        End If
        Arrear_RecSet.MoveNext
    Loop
    Return
    
Execute_Recovery:

    Txn_No = 0
    Call Post_Transaction(MyClass.Unit_Code, MyClass.Branch_Working_Date, Format(Now(), "HHMM"), Txn_No, Customer_Branch, Cust_Id, _
            Account_Type, Account_No, Tc_Sal_Adv_Recov, 0 - Recovery_Amt, 0, "Salary Adv. Recovery", MyClass.Branch_Working_Date, _
            gsUser_Login, 0, #1/1/1900#, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, "")
            
    Call Post_Loan_Payment(MyClass.Unit_Code, Loan_Type_For_SalAdv, IIf(IsNull(Arrear_RecSet!lm_ac_srno), 0, _
                            Arrear_RecSet!lm_ac_srno), TL_Sal_Adv_Recov, MyClass.Branch_Working_Date, _
                            Recovery_Amt, 1, "Auto SAL ADV Rec.", Amt_Accepted, Loan_Txn_No)
    If Amt_Accepted < Recovery_Amt Then
        Call Reverse_Auto_Loan_Recovery(MyClass.Unit_Code, Cust_Id, Account_Type, Account_No, Recovery_Amt - Amt_Accepted)
        Recovery_Amt = Amt_Accepted
    End If
    Return
End Sub

Public Sub Exec_Standing_Instr_From_Salary(ByVal Cust_Id As Long, ByVal Type_Code As Integer, _
                                            ByVal Ac_SrNo As Long, Optional ByVal Ac_Categ As String, _
                                            Optional ByVal Blk_Amt As Currency, Optional ByVal Pkg_Begin_Date As Date, Optional ByVal Pkg_Opg_Bal As Currency)
            
Dim Sqlstr As String, Expiry_Date As Date, Recset As New ADODB.Recordset, Upd_Recset As New ADODB.Recordset, Xtra_RecSet As New ADODB.Recordset
Dim SI_No As Long
Dim SI_Branch_Code As Integer, SI_Amount As Currency, SI_Bank_Charges As Currency, Sav_Ac_Categ As String
Dim SI_Dest_Branch As Integer, SI_Dest_CustID As Long, SI_Dest_AcType As Integer, SI_Dest_AcNo As Long
Dim SI_Instruction_Type As Byte, SI_TXN_Code As String, Dest_Ac_Categ As String
Dim SI_Payee_Name As String, SI_Transfer_Instructions As String, SI_Ext_Ac_Details As String
Dim Credit_TXN_Code As String, Debit_TXN_Code As String, Credit_Description As String, Debit_Description As String
Dim Inter_Account_Txn_Defined As Byte, Narration As String
Dim Txn_No As Long, Txn_Code As String * 3, File_Name As String
Dim Sord_Last_Ded_Date As Date
Dim Clear_Balance As Currency, UnClear_Balance As Currency, Block_Amt As Currency, Drawing_Power As Currency
Dim Penalty_Chgs As Currency, Integer_Flag As Integer
Dim Penalty_Flag As Byte, SI_Cust_Name As String
Dim SI_Dest_Name As String

    ' Get Inter Account Transfer Codes
    If Transfer_Credit_TrCode = "" And Transfer_Debit_TrCode = "" Then
        Call Get_Inter_Account_Tr_Codes(Inter_Account_Txn_Defined, Credit_TXN_Code, Debit_TXN_Code, Credit_Description, Debit_Description)
        If Inter_Account_Txn_Defined = 0 Then Exit Sub
        Transfer_Credit_TrCode = Credit_TXN_Code
        Transfer_Debit_TrCode = Debit_TXN_Code
        Transfer_Credit_TrDesc = Credit_Description
        Transfer_Debit_TrDesc = Debit_Description
    Else
        Inter_Account_Txn_Defined = 1
        Credit_TXN_Code = Transfer_Credit_TrCode
        Debit_TXN_Code = Transfer_Debit_TrCode
        Transfer_Credit_TrDesc = "Standing Order Credit"
        Transfer_Debit_TrDesc = "Standing Order Debit"
    End If
    
    SI_Dest_Name = ""
    SI_Cust_Name = Get_Cust_Long_Name(MyClass.Unit_Code, Cust_Id)
    SI_Transfer_Instructions = ""
    SI_Ext_Ac_Details = ""
    ' Read His Standing Orders
    Sqlstr = "select * from " & MyClass.gUnifyDb & "sord_mast where " & _
             " sord_br_code = " & MyClass.Unit_Code & _
             " and sord_cust_cust_id = " & Cust_Id & " and sord_cust_ac_type = " & Type_Code & " and " & _
             " sord_cust_ac_no = " & Ac_SrNo & " and sord_status = 0 and sord_freq = 8 " & _
             " order by sord_cust_br_code, sord_cust_cust_id, sord_cust_ac_type, sord_cust_ac_no "
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Exec_Standing_Instr_From_Salary_1")
    
    
    ' Get Block Amount from nsav_account
    If Ac_Categ = "" Or IsMissing(Ac_Categ) = True Then
        Sqlstr = "select ac_categ,block_amt from " & MyClass.gUnifyDb & "nsav_account " & _
                 "where br_code = " & MyClass.Unit_Code & _
                 " and type_code = " & Type_Code & _
                 " and ac_srno = " & Ac_SrNo & _
                 " and cust_idno = " & Cust_Id
        Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Day_End_Loan_2")
        If Upd_Recset.EOF = True Then Exit Sub
        Sav_Ac_Categ = Trim$(IIf(IsNull(Upd_Recset!Ac_Categ), "", Upd_Recset!Ac_Categ))
        Block_Amt = IIf(IsNull(Upd_Recset!Block_Amt), 0, Upd_Recset!Block_Amt)
    Else
        Sav_Ac_Categ = Ac_Categ
        Block_Amt = Blk_Amt
    End If
    
    ' Does he have enough balance in his account ?
    Call Get_Customer_Balance(MyClass.Unit_Code, Cust_Id, Type_Code, Ac_SrNo, MyClass.Branch_Working_Date, Clear_Balance, UnClear_Balance, Pkg_Begin_Date, Pkg_Opg_Bal)
    Drawing_Power = Clear_Balance - Block_Amt
    If Drawing_Power < 0 Then Drawing_Power = 0
    
    Do While Recset.EOF = False
        Expiry_Date = IIf(IsNull(Recset!sord_expiry_date), #1/1/2099#, Recset!sord_expiry_date)
        ' If This standing Instruction has already expired, set Expiry Flag to 9 and DO NOT Process
        If Expiry_Date <= MyClass.Branch_Working_Date Then
            SI_No = Recset!sord_no
            Sqlstr = "update " & MyClass.gUnifyDb & "sord_mast set sord_status = 9 where sord_no = " & SI_No & " and sord_br_code = " & MyClass.Unit_Code
            Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(, "Exec_Standing_Instr_From_Salary_2")
            GoTo Process_Next_Standing_Order
        End If
        
        Sord_Last_Ded_Date = IIf(IsNull(Recset!Sord_Last_Ded_Date), #1/1/1920#, Recset!Sord_Last_Ded_Date)
        ''If Month(Sord_Last_Ded_Date) = Month(MyClass.Branch_Working_Date) And Year(Sord_Last_Ded_Date) = Year(MyClass.Branch_Working_Date) Then GoTo Process_Next_Standing_Order
        
        ' This is a Valid Standing Instruction. Execute it.
        SI_Amount = IIf(IsNull(Recset!sord_amount), 0, Recset!sord_amount)
        If Drawing_Power < SI_Amount Or Drawing_Power + Block_Amt < SI_Amount + SI_Bank_Charges Then
        
            Call Calculate_BankCharge(TC_Standing_Order_Fail_Penalty, Type_Code, Sav_Ac_Categ, 0, 0, Penalty_Chgs)
            If Penalty_Chgs <> 0 Then
                Txn_No = 0
                Txn_Code = TC_Standing_Order_Fail_Penalty
                Narration = "Penalty Charges."
                Call Post_Transaction(MyClass.Unit_Code, MyClass.Branch_Working_Date, Format(Now(), "HHMM"), _
                                      Txn_No, MyClass.Unit_Code, Cust_Id, Type_Code, Ac_SrNo, Txn_Code, _
                                      0 - Penalty_Chgs, 0, Narration, MyClass.Branch_Working_Date, _
                                      System_Transactions_User_ID, 0, #1/1/1900#, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, Sav_Ac_Categ, , , Integer_Flag)
            End If
            Penalty_Flag = 0
            GoTo Append_Log
        End If
        
        SI_Bank_Charges = IIf(IsNull(Recset!sord_charges), 0, Recset!sord_charges)
        
        ' He has required money. We have to follow orders.
        SI_Instruction_Type = IIf(IsNull(Recset!sord_inst_type), 0, Recset!sord_inst_type)
        SI_Dest_CustID = IIf(IsNull(Recset!sord_payee_cust_id), 0, Recset!sord_payee_cust_id)
        SI_Dest_Branch = IIf(IsNull(Recset!sord_payee_br_code), 0, Recset!sord_payee_br_code)
        SI_Dest_AcType = IIf(IsNull(Recset!sord_payee_ac_type), 0, Recset!sord_payee_ac_type)
        SI_Dest_AcNo = IIf(IsNull(Recset!sord_payee_ac_no), 0, Recset!sord_payee_ac_no)
        If SI_Instruction_Type = 1 Then SI_Dest_Branch = MyClass.Unit_Code
        
        SI_TXN_Code = Trim$(IIf(IsNull(Recset!sord_tc_code), "", Recset!sord_tc_code))
        SI_Payee_Name = Trim$(IIf(IsNull(Recset!sord_payee_name), "", Recset!sord_payee_name))
        SI_Transfer_Instructions = Trim$(IIf(IsNull(Recset!sord_description), "", Recset!sord_description))
        If SI_Transfer_Instructions = "" Then SI_Transfer_Instructions = Space(5)
        SI_Ext_Ac_Details = Trim$(IIf(IsNull(Recset!sord_ext_ac_no), "", Recset!sord_ext_ac_no))
        If SI_Ext_Ac_Details = "" Then SI_Ext_Ac_Details = Space(5)
        ' Instructypes are:-
            ' 1=Transfer to Another Account in SAME Branch of FFBS;
            ' 2= Transfer to Another Account in DIFFERENT branch of FFBS; '
            ' 3=Banker's Check in KSH; '
            ' 4=Bankers Check in Foreign Currency;
            ' 5=US$ Wire Transfer to Foreign Account;
            ' 9=Other (Miscellaneous)
        
        ' Is the Target Account Live ?
        If SI_Instruction_Type = 1 Then
            ' If TXN Codes NOt Properly Defined for Inter Account Transfers, Then Let him go to hell.
            If Inter_Account_Txn_Defined = 0 Then GoTo Append_Log
            Sqlstr = "select ac_status,ac_categ from " & MyClass.gUnifyDb & "nsav_account " & _
                     "where br_code = " & SI_Dest_Branch & _
                     " and type_code = " & SI_Dest_AcType & _
                     " and ac_srno = " & SI_Dest_AcNo & _
                     " and cust_idno = " & SI_Dest_CustID
            Call Fire_Sql(Sqlstr, Xtra_RecSet, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(, "Exec_Standing_Instr_From_Salary_3")
            ' Do Not Execute SI if Destination Account Does Not Exist or Closed. No Penalty to be charged
            If Xtra_RecSet.EOF = True Then
                Penalty_Flag = 1
                GoTo Append_Log
            End If
            If Xtra_RecSet.EOF = False And IIf(IsNull(Xtra_RecSet!Ac_Status), 0, Xtra_RecSet!Ac_Status) = 9 Then
                Penalty_Flag = 1
                GoTo Append_Log
            End If
            Dest_Ac_Categ = Trim$(IIf(IsNull(Xtra_RecSet!Ac_Categ), "", Xtra_RecSet!Ac_Categ))
            SI_Dest_Name = Get_Cust_Long_Name(MyClass.Unit_Code, SI_Dest_CustID)
            ' ==============================================
            ' Actual Execution of Standing Order Starts Here
            ' ==============================================
            Txn_No = 0
            Txn_Code = Debit_TXN_Code
            Narration = Debit_Description
            If Narration = "" Then Narration = Transfer_Debit_TrDesc
            Call Post_Transaction(MyClass.Unit_Code, MyClass.Branch_Working_Date, Format(Now(), "HHMM"), _
                                  Txn_No, MyClass.Unit_Code, Cust_Id, Type_Code, Ac_SrNo, Txn_Code, 0 - SI_Amount, _
                                  0 - SI_Bank_Charges, Narration, MyClass.Branch_Working_Date, _
                                  System_Transactions_User_ID, 0, #1/1/1900#, "", _
                                  0, SI_Dest_CustID, SI_Dest_AcType, SI_Dest_AcNo, _
                                  0, 0, 0, 0, 0, Sav_Ac_Categ, , , Integer_Flag)
            If Integer_Flag <> 0 Then
                MsgBox " Unable to Post Transaction in Routione Exec_Standing_Instr_From_Salary"
                Penalty_Flag = 2
                GoTo Append_Log
            End If
            Penalty_Flag = 0
            GoTo Append_Log
        End If
        
        ' In ALL OTHER cases, just Debit The Amount is his Savings Account
        ' and leave the rest for Bank Officers
        If SI_Instruction_Type <> 1 Then
            Txn_No = 0
            Txn_Code = SI_TXN_Code
            Narration = "Standing Inst. DEBIT"
            Call Post_Transaction(MyClass.Unit_Code, MyClass.Branch_Working_Date, _
                                Format(Now(), "HHMM"), Txn_No, MyClass.Unit_Code, Cust_Id, _
                                Type_Code, Ac_SrNo, Txn_Code, 0 - SI_Amount, 0 - SI_Bank_Charges, _
                                Narration, MyClass.Branch_Working_Date, System_Transactions_User_ID, _
                                0, #1/1/1900#, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, Sav_Ac_Categ, , , Integer_Flag)
            If Integer_Flag <> 0 Then
                MsgBox " Unable to Post Transaction in Routione Exec_Standing_Instr_From_Salary"
                Penalty_Flag = 1
                GoTo Append_Log
            End If
        End If
        ' Update Date of Last Execution
        Sqlstr = "update " & MyClass.gUnifyDb & "sord_mast set sord_last_ded_date = '" & _
                 Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "' where " & _
                 "sord_no = " & SI_No & " and sord_br_code = " & MyClass.Unit_Code
        Call Fire_Sql(Sqlstr, Xtra_RecSet, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Exec_Standing_Instr_From_Salary_4")
        Penalty_Flag = 0
        GoTo Append_Log
        
Append_Log:

        File_Name = App.Path & "\SOlog.dat"
        If Dir(File_Name) = "" Then
            Call file_create(File_Name, 0)
        Else
            Call file_append(File_Name, 0)
        End If
        Call put_data(MyClass.Unit_Code, 2, 0, 3, 1, 1)
        Call put_data(MyClass.gs_BranchName, 0, 0, 15, 0, 1)
        Call put_data(Cust_Id, 3, 0, 6, 1, 1)
        Call put_data(Type_Code, 2, 0, 3, 1, 1)
        Call put_data(Ac_SrNo, 3, 0, 5, 1, 1)
        Call put_data(SI_Cust_Name, 0, 0, 50, 0, 1)
        Call put_data(SI_No, 3, 0, 9, 1, 1)
        Call put_data(Penalty_Flag, 1, 0, 1, 0, 1)
        Call put_data(SI_Amount, 4, 0, 13, 1, 1)
        Call put_data(SI_Bank_Charges, 4, 0, 10, 1, 1)
        Call put_data(SI_Instruction_Type, 1, 0, 1, 0, 1)
        Call put_data(SI_Dest_CustID, 3, 0, 6, 1, 1)
        Call put_data(SI_Dest_AcType, 2, 0, 3, 1, 1)
        Call put_data(SI_Dest_AcNo, 3, 0, 5, 1, 1)
        Call put_data(SI_Dest_Name, 0, 0, 50, 0, 1)
        If Trim$(SI_Transfer_Instructions) = "" Then SI_Transfer_Instructions = Space(5)
        Call put_data(SI_Transfer_Instructions, 0, 0, 80, 0, 1)
        If Trim$(SI_Ext_Ac_Details) = "" Then SI_Ext_Ac_Details = Space(5)
        Call put_data(SI_Ext_Ac_Details, 0, 0, 20, 0, 0)
        Call Flush
        Call file_close

        GoTo Process_Next_Standing_Order
        
Process_Next_Standing_Order:

        Recset.MoveNext
    Loop
    Exit Sub
End Sub

Public Sub Insert_Transaction(ByVal Source_Prg As Integer, ByVal Transacting_Branch As Integer, _
                            ByVal Transaction_Date As Date, ByVal Transaction_Time As Integer, _
                            ByRef Transaction_number As Long, ByVal Customer_Home_Branch As Integer, _
                            ByVal Cust_Id As Long, ByVal Account_Type As Integer, ByVal Account_No As Long, _
                            ByVal Transaction_Code As String, ByVal Transaction_Amount As Currency, _
                            ByVal Commission_Amt As Currency, ByVal Narration As String, ByVal Clear_Date As Date, _
                            ByVal Teller_Id As String, ByVal Cheque_Number As Long, ByVal Cheque_Date As Date, _
                            ByVal Cheque_Bank As String, ByVal Reversal_Entry_Flag As Byte, _
                            ByVal Trfr_FromTo_Cust As Long, ByVal Trfr_AcType As Integer, ByVal Trfr_AcNo As Long, _
                            ByVal Loan_AcType As Integer, ByVal Loan_AcNo As Long, ByVal With_Card_Flag As Byte, _
                            ByVal Card_Number As Long, ByVal Compute_Bank_Charges_Flag As Byte, _
                            ByVal Compute_Min_Balance_Charges_Flag As Byte, ByVal Account_Category As String, ByVal Block_Amt As Currency, ByRef Err_Flag As Integer, _
                            Optional Pkg_Begin_Date As Date, Optional ByVal Pkg_Opg_Bal As Currency, _
                            Optional ByVal HotTrans_Ins_DateTime As Date, Optional ByVal HotConfirm_Flag As Byte)

Dim Sqlstr As String, Recset As New ADODB.Recordset, Posting_Amount As Currency, Bank_Charges_Amount As Currency
Dim Last_Number As Long, Byte_Flag As Byte
Dim Our_Bank_Charges As Currency, Clear_bal As Currency, UnClear_bal As Currency
Dim Below_Block_Charges As Currency

''''    Call AKS_BeginTrans(MyClass.Connection_No)
    
    ' Post all Transactions in LOCAL Database
    Posting_Amount = Transaction_Amount
    Bank_Charges_Amount = Commission_Amt
    
    ' Allot Transaction Number, if supplied as ZERO
    If Transaction_number = 0 Then
        GoSub Allot_Trans_Number
        Transaction_number = Last_Number
    End If
    
    ' Compute Balance AFTER This Transaction
    Call Get_Customer_Balance(Customer_Home_Branch, Cust_Id, Account_Type, Account_No, Transaction_Date, Clear_bal, UnClear_bal, Pkg_Begin_Date, Pkg_Opg_Bal)
   '' If Clear_Date <= Transaction_Date Then Clear_bal = Clear_bal + Transaction_Amount
    
    ' Compute Bank Charges, if user requested for it.
    Our_Bank_Charges = 0
    If Compute_Bank_Charges_Flag >= 1 Then
        Call Calculate_BankCharge(Transaction_Code, Account_Type, Account_Category, Abs(Transaction_Amount), Clear_bal, Our_Bank_Charges)
    End If
    
    ' If Transaction Date = Clear Date, Post Bank Charges in IInd slot
    If Compute_Bank_Charges_Flag >= 1 And Transaction_Date = Clear_Date Then
        If Transaction_Amount + Clear_bal >= Our_Bank_Charges Then
            
        Else
            Our_Bank_Charges = Transaction_Amount + Clear_bal
        End If

        ''If Clear_Bal <= 0 And UnClear_Bal <= 0 Then Our_Bank_Charges = 0
        If Transaction_Amount + Clear_bal <= 0 Then Our_Bank_Charges = 0
        
        Bank_Charges_Amount = 0
        If Our_Bank_Charges >= 0 Then Bank_Charges_Amount = 0 - Our_Bank_Charges
    End If
    
    'Post and Insert Main Transaction in Database
    Call Post_Transaction(Transacting_Branch, Transaction_Date, Transaction_Time, Transaction_number, Customer_Home_Branch, _
                            Cust_Id, Account_Type, Account_No, Transaction_Code, Posting_Amount, _
                            Bank_Charges_Amount, Narration, Clear_Date, Teller_Id, Cheque_Number, _
                            Cheque_Date, Cheque_Bank, Reversal_Entry_Flag, _
                            Trfr_FromTo_Cust, Trfr_AcType, Trfr_AcNo, Loan_AcType, Loan_AcNo, With_Card_Flag, _
                            0, Card_Number, Account_Category, HotTrans_Ins_DateTime, HotConfirm_Flag, Err_Flag)
    If Err_Flag <> 0 Then GoTo Proc_Error
    
    ' Post Bank Charges Transaction separately, if Transaction Date <> Clear Date (e.g. Cheque Deposit)
    If Compute_Bank_Charges_Flag >= 1 And Transaction_Date <> Clear_Date Then
        If Our_Bank_Charges > 0 Then
        ''If Clear_Bal <= 0 And UnClear_Bal <= 0 Then Our_Bank_Charges = 0
        If Transaction_Amount + Clear_bal >= Our_Bank_Charges Then
            
        Else
            Our_Bank_Charges = Transaction_Amount + Clear_bal
        End If
        If Transaction_Amount + Clear_bal <= 0 Then Our_Bank_Charges = 0

            Our_Bank_Charges = 0 - Our_Bank_Charges
            GoSub Allot_Trans_Number
            'Post and Insert in  Transaction for Bank Charges
            Call Post_Transaction(Transacting_Branch, Transaction_Date, Transaction_Time, Last_Number, Customer_Home_Branch, _
                                    Cust_Id, Account_Type, Account_No, Transaction_Code, 0, Our_Bank_Charges, "Bank Commission Chgs", _
                                    Transaction_Date, Teller_Id, 0, #1/1/1920#, "", 0, 0, 0, 0, 0, 0, With_Card_Flag, _
                                    Transaction_number, Card_Number, Account_Category, HotTrans_Ins_DateTime, HotConfirm_Flag, Err_Flag)
            If Err_Flag <> 0 Then GoTo Proc_Error
        End If
    End If
    Clear_bal = Clear_bal + Our_Bank_Charges
    
    ' Compute Minimum Balance Charges, if user requested for it
    If Compute_Min_Balance_Charges_Flag >= 1 Then
        ' Apply Them only if it is a withdrawal transaction
        If Transaction_Amount < 0 Then
            If Clear_bal < Block_Amt Then Call Calculate_BankCharge(TC_Below_Block, Account_Type, Account_Category, Transaction_Amount, Clear_bal, Below_Block_Charges)
            If Below_Block_Charges > 0 Then
                Below_Block_Charges = 0 - Below_Block_Charges
                GoSub Allot_Trans_Number
                'Post and Insert in  Transaction for Bank Charges
                Call Post_Transaction(Transacting_Branch, Transaction_Date, Transaction_Time, Last_Number, Customer_Home_Branch, _
                                        Cust_Id, Account_Type, Account_No, TC_Below_Block, 0, Below_Block_Charges, "Minimum Balance Charges", _
                                        Transaction_Date, System_Transactions_User_ID, 0, #1/1/1920#, "", 0, 0, 0, 0, 0, 0, With_Card_Flag, _
                                        Transaction_number, Card_Number, Account_Category, HotTrans_Ins_DateTime, HotConfirm_Flag, Err_Flag)
                If Err_Flag <> 0 Then GoTo Proc_Error
                Clear_bal = Clear_bal + Below_Block_Charges
            End If
        End If
    End If
    
    'Perform Auto Loan Recovery Routine for This Customer
    Call Auto_Loan_Recovery(Customer_Home_Branch, Cust_Id, Account_Type, Account_No, Block_Amt, Pkg_Begin_Date, Pkg_Opg_Bal)
    If Err_Flag <> 0 Then GoTo Proc_Error
    
    Err_Flag = 0
'''    Call AKS_EndTrans(MyClass.Connection_No)
    Exit Sub
    
'''*********************** SUBROUTINES ****************************
Allot_Trans_Number:

    ' Allot Transaction Number Here
    
    Sqlstr = "update " & MyClass.gUnifyDb & "aks_parameter set par_no = par_no + 1 where par_key = 'TXN_NO'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo Proc_Error
    
    Sqlstr = "select par_no from " & MyClass.gUnifyDb & "aks_parameter where par_key = 'TXN_NO'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo Proc_Error
    Last_Number = 0
    If Not Recset.EOF Then Last_Number = Recset!Par_No
    
    Sqlstr = "select cust_idno from " & MyClass.gUnifyDb & "nsav_txn where txn_br_code = " & MyClass.Unit_Code & _
             " and txn_date = '" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "' and txn_no = " & Last_Number & " "
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo Proc_Error
    If Not Recset.EOF Then GoTo Allot_Trans_Number

    Sqlstr = "select cust_idno from " & MyClass.gUnifyDb & "foreign_sav_txn where txn_br_code = " & MyClass.Unit_Code & _
             " and txn_date = '" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "' and txn_no = " & Last_Number & " "
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo Proc_Error
    If Not Recset.EOF Then GoTo Allot_Trans_Number
    Return

Proc_Error:

    ''' RollBack Main Connection
'''    Call AKS_RollBackTrans(MyClass.Connection_No)
    Call errHandler("Transactions/Post_Data")
    Err_Flag = 3
    Exit Sub
End Sub

Public Sub Reverse_Auto_Loan_Recovery(ByVal Branch_Code As Integer, ByVal Cust_Id As Long, ByVal Account_Type As Integer, ByVal Account_No As Long, ByVal Reversed_Amt As Currency)
Dim Sqlstr As String, Transaction_Time As Integer, Integer_Flag As Integer, Transaction_number As Long, Ac_Categ As String
Dim Recset As New ADODB.Recordset
    
    If Set_Connection(Branch_Code) <> 0 Then Exit Sub
    
    ' Get Account Category from Nsav_Account
    Sqlstr = " Select ac_categ From " & UseDbPrefix & "nsav_account where " & _
          " br_code=" & Branch_Code & " and cust_idno=" & Cust_Id & _
          " and type_code=" & Account_Type & " and ac_srno=" & Account_No
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Reverse Auto_Loan_Recovery")
    
    Ac_Categ = "N"
    If Recset.EOF = False Then Ac_Categ = IIf(IsNull(Recset!Ac_Categ), "", Trim$(Recset!Ac_Categ))
    Transaction_Time = Format(Now(), "HHMM")
    Transaction_number = 0
    If Branch_Code = MyClass.Unit_Code Then
        Call Post_Transaction(Branch_Code, MyClass.Branch_Working_Date, Transaction_Time, Transaction_number, Branch_Code, _
                                Cust_Id, Account_Type, Account_No, TC_Credit_From_Loan_Account, Reversed_Amt, _
                                0, "Excess Recovery Reversed", MyClass.Branch_Working_Date, Left$(gsUser_Login, 3), 0, #1/1/1900#, "", 0, _
                                0, 0, 0, 0, 0, 0, 0, 0, Ac_Categ, , , Integer_Flag)
    End If
    If Branch_Code <> MyClass.Unit_Code Then
        Call Post_Alien_Transaction(Branch_Code, MyClass.Branch_Working_Date, Transaction_Time, Transaction_number, Branch_Code, _
                                Cust_Id, Account_Type, Account_No, TC_Credit_From_Loan_Account, Reversed_Amt, _
                                0, "Excess Recovery Reversed", MyClass.Branch_Working_Date, Left$(gsUser_Login, 3), 0, #1/1/1900#, "", 0, _
                                0, 0, 0, 0, 0, 0, 0, 0, Ac_Categ, Integer_Flag)
    End If
    Exit Sub
End Sub

Public Sub Start_CompanyWork()
End Sub
Public Sub Get_Customer_Balance(ByVal Br_Code As Integer, ByVal Cust_Code As Long, ByVal Ac_Type As Integer, ByVal Ac_No As Long, _
                            ByVal Bal_OnDate As Date, ByRef Clear_bal As Currency, ByRef UnClear_bal As Currency, _
                            Optional ByVal Pkg_Begin_Date As Date, Optional ByVal Pkg_Opg_Bal As Currency)
Dim Sqlstr As String, rsAccounts As New ADODB.Recordset
Dim Package_Begin_Date As Date

    Clear_bal = 0
    UnClear_bal = 0
    
    If Set_Connection(Br_Code) <> 0 Then Exit Sub
    
    
    ' If called from Transactions Program, Then Pkg_Begin_Date & Opg_Bal on that Date will come as parameter
    If IsMissing(Pkg_Begin_Date) = True Or Pkg_Begin_Date = #12:00:00 AM# Then
        ' Package Begin Date has to be taken from home branch of the customer
        Sqlstr = "select pkg_begin_date from " & UseDbPrefix & "nsav_sysparam where home_branch = " & Br_Code
        Call Fire_Sql(Sqlstr, rsAccounts, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_Customer_Balance_0")
        Package_Begin_Date = #1/1/1920#
        If rsAccounts.EOF = False Then Package_Begin_Date = IIf(IsNull(rsAccounts!Pkg_Begin_Date), #1/1/1920#, rsAccounts!Pkg_Begin_Date)
        ''''' Select Opening balance for Package begin date
        Sqlstr = "select pkg_open_bal from " & UseDbPrefix & "nsav_account where  br_code = " & Br_Code & _
                " and cust_idno = " & Cust_Code & " and type_code=" & Ac_Type & " and ac_srno=" & Ac_No
        Call Fire_Sql(Sqlstr, rsAccounts, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_Customer_Balance_1")
        If Not rsAccounts.EOF Then Clear_bal = IIf(IsNull(rsAccounts.Fields(0)), 0, rsAccounts.Fields(0))
    Else
        Package_Begin_Date = Pkg_Begin_Date
        Clear_bal = Pkg_Opg_Bal
    End If
    
    ''''  To work out balance from sbal_rec File
    ''''' Reversal_flag >= 0 added by pankaj because where condition will exists on Indexes.
    
    Sqlstr = " Select sum(txn_amt), sum(txn_bnk_chg) from " & UseDbPrefix & "nsav_txn " & _
          " Where txn_hbr_cd=" & Br_Code & " and cust_idno = " & Cust_Code & _
          " and type_code = " & Ac_Type & " and ac_srno = " & Ac_No & _
          " and txn_clear_date >= '" & Format(Package_Begin_Date, "dd-mmm-yyyy") & "'" & _
          " and txn_clear_date <= '" & Format(Bal_OnDate, "dd-mmm-yyyy") & "' and reversal_flag >= 0 and txn_delete_flag = 0 "
    Call Fire_Sql(Sqlstr, rsAccounts, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_Customer_Balance_2")
    If Not rsAccounts.EOF Then
        Clear_bal = Clear_bal + IIf(IsNull(rsAccounts.Fields(0)), 0, rsAccounts.Fields(0))
        Clear_bal = Clear_bal + IIf(IsNull(rsAccounts.Fields(1)), 0, rsAccounts.Fields(1))
    End If
    
    '''''''' Work out UNCLEARED  Balance
    Sqlstr = "Select sum(txn_amt),sum(txn_bnk_chg) from " & UseDbPrefix & "nsav_txn where " & _
                " txn_hbr_cd =" & Br_Code & " and cust_idno = " & Cust_Code & " and type_code =" & Ac_Type & " and " & _
                "ac_srno =" & Ac_No & "  and txn_clear_date > '" & Format(Bal_OnDate, "dd-mmm-yyyy") & "'" & _
                " and reversal_flag >= 0 and txn_delete_flag = 0 and txn_date <= '" & Format(Bal_OnDate, "dd-mmm-yyyy") & "'"
    Call Fire_Sql(Sqlstr, rsAccounts, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_Customer_Balance_3")
    If Not rsAccounts.EOF Then
        UnClear_bal = UnClear_bal + IIf(IsNull(rsAccounts.Fields(0)), 0, rsAccounts.Fields(0))
        UnClear_bal = UnClear_bal + IIf(IsNull(rsAccounts.Fields(1)), 0, rsAccounts.Fields(1))
    End If
    ' How to take of unposted transactions
    Exit Sub
End Sub
Public Sub New_Customer_Balance(ByVal Br_Code As Integer, ByVal Package_Begin_Date As Date, ByVal Cust_Code As Long, _
                            ByVal Ac_Type As Integer, ByVal Ac_No As Long, ByVal Package_Opg_Balance As Currency, _
                            ByVal RecSet_Knt As Long, ByRef Txn_recset As ADODB.Recordset, _
                            ByVal Bal_OnDate As Date, ByRef Clear_bal As Currency, ByRef UnClear_bal As Currency)
Dim Clear_Date As Date, Txn_Date As Date

    Clear_bal = 0
    UnClear_bal = 0
    
    If Set_Connection(Br_Code) <> 0 Then Exit Sub
    Clear_bal = Package_Opg_Balance
    If RecSet_Knt <= 0 Then Exit Sub
    Txn_recset.MoveFirst
    Do While Txn_recset.EOF = False
        Txn_Date = IIf(IsNull(Txn_recset!Txn_Date), #1/1/1920#, Txn_recset!Txn_Date)
        Clear_Date = IIf(IsNull(Txn_recset!Txn_Clear_Date), Txn_recset!Txn_Date, Txn_recset!Txn_Clear_Date)
        If Clear_Date >= Package_Begin_Date And Clear_Date <= Bal_OnDate Then Clear_bal = Clear_bal + IIf(IsNull(Txn_recset!Txn_Amt), 0, Txn_recset!Txn_Amt) + IIf(IsNull(Txn_recset!Txn_Bnk_Chg), 0, Txn_recset!Txn_Bnk_Chg)
        If Clear_Date > Bal_OnDate And Txn_Date <= Bal_OnDate Then UnClear_bal = UnClear_bal + IIf(IsNull(Txn_recset!Txn_Amt), 0, Txn_recset!Txn_Amt) + IIf(IsNull(Txn_recset!Txn_Bnk_Chg), 0, Txn_recset!Txn_Bnk_Chg)
        Txn_recset.MoveNext
    Loop
    Exit Sub
End Sub

Public Sub Get_AcType_Desc(ByVal Acc_Type As Long, ByRef Acc_Desc As String)
Dim Sqlstr As String, Rs_Ac_Type As New ADODB.Recordset

    Acc_Desc = ""
    Sqlstr = "select type_code,type_name from " & MyClass.gUnifyDb & "ac_type where type_code=" & Acc_Type
    Call Fire_Sql(Sqlstr, Rs_Ac_Type, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Get_AcType_Desc_1")
    If Not Rs_Ac_Type.EOF Then Acc_Desc = Trim$(IIf(IsNull(Rs_Ac_Type!Type_Name), "", Rs_Ac_Type!Type_Name))
    Exit Sub
End Sub
Public Sub Get_Interest_Fluc_Loan(ByVal S_br_code As Integer, ByVal S_Cust_Idno As Long, ByVal S_Type_Code As Integer, _
            ByVal S_Ac_Srno As Long, ByVal Date_Ason As Date, ByVal Date_From As Date, _
            ByVal F_Od_limit As Currency, ByVal F_Od_Intrate As Currency, _
            ByVal F_Addn_Limit As Currency, ByVal F_Addn_IntRate As Currency, ByRef Pn_Interest As Currency)

Dim Sqlstr As String, Recset As New ADODB.Recordset, RecsetBal As New ADODB.Recordset, rs_RecSet As New ADODB.Recordset
Dim Clear_bal As Currency, UnClear_bal As Currency, Date1 As Date, Date2 As Date
Dim Balance As Currency, Int_On_Value As Currency, Int_No_Days As Integer, Int_Amount As Currency
Dim Int_On_Odvalue As Currency, Int_On_Addodvalue As Currency, Int_Od As Currency, Int_Addl As Currency
Dim Total_No_days As Integer, Temp_Value As Currency, Round_Off As Currency
Dim Long_Var As Long

    Pn_Interest = 0
    If Set_Connection(S_br_code) <> 0 Then Exit Sub
    
    Total_No_days = (Date_Ason - Date_From) + 1
    Call Get_Customer_Balance(S_br_code, S_Cust_Idno, S_Type_Code, S_Ac_Srno, Date_From, Clear_bal, UnClear_bal)

    Sqlstr = " select sbal_date,sbal_month_debit,sbal_month_credit from " & UseDbPrefix & "sbal_rec " & _
          " where sbal_hbr_code = " & S_br_code & " and cust_idno = " & S_Cust_Idno & _
          " and sbal_acc_type = " & S_Type_Code & " and sbal_acc_no = " & S_Ac_Srno & _
          " and sbal_date > '" & Format(Date_From, "dd-mmm-yyyy") & "' and sbal_date <= '" & Format(Date_Ason, "dd-mmm-yyyy") & "'"
    Call Fire_Sql(Sqlstr, RecsetBal, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Get_Interest_Fluc_Loan_1")
    Date1 = Date_From
    Balance = Clear_bal
    Int_Amount = 0

    Do While Not RecsetBal.EOF()
        Date2 = RecsetBal!sbal_date
        GoSub Int_calculation
        
        Date1 = Date2
        Balance = Balance + IIf(IsNull(RecsetBal!sbal_month_credit), 0, RecsetBal!sbal_month_credit)
        Balance = Balance - IIf(IsNull(RecsetBal!sbal_month_debit), 0, RecsetBal!sbal_month_debit)
        RecsetBal.MoveNext
    Loop

    If Date_Ason > Date1 Then
        Date2 = Date_Ason
        GoSub Int_calculation
    End If

    If Pn_Interest > 0 Then
        '' for rounding of to nearest paise
        Round_Off = 5
        Sqlstr = "select * from " & UseDbPrefix & "aks_parameter where par_key='ROUND_INT'"
        Call Fire_Sql(Sqlstr, rs_RecSet, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Get_Interest_Fluc_Loan_1")
        If Not rs_RecSet.EOF Then Round_Off = rs_RecSet!Par_No
        Temp_Value = Pn_Interest
        Call round_off_amt(Temp_Value, Round_Off, Pn_Interest)
    End If
    Exit Sub

Int_calculation:
    Int_Od = 0
    Int_Addl = 0
    Int_On_Value = 0
    If Balance < 0 Then Int_On_Value = 0 - Balance
    
    Int_No_Days = (Date2 - Date1) ''' - 1
    If Int_No_Days < 0 Then Int_No_Days = 0
    
    Int_On_Odvalue = Int_On_Value
    Int_On_Addodvalue = 0
    If Int_On_Value > F_Od_limit Then
        Int_On_Odvalue = F_Od_limit
        Int_On_Addodvalue = Int_On_Value - F_Od_limit
    End If
    Int_Od = (Int_On_Odvalue * (F_Od_Intrate / 100) * (Int_No_Days / 365))
    Int_Addl = (Int_On_Addodvalue * (F_Addn_IntRate / 100) * (Int_No_Days / 365))
    Pn_Interest = Pn_Interest + Int_Od + Int_Addl
    Return
End Sub

Public Sub Get_Acc_Type(ByRef Arr_Type_Desc() As String, ByRef Arr_Type_Code() As String, ByRef No_Element As Long, ByRef SuccessFlag As Byte)
Dim Sqlstr As String, Rs_Ac_Type As New ADODB.Recordset

    SuccessFlag = 1
    No_Element = 0
    Sqlstr = "Select type_code,type_name from " & MyClass.gUnifyDb & "ac_type where sys_type_code=1"
    Call Fire_Sql(Sqlstr, Rs_Ac_Type, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_Acc_Type_1")
    Do While Not Rs_Ac_Type.EOF
        No_Element = No_Element + 1
        ReDim Preserve Arr_Type_Desc(No_Element), Arr_Type_Code(No_Element)
        Arr_Type_Desc(No_Element) = Trim$(Rs_Ac_Type!Type_Name)
        Arr_Type_Code(No_Element) = Rs_Ac_Type!Type_Code
        Rs_Ac_Type.MoveNext
    Loop
    SuccessFlag = 0
    Exit Sub
End Sub

Public Sub Saving_Interest_calculation(ByVal Account_BrCode As Integer, _
    ByVal CustId As Long, ByVal Account_Type As Integer, ByVal Account_Srno As Long, _
    ByVal Int_Date_From As Date, ByVal Int_Date_To As Date, ByVal Addl_Int_Rate As Currency, _
    ByVal Base_Type As String, ByVal Base_Rate_Code As Byte, ByVal Round_Off As Integer, ByVal Pn_Min_Balance As Currency, _
    ByVal Pn_Wit_Per As Currency, ByVal Ln_Capital_Flag As Byte, ByRef Int_Amount As Currency, _
    ByRef Tax_Amount As Currency, ByRef Ln_Error_Flag As Long)
    
    ''''''' IMPORTANT
    '''If Base_Type = 'Z' then
    '''    => Base_Rate_code = 99
    '''    => Interest Rate = Addl_Int_Rate
    ''' ( i.e. This Function does not call get_interest_rate Function )
    '''  Ln_Capital_Flag = 0  -  Only Accrued Interest  ( Not Inserted into Post_Trans )
    '''  Ln_Capital_flag = 1  -  Interest Capitalisation
    '''  Ln_Capital_flag = 9  -  Not Posted in Post_trans & Also not in Interest Txn Table
Dim Sqlstr As String, Recset As New ADODB.Recordset, Recset_Ltxn As New ADODB.Recordset
Dim RecsetBal As New ADODB.Recordset
Dim Temp_Date As Date, IntStart_yyyymm As Long, IntEnd_yyyymm As Long, Open_balance As Currency
Dim I As Long, Clear_bal As Currency, UnClear_bal As Currency, Min_Balance As Currency
Dim Sbal_yyyymm As Long, Calculated_int As Currency, Int_Rate As Currency
Dim Date_Upto As Date, Date_For_Int As Date, Temp_Value As Currency, Ls_Tax_Code As String
Dim Ln_Int_for_MM As Byte, Ln_Int_For_YY As Integer

    Ln_Error_Flag = 0
    Int_Amount = 0
    Tax_Amount = 0
    
    If Set_Connection(Account_BrCode) <> 0 Then Exit Sub
    
    Base_Type = UCase(Base_Type)
    If Base_Type = "Z" Then Base_Rate_Code = 99

    '''''' No interest for a/c open month if day > 1
    If Day(Int_Date_From) <> 1 Then Int_Date_From = CDate(DateSerial(Year(Int_Date_From), Month(Int_Date_From) + 1, 1))
    Temp_Date = CDate(DateSerial(Year(Int_Date_To), Month(Int_Date_To) + 1, 1)) - 1
    '''''''' No iterest for a/c close month if day < end of day of month
    If Temp_Date <> Int_Date_To Then Int_Date_To = CDate(DateSerial(Year(Int_Date_To), Month(Int_Date_To), 1)) - 1
    If Int_Date_From > Int_Date_To Then Exit Sub
    IntStart_yyyymm = (Year(Int_Date_From) * 100) + Month(Int_Date_From)
    IntEnd_yyyymm = (Year(Int_Date_To) * 100) + Month(Int_Date_To)

    Call Get_Customer_Balance(Account_BrCode, CustId, Account_Type, Account_Srno, Int_Date_From - 1, Clear_bal, UnClear_bal)
    Open_balance = Clear_bal

    Sqlstr = " select sbal_month_debit,sbal_month_credit,sbal_date from " & UseDbPrefix & "sbal_rec " & _
             " where sbal_hbr_code = " & Account_BrCode & " and cust_idno = " & CustId & " and sbal_acc_type = " & Account_Type & _
             " and sbal_acc_no = " & Account_Srno & " and sbal_date >= '" & Format(Int_Date_From, "dd-mmm-yyyy") & "'" & " and sbal_date <= '" & Format(Int_Date_To, "dd-mmm-yyyy") & "'" & " order by sbal_date "
    Call Fire_Sql(Sqlstr, RecsetBal, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Saving_Interest_Calculation_1")

    For I = IntStart_yyyymm To IntEnd_yyyymm
        Min_Balance = Open_balance
        Date_For_Int = CDate("01" + "/" + Right(Format(I, "000000"), 2) + "/" + Left(Format(I, "000000"), 4))
        Ln_Int_for_MM = Month(Date_For_Int)
        Ln_Int_For_YY = Year(Date_For_Int)
        If Not RecsetBal.EOF Then
            Sbal_yyyymm = Year(RecsetBal!sbal_date) * 100 + Month(RecsetBal!sbal_date)
            Do While I = Sbal_yyyymm
                Open_balance = Open_balance - RecsetBal!sbal_month_debit + RecsetBal!sbal_month_credit
                If Open_balance < Min_Balance Then Min_Balance = Open_balance
                RecsetBal.MoveNext
                If RecsetBal.EOF Then Exit Do
                Sbal_yyyymm = Year(RecsetBal!sbal_date) * 100 + Month(RecsetBal!sbal_date)
            Loop
        End If
    
        '''''' calculate interest
        Int_Rate = 0
        Calculated_int = 0
        If Min_Balance >= Pn_Min_Balance Then
            Int_Rate = 0
            If UCase(Base_Type) <> "Z" Then Call Get_Interest_rate(Base_Type, Base_Rate_Code, Date_For_Int, Int_Rate, Date_Upto)
            Int_Rate = Int_Rate + Addl_Int_Rate
            If Int_Rate < 0 Then Int_Rate = 0
            Temp_Value = (Min_Balance * (Int_Rate / 100) * (1 / 12))
            If Temp_Value > 0 Then Call round_off_amt(Temp_Value, Round_Off, Calculated_int)
        End If
    
        Int_Amount = Int_Amount + Calculated_int
        If Ln_Capital_Flag = 0 Or Ln_Capital_Flag = 1 Then
            If Calculated_int > 0 Then
            '''''''''''''  Insert into Interest Txn Table
            '===========Insert record into the gl_txn table
                Sqlstr = " Insert into " & UseDbPrefix & "nsav_int_txn " & _
                      " (itxn_br_code, itxn_cust_idno, itxn_type_code,itxn_ac_srno, itxn_int_year, itxn_int_month ," & _
                      " itxn_int_amt, itxn_min_balance,itxn_cap_flag ) " & _
                      " VALUES (" & Account_BrCode & "," & CustId & "," & Account_Type & "," & _
                        Account_Srno & "," & Ln_Int_For_YY & "," & Ln_Int_for_MM & "," & _
                        Calculated_int & "," & Min_Balance & "," & Ln_Capital_Flag & ")"
                Call Fire_Sql(Sqlstr, Recset_Ltxn, Sql_Error, Use_Connection, recs_read)
                If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Saving_Interest_Calculation_2")
            End If
        End If
        If Right(CStr(I), 2) = "12" Then I = I + 88
    Next I

    If Int_Amount < 0 Then Int_Amount = 0
    If Int_Amount > 0 Then
        Ls_Tax_Code = "N"
        Sqlstr = " select tax_code from " & UseDbPrefix & "customer where br_code = " & Account_BrCode & " and cust_idno = " & CustId
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Saving_Interest_Calculation_3")
        If Recset.EOF = False Then
            Ls_Tax_Code = IIf(IsNull(Recset!Tax_Code), "N", Recset!Tax_Code)
        End If
        Temp_Value = 0
        If Ls_Tax_Code = "Y" Then Temp_Value = (Int_Amount * Pn_Wit_Per) / 100
        If Temp_Value > 0 Then Call round_off_amt(Temp_Value, Round_Off, Tax_Amount)
    End If
End Sub
Public Sub Get_Interest_rate(ByVal Pn_Base_Type As String, ByVal Pn_Rate_Code As Byte, _
                             ByVal Pn_Date_From As Date, ByRef Pn_Int_Rate As Currency, ByRef Pn_Date_Upto As Date)

Dim Sqlstr As String, Recset As New ADODB.Recordset

    Pn_Int_Rate = 0
    Pn_Date_Upto = CDate("01-01-1920")
    If Pn_Base_Type <> "S" And Pn_Base_Type <> "C" Then Exit Sub

    Sqlstr = " select br_int_rate, br_date_from from " & MyClass.gUnifyDb & "lbase_rates " & _
             " where br_rate_type = '" & Pn_Base_Type & "' and br_rate_cd = " & Pn_Rate_Code & _
             " and br_date_from <= '" & Format(Pn_Date_From, "dd-mmm-yyyy") & "' order by br_date_from desc"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_Interest_Rate_1")
    If Recset.EOF = True Then Exit Sub
    Pn_Int_Rate = IIf(IsNull(Recset!br_int_rate), 0, Recset!br_int_rate)
        
    Sqlstr = " select br_date_from from " & MyClass.gUnifyDb & "lbase_rates " & _
             " where br_rate_type = '" & Pn_Base_Type & "' and br_rate_cd = " & Pn_Rate_Code & _
          " and br_date_from > '" & Format(Pn_Date_From, "dd-mmm-yyyy") & "' order by br_date_from asc"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_Interest_Rate_2")
    If Recset.EOF = True Then
        Pn_Int_Rate = 0
        Exit Sub
    End If
    Pn_Date_Upto = Recset!br_date_from - 1
End Sub

'Public Sub Get_LoanInfo(ByVal Pn_BrCode As Integer, ByVal Pn_CustId As Long, ByVal Pn_AcType As Integer, _
'                        ByVal Pn_AcNo As Long, ByRef Ps_LoanData() As UnPacked_LoanRecord, _
'                        ByRef Pn_NoRec As Byte, ByRef Pn_ErrFlag As Byte)
'
'Dim Sqlstr As String, Rs_Loans As New ADODB.Recordset, Rs_Loan_Repay As New ADODB.Recordset
'Dim Loan_AcType As Integer, Loan_AcNo As Long, I As Byte, Due_Date As Date
'
'    Pn_NoRec = 0
'    Pn_ErrFlag = 0
'
'    If Set_Connection(Pn_BrCode) <> 0 Then Exit Sub
'
'    For I = 1 To 6
'        Ps_LoanData(I).Account_No = 0
'        Ps_LoanData(I).Account_Type = 0
'        Ps_LoanData(I).Arrears_Amount = 0
'        Ps_LoanData(I).Inst_Frequency = 0
'        Ps_LoanData(I).Installment_Amount = 0
'        Ps_LoanData(I).Maturity_Date = CDate("01/01/1920")
'        Ps_LoanData(I).Next_InstDate = CDate("01/01/1920")
'    Next I
'
'    ''' Read the Live Records from Loan Account Master which are linked to this Savings Account
'    Sqlstr = "select lm_type_code,lm_ac_srno,lm_install_freq,lm_latest_install_amt,lm_maturity_date from " & UseDbPrefix & "laccounts where lm_hbr_cd=" & Pn_BrCode & _
'            " and lm_sav_cust_idno = " & Pn_CustId & " and lm_sav_ac_type_code = " & Pn_AcType & _
'            " and lm_sav_ac_srno = " & Pn_AcNo & " and lm_ac_status = 0 and lm_type_code < " & Loan_Type_For_SalAdv & _
'            " and lm_disb_amt > 0 "
'    Call Fire_Sql(Sqlstr, Rs_Loans, Sql_Error, Use_Connection, recs_read)
'    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_LoanINFO_1")
'    If Rs_Loans.EOF Then Exit Sub
'
'    Do While Not Rs_Loans.EOF
'        Loan_AcType = IIf(IsNull(Rs_Loans!lm_type_code), 0, Rs_Loans!lm_type_code)
'        If Loan_AcType = 0 Then GoTo Next_Record
'        Loan_AcNo = IIf(IsNull(Rs_Loans!lm_ac_srno), 0, Rs_Loans!lm_ac_srno)
'        If Loan_AcNo = 0 Then GoTo Next_Record
'
'        Pn_NoRec = Pn_NoRec + 1
'        If Pn_NoRec > 6 Then
'            Pn_NoRec = 6
'            GoTo Over_Now
'        End If
'        Ps_LoanData(Pn_NoRec).Account_No = Loan_AcNo
'        Ps_LoanData(Pn_NoRec).Account_Type = Loan_AcType
'        Ps_LoanData(Pn_NoRec).Inst_Frequency = IIf(IsNull(Rs_Loans!lm_install_freq), 0, Rs_Loans!lm_install_freq)
'        Ps_LoanData(Pn_NoRec).Installment_Amount = IIf(IsNull(Rs_Loans!lm_latest_install_amt), 0, Rs_Loans!lm_latest_install_amt)
'        Ps_LoanData(Pn_NoRec).Maturity_Date = IIf(IsNull(Rs_Loans!lm_maturity_date), CDate("01/01/1920"), Rs_Loans!lm_maturity_date)
'
'        'See if Any Arrears exist in Loan Arrears Table
'        Call Get_Loan_Arrear(Pn_BrCode, Loan_AcType, Loan_AcNo, MyClass.Branch_Working_Date, Ps_LoanData(Pn_NoRec).Arrears_Amount, Due_Date)
'
'        ' Aks_Save_Next_Date is being computed now in function Get_Loan_Arrear
'        ' In case it is not computed there, it will set the date as #1/1/1900#
'        If AKS_Save_Next_Date = #1/1/1900# Then
'            'Read Next Installment Date
'            Sqlstr = "select pay_install_due_date from " & UseDbPrefix & "lrepay" & _
'                    " where pay_hbr_cd=" & Pn_BrCode & " and pay_type_code=" & Loan_AcType & _
'                    " and pay_ac_srno=" & Loan_AcNo & " and pay_status = 0 Order by pay_install_due_date "
'            Call Fire_Sql(Sqlstr, Rs_Loan_Repay, Sql_Error, Use_Connection, recs_read)
'            If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_LoanINFO_3")
'            If Not Rs_Loan_Repay.EOF Then Ps_LoanData(Pn_NoRec).Next_InstDate = IIf(IsNull(Rs_Loan_Repay!pay_install_due_date), #1/1/1920#, Rs_Loan_Repay!pay_install_due_date)
'        Else
'            Ps_LoanData(Pn_NoRec).Next_InstDate = AKS_Save_Next_Date
'        End If
'        If Pn_NoRec > 6 Then
'            MsgBox "More than six loans against this account. Card cannot be Updated!"
'            Pn_ErrFlag = 1
'            Exit Do
'            End If
'Next_Record:
'        Rs_Loans.MoveNext
'    Loop
'Over_Now:
'
'    Exit Sub
'End Sub
Public Sub Post_Transaction(ByVal Transacting_Branch As Integer, ByVal Transaction_Date As Date, ByVal Transaction_Time As Integer, _
                            ByRef Transaction_number As Long, ByVal Customer_Home_Branch As Integer, _
                            ByVal Cust_Id As Long, ByVal Account_Type As Integer, ByVal Account_No As Long, _
                            ByVal Transaction_Code As String, ByVal Transaction_Amount As Currency, _
                            ByVal Commission_Amt As Currency, ByVal Narration As String, ByVal Clear_Date As Date, _
                            ByVal Teller_Id As String, ByVal Cheque_Number As Long, ByVal Cheque_Date As Date, _
                            ByVal Cheque_Bank As String, ByVal Reversal_Entry_Flag As Byte, _
                            ByVal Trfr_FromTo_Cust As Long, ByVal Trfr_AcType As Integer, ByVal Trfr_AcNo As Long, _
                            ByVal Loan_AcType As Integer, ByVal Loan_AcNo As Long, ByVal With_Card_Flag As Byte, _
                            ByVal Main_Transaction_No As Long, ByVal Card_Number As Long, ByVal Account_Categ As String, _
                            Optional ByVal HotTrans_Ins_DateTime As Date, Optional ByVal HotConfirm_Flag As Byte, _
                            Optional ByRef Err_Flag As Integer, Optional ByVal ATM_Post_Flag As Byte, Optional Current_Connection As Integer)
Dim Sqlstr As String
Dim Last_Number As Long, Date_Time_Now As Date, Str_Trans_Time As String
Dim Amt_Posted_In_Loan As Currency, Loan_Txn_No As Long
Dim Db_Clear_Bal As Currency, Transaction_Group As Byte, Valid_Card_Holder As Byte
Dim Last_Wd_Date As Date, Last_WD_Amount As Currency, Extra_Trans_Number As Long
Dim Last_Cr_Date As Date, Last_CR_Amount As Currency, Loan_Transfer_Flag
Dim Teller_Trans_Number As Long, Absolute_Amount As Currency, Temp_Amt As Currency, Reversal_Status As Byte
Dim Last_Cr_Narration As String, Temp_Tfr_Commission As Currency
Dim ExistingConfirm_Flag As Byte, New_Log_Date As Date
Dim Checksum_Encrypted As String, Checksum_Plain As Currency, Byte_Var As Byte

'From Where these Fields Have to be taken
Dim Trfr_To_Loan_Commission As Currency
Dim Tran_Data As UnPacked_TranRecord
Dim Temp_Trans_Code As String
Dim ATM_Ac_No As String
Dim Temp_Connection As Integer, TempDb As String

Dim ATM_Transaction As String

    'If ATM Post Flag = 0 then it will post in export_atm_txn table
    'If ATM Post Flag <> 0 then it won't post in export_atm_txn table

    'this modification is done for ATM
    Temp_Connection = MyClass.Connection_No
    TempDb = MyClass.gUnifyDb
    If Current_Connection <> 0 Then
        Temp_Connection = Current_Connection
        TempDb = MyClass.ATM_DB
    End If

    'To check whether the Transaction Date is less than 01/01/2003.
    'If date is less than 01/01/2003 then give the warning and terminate the apllication
    If Transaction_Date < CDate("01-01-2003") Then
        MsgBox "Cannot Post the Transaction whose Date is Less than 01-01-2003" & vbCrLf & _
                "The Application will be Terminated" & vbCrLf & _
                "Please Contact Your IT Manager", vbCritical, "Warning"
        End
    End If
    Temp_Trans_Code = ""
    
    Err_Flag = 0
    
    ' Set Reversal Status
    Reversal_Status = 0
    If Reversal_Entry_Flag >= 1 Then Reversal_Status = 2
    
    If Transacting_Branch <> MyClass.Unit_Code And Transaction_number = 0 Then
        Call MyClass.Display_Message("Remote Branch Transaction Received without Transaction Number. Stupid Mistake in Import Program. Inform Amity Software Inc.", 1)
        Exit Sub
    End If
    
    ' Is the Customer a Valid card Holder
    Valid_Card_Holder = 1
    If With_Card_Flag <= 0 Then Valid_Card_Holder = Find_Valid_CardHolder(Customer_Home_Branch, Cust_Id, Account_Type, Account_No, Temp_Connection)
    
    ' Find Transaction Group
    ' 1 = cash Deposit
    ' 2 = Cash Withdrawal
    ' 3 = Cheque Deposit
    ' 4 = Cheque Withdrawal
    ' 5 = Inter Account Transfer (Withdrawal from This Account & Deposit in another A/c)
    ' 6 = Miscellaneous Entriies (JVs)
    ' 7 = Ledger Fee
    GoSub Find_Transaction_Group
    
    ' Allocate Transaction Number
    If Transaction_number = 0 Then
        GoSub Allot_Trans_Number
        Transaction_number = Last_Number
    End If
    
    ' If Transaction of Alien Customer has come again thru import from Home Branch
    ' Simply update its Trans. Ins. date & time In Hotlist Trans & Exit sub.
    ' Update only if not already confirmed
    If Transacting_Branch = MyClass.Unit_Code And Customer_Home_Branch <> MyClass.Unit_Code Then
        Sqlstr = " Select confirm_flag from " & TempDb & "hotlist_txn " & _
                 " where txn_br_code = " & Transacting_Branch & _
                 " and txn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "'" & _
                 " and txn_no = " & Transaction_number
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
         ''''If Found update the Trans Ins Date & time & Confirm Flag
        If Recset.EOF = False Then
            ExistingConfirm_Flag = IIf(IsNull(Recset!Confirm_Flag), 0, Recset!Confirm_Flag)
            If ExistingConfirm_Flag < 1 Then
                Sqlstr = " update " & TempDb & "hotlist_txn " & _
                         " set txn_ins_date = '" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'" & _
                         " ,txn_ins_time = " & Format(HotTrans_Ins_DateTime, "HHMM") & "" & _
                         " , confirm_flag = " & HotConfirm_Flag & _
                         " where txn_br_code = " & Transacting_Branch & _
                         " and txn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "'" & _
                         " and txn_no = " & Transaction_number
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
            End If
            Exit Sub
        End If
    End If
    
    ' Remote Transaction of Alien Customer
    If Transacting_Branch <> MyClass.Unit_Code And Customer_Home_Branch <> MyClass.Unit_Code Then
        If With_Card_Flag >= 1 Or Valid_Card_Holder <= 0 Then Exit Sub
        '''' Check if the Transaction already exists in HotListed Transactions
        Sqlstr = " Select confirm_flag from " & TempDb & "hotlist_txn " & _
                 " where txn_br_code = " & Transacting_Branch & _
                 " and txn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "'" & _
                 " and txn_no = " & Transaction_number
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        
         ''''If Found update the Trans Ins Date & time & Confirm Flag : Trans has come again from Home Branch
        If Not Recset.EOF Then
            ExistingConfirm_Flag = IIf(IsNull(Recset!Confirm_Flag), 0, Recset!Confirm_Flag)
            ' Update only if not already confirmed
            If ExistingConfirm_Flag < 1 Then
                Sqlstr = " update " & TempDb & "hotlist_txn " & _
                         " set txn_ins_date = '" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'" & _
                         " ,txn_ins_time = " & Format(HotTrans_Ins_DateTime, "HHMM") & "" & _
                         " , confirm_flag = " & HotConfirm_Flag & _
                         " where txn_br_code = " & Transacting_Branch & _
                         " and txn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "'" & _
                         " and txn_no = " & Transaction_number
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
            End If
            Exit Sub
        End If
        ' If not found then Insert This transaction in HotListed Transactions and Exit Sub : Trans. has come for the 1st time
        If Recset.EOF Then
            Sqlstr = "insert into " & TempDb & "hotlist_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                     " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,txn_ins_date,txn_ins_time," & _
                     " confirm_flag) values (" & _
                     Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Transaction_number & "," & _
                     Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & _
                     Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Transaction_Amount & "," & _
                     Commission_Amt & "," & Cheque_Number & ",'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'," & _
                     Format(HotTrans_Ins_DateTime, "HHMM") & "," & HotConfirm_Flag & ")"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            Exit Sub
        End If
    End If
    
    Str_Trans_Time = Format(Transaction_Time, "0000")
    Date_Time_Now = Now()
    Loan_Transfer_Flag = 0
    If Loan_AcNo > 0 Then
        If Reversal_Entry_Flag <= 0 And Transaction_Amount > 0 Then Loan_Transfer_Flag = 1
        If Reversal_Entry_Flag > 0 And Transaction_Amount < 0 Then Loan_Transfer_Flag = 1
    End If
    
    Absolute_Amount = Transaction_Amount
    If Absolute_Amount < 0 Then Absolute_Amount = 0 - Absolute_Amount
    
    ' Insert in Transaction table; In nsav_txn for OWN Customers and in foreign_sav_txn for Alien Customers
    ' This will be irrespective of Transacting Branch
    Sqlstr = "insert into " & TempDb & ""
    If Customer_Home_Branch = MyClass.Unit_Code Then Sqlstr = Sqlstr + "nsav_txn"
    If Customer_Home_Branch <> MyClass.Unit_Code Then Sqlstr = Sqlstr + "foreign_sav_txn"
    Sqlstr = Sqlstr + " (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno,type_code,ac_srno,txn_time,txn_code," & _
             "txn_amt,txn_bnk_chg,txn_refno,txn_clear_date,teller_id,chq_no,bankbr_code,chq_date,post_ind," & _
             " reversal_flag," & " trans_ln_type_code, trans_ln_ac_srno, card_txn_flag, txn_delete_flag, main_txn_no"
    If Customer_Home_Branch = MyClass.Unit_Code Then Sqlstr = Sqlstr + ",cross_cust_idno,cross_type_code ,cross_ac_srno,txn_ins_date,txn_ins_time"
    If Customer_Home_Branch <> MyClass.Unit_Code Then Sqlstr = Sqlstr + ",card_no,ac_categ"
    Sqlstr = Sqlstr + ") values ("
    Sqlstr = Sqlstr & Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Transaction_number & "," & _
             Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & "," & Transaction_Time & ",'" & _
             Transaction_Code & "'," & Transaction_Amount & "," & Commission_Amt & ",'" & Narration & "','" & _
             Format(Clear_Date, "dd-mmm-yyyy") & "','" & Teller_Id & "'," & Cheque_Number & ",'" & Cheque_Bank & "','" & _
             Format(Cheque_Date, "dd-mmm-yyyy") & "',0," & Reversal_Status & "," & Loan_AcType & "," & Loan_AcNo & "," & _
             With_Card_Flag & ",0," & Main_Transaction_No
    If Customer_Home_Branch = MyClass.Unit_Code Then Sqlstr = Sqlstr & "," & Trfr_FromTo_Cust & "," & Trfr_AcType & "," & _
             Trfr_AcNo & ",'" & Format(Date_Time_Now, "dd-mmm-yyyy") & "'," & Format(Date_Time_Now, "HHMM") & ""
    If Customer_Home_Branch <> MyClass.Unit_Code Then Sqlstr = Sqlstr & "," & Card_Number & ",'" & Account_Categ & "'"
    Sqlstr = Sqlstr + ")"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    
    ' Delete Flag is to be updated instead of Reversal Flag for REVERSAL PROGRAM entries
    If Reversal_Entry_Flag = 2 Then
        Sqlstr = "update " & TempDb & ""
        If Customer_Home_Branch = MyClass.Unit_Code Then Sqlstr = Sqlstr + "nsav_txn"
        If Customer_Home_Branch <> MyClass.Unit_Code Then Sqlstr = Sqlstr + "foreign_sav_txn"
        Sqlstr = Sqlstr + " set reversal_flag = 0, txn_delete_flag = " & Reversal_Status & " where txn_br_code = " _
            & Transacting_Branch & " and txn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "' and txn_no = " & Transaction_number
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
    End If
    
    'If Transacting Branch is ATM then not to post in to export_atm_txn table
    If ATM_Post_Flag = 0 Then
        If MyClass.ATM_Implemented_Flag > 0 Then
             ATM_Ac_No = Make_ATM_AcNo(Customer_Home_Branch, Cust_Id, Account_Type, Account_No)
            'First Check whether this a/c has atm card
            Sqlstr = "select ffbs_acno from " & TempDb & "atm_register where ffbs_acno = '" & ATM_Ac_No & "' and post_flag >=1"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            If Recset.EOF = False Then
                
                If Transaction_Amount <> 0 Then
                    Sqlstr = "insert into " & TempDb & "export_atm_txn (txn_br_code,txn_date,txn_no,txn_time,txn_clear_date," & _
                            "ffbs_acno,txn_amt,txn_code,txn_desc,clear_bal,withdral_bal,status_flag,main_txn) values(" & MyClass.Unit_Code & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & _
                            " " & Transaction_number & "," & Transaction_Time & ",'" & Format(Clear_Date, "dd-mmm-yyyy") & "','" & ATM_Ac_No & "'," & _
                            " " & Transaction_Amount & ",'" & Transaction_Code & "','" & Left$(Narration, 15) & "',0,0,0,0)"
                    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                    If Sql_Error <> 0 Then GoTo IO_Error
                End If
                If Commission_Amt <> 0 Then
                    Sqlstr = "insert into " & TempDb & "export_atm_txn (txn_br_code,txn_date,txn_no,txn_time,txn_clear_date," & _
                            "ffbs_acno,txn_amt,txn_code,txn_desc,clear_bal,withdral_bal,status_flag,main_txn) values(" & MyClass.Unit_Code & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & _
                            " " & Transaction_number & "," & Transaction_Time & ",'" & Format(Clear_Date, "dd-mmm-yyyy") & "','" & ATM_Ac_No & "'," & _
                            " " & Commission_Amt & ",'COM','" & Left$(Narration, 15) & "',0,0,0,1)"
                    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                    If Sql_Error <> 0 Then GoTo IO_Error
                End If
                
'                MsgBox "Inserted into Export ATM Txn"
                
            End If
        End If
    End If
    
    ' If This Transaction Exists in Unposted Card Transactions then delete that if it is my OWN customer
    If Customer_Home_Branch = MyClass.Unit_Code And Transacting_Branch <> MyClass.Unit_Code Then
        ' IRRespective of whether the Transaction is WITH or w/o CARD
        ' We are inserting w/o card trans. thru balserver also
        Sqlstr = "select txn_amt from " & TempDb & "unposted_card_txn where txn_br_code = " & Transacting_Branch & " and " & _
                 "txn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "' and txn_no = " & Transaction_number
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        If Not Recset.EOF Then
            Sqlstr = "delete from " & TempDb & "unposted_card_txn where txn_br_code = " & Transacting_Branch & " and " & _
                 "txn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "' and txn_no = " & Transaction_number
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
    End If
    ' ==========================================================
    ' Following Processing for OUR OWN customer ONLY, till EndIf
    ' ==========================================================
    ' Now Update SBalRec if Home Branch Customer
    If Customer_Home_Branch = MyClass.Unit_Code Then
        Sqlstr = " select sbal_month_debit,sbal_month_credit from " & TempDb & "sbal_rec where sbal_hbr_code = " & _
                 Customer_Home_Branch & " and cust_idno = " & Cust_Id & " and sbal_acc_type = " & Account_Type & _
                 " and sbal_acc_no = " & Account_No & " and sbal_date = '" & Format(Clear_Date, "dd-mmm-yyyy") & "'"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        If Recset.EOF Then
            Sqlstr = "insert into " & TempDb & "sbal_rec (sbal_hbr_code,cust_idno,sbal_acc_type,sbal_acc_no,sbal_date," & _
                     "sbal_month_debit,sbal_month_credit) values (" & Customer_Home_Branch & "," & Cust_Id & "," & _
                     Account_Type & "," & Account_No & ",'" & Format(Clear_Date, "dd-mmm-yyyy") & "',0,0)"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
        
        If Transaction_Amount <> 0 Then
            If Transaction_Amount < 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Transaction_Amount
            If Transaction_Amount > 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Transaction_Amount
            If Reversal_Entry_Flag > 0 Then
                If Transaction_Amount < 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Transaction_Amount
                If Transaction_Amount > 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Transaction_Amount
            End If
            Sqlstr = Sqlstr + " where sbal_hbr_code = " & _
                     Customer_Home_Branch & " and cust_idno = " & Cust_Id & " and sbal_acc_type = " & Account_Type & _
                     " and sbal_acc_no = " & Account_No & " and sbal_date = '" & Format(Clear_Date, "dd-mmm-yyyy") & "'"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
        
        If Commission_Amt <> 0 Then
            If Commission_Amt < 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Commission_Amt
            If Commission_Amt > 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Commission_Amt
            If Reversal_Entry_Flag > 0 Then
                If Commission_Amt < 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Commission_Amt
                If Commission_Amt > 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Commission_Amt
            End If
            Sqlstr = Sqlstr + " where sbal_hbr_code = " & _
                     Customer_Home_Branch & " and cust_idno = " & Cust_Id & " and sbal_acc_type = " & Account_Type & _
                     " and sbal_acc_no = " & Account_No & " and sbal_date = '" & Format(Clear_Date, "dd-mmm-yyyy") & "'"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
    
        ' Update Account Master as well if he is my OWN customer; WITH or WITHOUT card
        ' Discount Amount & Free Withdrawal Amount will be updated in Transactions Program Only
        Sqlstr = "select clear_bal, last_wdrw_date,last_cr_date,last_cr_amt,last_dr_amt, last_cr_refno, bal_chksum, last_log_date from " & TempDb & "nsav_account " & _
                " where br_code = " & Customer_Home_Branch & _
                " and type_code = " & Account_Type & _
                " and ac_srno = " & Account_No & _
                " and cust_idno = " & Cust_Id
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        If Recset.EOF = True Then Call MyClass.Display_Message("Account Master Not Found; Customer= " & Cust_Id & " ; A/c Type= " & Account_Type & " Number= " & Account_No, 1)
        If Recset.EOF = False Then
            Db_Clear_Bal = IIf(IsNull(Recset!Clear_bal), 0, Recset!Clear_bal)
            If Clear_Date <= MyClass.Branch_Working_Date Then Db_Clear_Bal = Db_Clear_Bal + Transaction_Amount + Commission_Amt
            Last_Wd_Date = IIf(IsNull(Recset!Last_Wdrw_Date), #1/1/1920#, Recset!Last_Wdrw_Date)
            Last_WD_Amount = IIf(IsNull(Recset!Last_Dr_Amt), 0, Recset!Last_Dr_Amt)
            Last_Cr_Date = IIf(IsNull(Recset!Last_Cr_Date), #1/1/1920#, Recset!Last_Cr_Date)
            Last_CR_Amount = IIf(IsNull(Recset!Last_Cr_Amt), 0, Recset!Last_Cr_Amt)
            Last_Cr_Narration = IIf(IsNull(Recset!Last_Cr_RefNo), "", Recset!Last_Cr_RefNo)
            New_Log_Date = IIf(IsNull(Recset!Last_Log_Date), #1/1/1920#, Recset!Last_Log_Date)
            
            ' Revise the Security Field
'            Checksum_Encrypted = Left$(IIf(IsNull(Recset!bal_chksum), "", Recset!bal_chksum) + Space(16), 16)
'            Byte_Var = DeCrypt_Amount(Checksum_Encrypted, Checksum_Plain)
'            Checksum_Plain = Checksum_Plain + Transaction_Amount + Commission_Amt
'            Checksum_Encrypted = EnCrypt_Amount(Checksum_Plain)
            Checksum_Encrypted = " "
            
            ' Do NOT update Last Date & Amount for Ledger Fee Case (Group 7) and (Group 6 )
            If Transaction_Group <= 6 Then         '' 04/04/2003 as per Faisal from Kenya for SAL
                If Transaction_Amount > 0 Then
    '                If Transaction_Date >= last_cr_date Then
    '                    last_cr_date = Transaction_Date
    '                    Last_CR_Amount = Transaction_Amount
    '                    Last_Cr_Narration = Left$(Narration, 15)
    '                End If
                    '04/04/2003  '''' clear date instead of Txn Date
                    If Clear_Date <= MyClass.Branch_Working_Date And Clear_Date >= Last_Cr_Date Then
                        Last_Cr_Date = Clear_Date
                        Last_CR_Amount = Transaction_Amount
                        Last_Cr_Narration = Left$(Narration, 15)
                    End If
                End If
                If Transaction_Amount < 0 Then
                    If Transaction_Date >= Last_Wd_Date Then
                        Last_Wd_Date = Transaction_Date
                        Last_WD_Amount = 0 - Transaction_Amount
                    End If
                End If
                If New_Log_Date < MyClass.Branch_Working_Date Then New_Log_Date = MyClass.Branch_Working_Date
            End If
            
            Sqlstr = "update " & TempDb & "nsav_account set bal_chksum = '" & Checksum_Encrypted & "', clear_bal = " & Db_Clear_Bal & " , last_wdrw_date = '" & _
                     Format(Last_Wd_Date, "dd-mmm-yyyy") & "' , last_cr_date = '" & Format(Last_Cr_Date, "dd-mmm-yyyy") & _
                     "' , last_dr_amt = " & Last_WD_Amount & " , last_cr_amt = " & Last_CR_Amount & ",last_cr_refno='" & _
                     Last_Cr_Narration & "'" & ",last_log_date='" & Format(New_Log_Date, "dd-mmm-yyyy") & "'" & _
                     ",last_txn_for_stmt = last_txn_for_stmt + 1" & _
                     " where br_code = " & Customer_Home_Branch & _
                     " and type_code = " & Account_Type & _
                     " and ac_srno = " & Account_No & _
                     " and cust_idno = " & Cust_Id
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
    End If
    
    ' Not to be updated for Inter-Account Transfer case for MY branch transactions for CREDIT Entry
    ' Insert in Card Simulatneously
    If Transacting_Branch = MyClass.Unit_Code And With_Card_Flag >= 1 Then
        Tran_Data.Cheque_Number = Cheque_Number
        Tran_Data.Effective_Date = Clear_Date
        Tran_Data.History_Flag = 0
        Tran_Data.Loan_TransferFlag = Loan_Transfer_Flag
        Tran_Data.Tr_Amount1 = Transaction_Amount
        Tran_Data.Tr_Amount2 = Commission_Amt
        Tran_Data.Transacting_Branch = Transacting_Branch
        Tran_Data.Transaction_Code = Transaction_Code
        Tran_Data.Transaction_Date = Transaction_Date
        Tran_Data.Transaction_No = Transaction_number
        Tran_Data.Transaction_Time = Transaction_Time
        Call Insert_Tran_IN_Pool(Tran_Data)
    End If

    ' Update Teller Transaction Table here
    If Transacting_Branch = MyClass.Unit_Code And Transaction_Group <= 3 And Transaction_Amount <> 0 Then
        Sqlstr = "select ttxn_row_id from " & TempDb & "teller_txn where ttxn_br_code = " & MyClass.Unit_Code & _
                 " and ttxn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "' and ttxn_teller_id = '" & _
                 Teller_Id & "' and ttxn_type = 4 and ttxn_drcr_cd = "
        If Transaction_Amount > 0 Then Sqlstr = Sqlstr & "1"
        If Transaction_Amount < 0 Then Sqlstr = Sqlstr & "2"
        Sqlstr = Sqlstr & " and ttxn_cash_flg = "
        If Transaction_Group <= 2 Then Sqlstr = Sqlstr & "0"
        If Transaction_Group >= 3 Then Sqlstr = Sqlstr & "1"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        If Recset.EOF = False Then Teller_Trans_Number = IIf(IsNull(Recset!ttxn_row_id), 0, Recset!ttxn_row_id)
        If Recset.EOF = True Then
            Sqlstr = "select max(ttxn_row_id) from " & TempDb & "teller_txn where ttxn_br_code = " & Transacting_Branch
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            Teller_Trans_Number = 0
            If Not Recset.EOF Then Teller_Trans_Number = IIf(IsNull(Recset.Fields(0)), 0, Recset.Fields(0))
            Teller_Trans_Number = Teller_Trans_Number + 1
            Sqlstr = "insert into " & TempDb & "teller_txn (ttxn_row_id,ttxn_br_code,ttxn_date,ttxn_teller_id," & _
                     "ttxn_type,ttxn_drcr_cd,ttxn_cash_flg,ttxn_amount,ttxn_oth_teller,ttxn_time,ttxn_gl_sect," & _
                     "ttxn_gl_type,ttxn_gl_dept,ttxn_operator,ttxn_op_date,ttxn_op_time) values (" & _
                     Teller_Trans_Number & "," & MyClass.Unit_Code & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "','" & _
                     Teller_Id & "',4,"
            If Transaction_Amount > 0 Then Sqlstr = Sqlstr & "1"
            If Transaction_Amount < 0 Then Sqlstr = Sqlstr & "2"
            Sqlstr = Sqlstr & ","
            If Transaction_Group <= 2 Then Sqlstr = Sqlstr & "0"
            If Transaction_Group >= 3 Then Sqlstr = Sqlstr & "1"
            Sqlstr = Sqlstr & "," & Absolute_Amount & ",' ',0,0,0,0,'" & Teller_Id & "','" & _
            Format(Date_Time_Now, "dd-mmm-yyyy") & "'," & Format(Date_Time_Now, "HHMM") & ")"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        Else
            Sqlstr = "update " & TempDb & "teller_txn set ttxn_amount = ttxn_amount + " & Absolute_Amount & _
                     " Where ttxn_row_id = " & Recset!ttxn_row_id & " and ttxn_br_code = " & Transacting_Branch
            
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
    End If
    
    ' Update Tours Table here for Home Branch Customers transacting in Remote Branches
    If Customer_Home_Branch = MyClass.Unit_Code And Transacting_Branch <> MyClass.Unit_Code And Transaction_Amount <> 0 Then
        If Transaction_Group <= 4 Or (Transaction_Group = 5 And Transaction_Amount < 0) Then
            Sqlstr = "select lst_visit_date from " & TempDb & "tours where hbr_code = " & Customer_Home_Branch & _
                     " and cust_idno = " & Cust_Id & " and visited_br_code = " & Transacting_Branch
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            If Recset.EOF = True Then
                Sqlstr = "insert into " & TempDb & "tours (hbr_code,cust_idno,visited_br_code,lst_visit_date) " & _
                         "values (" & Customer_Home_Branch & "," & Cust_Id & "," & Transacting_Branch & ",'" & _
                         Format(Transaction_Date, "dd-mmm-yyyy") & "')"
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
            End If
            Sqlstr = "update " & TempDb & "tours set lst_visit_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & _
                     "' where hbr_code = " & Customer_Home_Branch & " and cust_idno = " & Cust_Id & _
                     " and visited_br_code = " & Transacting_Branch
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
    End If
    
    ' Insert Record in Hotlisted Transactions Table
    If Transacting_Branch = MyClass.Unit_Code And Customer_Home_Branch <> MyClass.Unit_Code And _
            (With_Card_Flag = 0 And Valid_Card_Holder >= 1) Then
        ' Insert This transaction in HotListed Transactions with confirm_flag as 0 and Exit Sub
        Sqlstr = "insert into " & TempDb & "hotlist_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                 " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,confirm_flag) values (" & _
                 Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Transaction_number & "," & _
                 Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & _
                 Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Transaction_Amount & "," & _
                 Commission_Amt & "," & Cheque_Number & ",0)"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
    End If
    
    ' Insert Records in Export File for Hotlisting Transactions; All Without Card Transactions for Valid Card Holders
    ' Also Insert for ALIEN Customers Transacting in MY branch WITH Card for Intimation to his HOME branch
    ' Also Insert for My Customer Transacting in Remote branch WITHOUT Card for B.Casting to Other Branches
    ' However do not do it for Ledger Fee Transactions
    If (Valid_Card_Holder >= 1 And With_Card_Flag <= 0) Or _
       (Transacting_Branch = MyClass.Unit_Code And Customer_Home_Branch <> MyClass.Unit_Code And With_Card_Flag >= 1) Or _
       (Transacting_Branch <> MyClass.Unit_Code And Customer_Home_Branch = MyClass.Unit_Code And With_Card_Flag <= 0) Then
        '''' Update Trans. Insertion date & time & confirmation flag for home customer only
        HotConfirm_Flag = 0
        HotTrans_Ins_DateTime = Format("1/1/1920 00:00:00", "dd-mmm-yyyy HH:MM:SS")
        If Customer_Home_Branch = MyClass.Unit_Code Then
            HotConfirm_Flag = 1
            HotTrans_Ins_DateTime = Date_Time_Now
        End If
        If Transaction_Group <= 6 And Transaction_Code <> TC_Ledger_Fee Then        ''' Don't Export LDF
            ' Write in DAILY Export File
            Sqlstr = "insert into " & TempDb & "export_txn_dl (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                    " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type,loan_ac_no, " & _
                    " txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                    Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Transaction_number & _
                    "," & Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & _
                    Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Transaction_Amount & "," & _
                    Commission_Amt & "," & Cheque_Number & "," & Loan_AcType & "," & Loan_AcNo & _
                    ",'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'," & Format(HotTrans_Ins_DateTime, "HHMM") & "" & _
                    "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            
            Sqlstr = "select txn_no from " & TempDb & "export_txn_hr where txn_br_code = " & Transacting_Branch & " and " & _
                    " txn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "' and txn_no = " & Transaction_number
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            If Recset.EOF = True Then
                ' Write in Hourly Export File
                Sqlstr = "insert into " & TempDb & "export_txn_hr (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                        " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type,loan_ac_no, " & _
                        " txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                        Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Transaction_number & _
                        "," & Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & _
                        Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Transaction_Amount & "," & _
                        Commission_Amt & "," & Cheque_Number & "," & Loan_AcType & "," & Loan_AcNo & _
                        ",'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'," & Format(HotTrans_Ins_DateTime, "HHMM") & "" & _
                        "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
            End If
        End If
    End If
    
   '========================================================================================
   ' Processing for Generation of Additional Entries for Loan Deposit & Inter-Account Cases
   '========================================================================================
    ' Append Record in Loan_Pay for Voluntary Loan Payments (Deposit Transactions Only)
    If Loan_Transfer_Flag >= 1 And Customer_Home_Branch = MyClass.Unit_Code And Transaction_Code <> TC_Saving_CR_From_Loan_Disb Then
        ' Case of Reversal Entry i.e. Cancellation of earlier Deposit Entry; Main Transaction Number will contain the
        ' Transaction Number of Original Entry being Cancelled/Reversed
        If Transaction_Amount < 0 Then
            ' Find The Corresponding ALR
            Sqlstr = "select txn_amt from " & TempDb & "nsav_txn where txn_hbr_cd = " & Customer_Home_Branch & " and cust_idno = " & Cust_Id & " and type_code = " & Account_Type & " and ac_srno = " & Account_No & " and txn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "' and txn_code = '" & TC_Transfer_To_Loan & "' and main_txn_no = " & Main_Transaction_No
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            If Recset.EOF = True Then
                MsgBox "Corresponding Loan Transfer Entry Not Found in Savings"
                Exit Sub
            End If
            Dim Reverse_Amt As Currency
            Reverse_Amt = Recset!Txn_Amt
            If Abs(Reverse_Amt) > Abs(Transaction_Amount) Then
                MsgBox "Corresponding Loan Transfer Entry is of Higher Amount in Loans"
                Exit Sub
            End If
            Call Reverse_Loan_Payment(Customer_Home_Branch, Loan_AcType, Loan_AcNo, TL_Transfer_From_Savings, Transaction_Date, Reverse_Amt, "", Loan_Txn_No, Amt_Posted_In_Loan)
        End If
        ' Volutary Deposit in Loan Account
        If Transaction_Amount > 0 Then
            ' Generate Withdrawal Transaction in Savings for Amount PUSHED to Loan and ACCEPTED by Loan routine.
            Loan_Txn_No = 0
            Call Post_Loan_Payment(Customer_Home_Branch, Loan_AcType, Loan_AcNo, TL_Transfer_From_Savings, Clear_Date, Transaction_Amount, 1, "", Amt_Posted_In_Loan, Loan_Txn_No)
            If Transacting_Branch <> MyClass.Unit_Code Then
                If Amt_Posted_In_Loan < Transaction_Amount Then
                    If Amt_Posted_In_Loan > 0 Then Call Reverse_Auto_Loan_Recovery(Customer_Home_Branch, Cust_Id, Account_Type, Account_No, Transaction_Amount - Amt_Posted_In_Loan)
                    Exit Sub
                End If
            End If
            If Amt_Posted_In_Loan = 0 Then GoTo Voluntary_Loan_Posted
            '=========================================================================================================
            ' Generate Additional record for Withdrawal Entry in case of Deposit Transaction with Loan Transfer Flag;
            '=========================================================================================================
            ' However do it only for Transactions performed in MY branch since in other cases we will get TWO records
            ' already from IMPORTED file as we had generated TWO records in foreign_sav_txn at the time of origin of
            ' Transaction in REMOTE branch
            GoSub Allot_Trans_Number
            Extra_Trans_Number = Last_Number
            Temp_Amt = 0 - Amt_Posted_In_Loan
            '=====Trfr_To_Loan_Commission is a constant having value of 50. From now onwards this value in this
            '=====variable has to be fetched from bank commission charges table. modified by faisal on 03-03-04
            '=====I am passing category as blank, beacuse i am not getting the category in the auto loan recovery
            '=====function, where i am calling this function also for the Trfr_To_Loan_Commission.
            Call Calculate_BankCharge(TC_Transfer_To_Loan, Account_Type, "", 0, 0, Trfr_To_Loan_Commission)
            '============================End of modification for Trfr_To_Loan_Commission=========================
            'Temp_Tfr_Commission = Trfr_To_Loan_Commission
            Temp_Tfr_Commission = 0 - Trfr_To_Loan_Commission
            
            'If Reversal_Entry_Flag >= 1 Then Temp_Tfr_Commission = 0 - Trfr_To_Loan_Commission
            If Reversal_Entry_Flag >= 1 Then Temp_Tfr_Commission = Trfr_To_Loan_Commission
            ' Insert in Transaction table; In nsav_txn for OWN Customers and in foreign_sav_txn for Alien Customers
            ' This will be irrespective of Transacting Branch
            Sqlstr = "insert into " & TempDb & ""
            If Customer_Home_Branch = MyClass.Unit_Code Then Sqlstr = Sqlstr + "nsav_txn"
            If Customer_Home_Branch <> MyClass.Unit_Code Then Sqlstr = Sqlstr + "foreign_sav_txn"
            Sqlstr = Sqlstr + " (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno,type_code,ac_srno,txn_time,txn_code," & _
                     "txn_amt,txn_bnk_chg,txn_refno,txn_clear_date,teller_id,chq_no,bankbr_code,chq_date,post_ind," & _
                     " reversal_flag, trans_ln_type_code, trans_ln_ac_srno, card_txn_flag, txn_delete_flag, main_txn_no"
            If Customer_Home_Branch = MyClass.Unit_Code Then Sqlstr = Sqlstr + ",cross_cust_idno,cross_type_code ,cross_ac_srno,txn_ins_date,txn_ins_time"
            If Customer_Home_Branch <> MyClass.Unit_Code Then Sqlstr = Sqlstr + ",card_no,ac_categ"
            Sqlstr = Sqlstr + ") values ("
            Sqlstr = Sqlstr & Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & "," & _
                     Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & "," & Transaction_Time & ",'" & _
                     TC_Transfer_To_Loan & "'," & Temp_Amt & "," & Temp_Tfr_Commission & ",'" & "Transfer to Loan Account" & "','" & _
                     Format(Clear_Date, "dd-mmm-yyyy") & "','" & Teller_Id & "'," & "0" & ",'" & " " & "','" & _
                     Format(#1/1/1920#, "dd-mmm-yyyy") & "',0,0," & Loan_AcType & "," & Loan_AcNo & "," & _
                     With_Card_Flag & ","
            If Reversal_Entry_Flag <= 0 Then Sqlstr = Sqlstr & "0," & Transaction_number
            If Reversal_Entry_Flag >= 1 Then Sqlstr = Sqlstr & Reversal_Status & "," & Main_Transaction_No
            If Customer_Home_Branch = MyClass.Unit_Code Then Sqlstr = Sqlstr & "," & "0" & "," & "0" & "," & _
                     "0" & ",'" & Format(Date_Time_Now, "dd-mmm-yyyy") & "'," & Format(Date_Time_Now, "HHMM") & ""
            If Customer_Home_Branch <> MyClass.Unit_Code Then Sqlstr = Sqlstr & "," & Card_Number & ",'" & Account_Categ & "'"
            Sqlstr = Sqlstr + ")"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            
            'post into export_atm_txn table
            If ATM_Post_Flag = 0 Then
                If MyClass.ATM_Implemented_Flag > 0 Then
                    ATM_Ac_No = Make_ATM_AcNo(Customer_Home_Branch, Cust_Id, Account_Type, Account_No)
                    Sqlstr = "select ffbs_acno from " & TempDb & "atm_register where ffbs_acno = '" & ATM_Ac_No & "' and post_flag >=1"
                    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                    If Sql_Error <> 0 Then GoTo IO_Error
                    If Recset.EOF = False Then
                        Sqlstr = "insert into " & TempDb & "export_atm_txn(txn_br_code,txn_date,txn_no,txn_time,txn_clear_date," & _
                                "ffbs_acno,txn_amt,txn_code,txn_desc,clear_bal,withdral_bal,status_flag,main_txn) values(" & MyClass.Unit_Code & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & _
                                " " & Transaction_number & "," & Transaction_Time & ",'" & Format(Clear_Date, "dd-mmm-yyyy") & "','" & ATM_Ac_No & "'," & _
                                " " & Temp_Amt & ",'" & TC_Transfer_To_Loan & "','" & Left$(Narration, 15) & "',0,0,0,0)"
                        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                        If Sql_Error <> 0 Then GoTo IO_Error
                            If Temp_Tfr_Commission <> 0 Then
                            Sqlstr = "insert into " & TempDb & "export_atm_txn(txn_br_code,txn_date,txn_no,txn_time,txn_clear_date," & _
                                    "ffbs_acno,txn_amt,txn_code,txn_desc,clear_bal,withdral_bal,status_flag,main_txn) values(" & MyClass.Unit_Code & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & _
                                    " " & Transaction_number & "," & Transaction_Time & ",'" & Format(Clear_Date, "dd-mmm-yyyy") & "','" & ATM_Ac_No & "'," & _
                                    " " & Temp_Tfr_Commission & ",'" & TC_Transfer_To_Loan & "','" & Left$(Narration, 15) & "',0,0,0,1)"
                            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                            If Sql_Error <> 0 Then GoTo IO_Error
                        End If
                    End If
                End If
            End If
            
            ' Now Update SBalRec if Home Branch Customer
            If Customer_Home_Branch = MyClass.Unit_Code Then
                Sqlstr = " select sbal_month_debit,sbal_month_credit from " & TempDb & "sbal_rec where sbal_hbr_code = " & _
                         Customer_Home_Branch & " and cust_idno = " & Cust_Id & " and sbal_acc_type = " & Account_Type & _
                         " and sbal_acc_no = " & Account_No & " and sbal_date = '" & Format(Clear_Date, "dd-mmm-yyyy") & "'"
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
                If Recset.EOF Then
                    Sqlstr = "insert into " & TempDb & "sbal_rec (sbal_hbr_code,cust_idno,sbal_acc_type,sbal_acc_no,sbal_date," & _
                             "sbal_month_debit,sbal_month_credit) values (" & Customer_Home_Branch & "," & Cust_Id & "," & _
                             Account_Type & "," & Account_No & ",'" & Format(Clear_Date, "dd-mmm-yyyy") & "',0,0)"
                    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                    If Sql_Error <> 0 Then GoTo IO_Error
                End If
                If Temp_Amt <> 0 Then
                    If Temp_Amt < 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Temp_Amt
                    If Temp_Amt > 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Temp_Amt
                    If Reversal_Entry_Flag >= 1 Then
                        If Temp_Amt < 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Temp_Amt
                        If Temp_Amt > 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Temp_Amt
                    End If
                    Sqlstr = Sqlstr + " where sbal_hbr_code = " & _
                             Customer_Home_Branch & " and cust_idno = " & Cust_Id & " and sbal_acc_type = " & Account_Type & _
                             " and sbal_acc_no = " & Account_No & " and sbal_date = '" & Format(Clear_Date, "dd-mmm-yyyy") & "'"
                    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                    If Sql_Error <> 0 Then GoTo IO_Error
                End If
                If Temp_Tfr_Commission <> 0 Then
                    If Temp_Tfr_Commission < 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Temp_Tfr_Commission
                    If Temp_Tfr_Commission > 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Temp_Tfr_Commission
                    If Reversal_Entry_Flag >= 1 Then
                        If Temp_Tfr_Commission < 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Temp_Tfr_Commission
                        If Temp_Tfr_Commission > 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Temp_Tfr_Commission
                    End If
                    Sqlstr = Sqlstr + " where sbal_hbr_code = " & _
                             Customer_Home_Branch & " and cust_idno = " & Cust_Id & " and sbal_acc_type = " & Account_Type & _
                             " and sbal_acc_no = " & Account_No & " and sbal_date = '" & Format(Clear_Date, "dd-mmm-yyyy") & "'"
                    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                    If Sql_Error <> 0 Then GoTo IO_Error
                End If
            End If
            ' Update Account Master as well if he is my OWN customer; WITH or WITHOUT card
            If Customer_Home_Branch = MyClass.Unit_Code Then
                Sqlstr = "select clear_bal, last_wdrw_date,last_dr_amt,bal_chksum from " & TempDb & "nsav_account " & _
                        " where br_code = " & Customer_Home_Branch & _
                        " and type_code = " & Account_Type & _
                        " and ac_srno = " & Account_No & _
                        " and cust_idno = " & Cust_Id
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
                If Recset.EOF Then Call MyClass.Display_Message("Account Master Not Found; Customer= " & Cust_Id & " ; A/c Type= " & Account_Type & " Number= " & Account_No, 1)
                If Recset.EOF = False Then
                    Db_Clear_Bal = IIf(IsNull(Recset!Clear_bal), 0, Recset!Clear_bal)
                    If Clear_Date <= MyClass.Branch_Working_Date Then Db_Clear_Bal = Db_Clear_Bal + Temp_Amt + Temp_Tfr_Commission
                    Last_Wd_Date = IIf(IsNull(Recset!Last_Wdrw_Date), #1/1/1920#, Recset!Last_Wdrw_Date)
                    Last_WD_Amount = IIf(IsNull(Recset!Last_Dr_Amt), 0, Recset!Last_Dr_Amt)
                    If Transaction_Date >= Last_Wd_Date Then
                        Last_Wd_Date = Transaction_Date
                        Last_WD_Amount = 0 - Temp_Amt
                    End If
        
                    ' Revise the Security Field
'                    Checksum_Encrypted = Left$(IIf(IsNull(Recset!bal_chksum), "", Recset!bal_chksum) + Space(16), 16)
'                    Byte_Var = DeCrypt_Amount(Checksum_Encrypted, Checksum_Plain)
'                    Checksum_Plain = Checksum_Plain + Temp_Amt + Temp_Tfr_Commission
'                    Checksum_Encrypted = EnCrypt_Amount(Checksum_Plain)
                    Checksum_Encrypted = " "
                    
                    Sqlstr = "update " & TempDb & "nsav_account set clear_bal = " & Db_Clear_Bal & " , last_wdrw_date = '" & _
                             Format(Last_Wd_Date, "dd-mmm-yyyy") & "' , " & _
                             " last_dr_amt = " & Last_WD_Amount & ", " & _
                             " bal_chksum = '" & Checksum_Encrypted & "' " & _
                             ", last_txn_for_stmt = last_txn_for_stmt + 1" & _
                             " where br_code = " & Customer_Home_Branch & _
                             " and type_code = " & Account_Type & _
                             " and ac_srno = " & Account_No & _
                             " and cust_idno = " & Cust_Id
                    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                    If Sql_Error <> 0 Then GoTo IO_Error
        
                End If
            End If
           
            ' Insert in Card Simulatneously
            If With_Card_Flag >= 1 Then
                Tran_Data.Cheque_Number = 0
                Tran_Data.Effective_Date = Clear_Date
                Tran_Data.History_Flag = 0
                Tran_Data.Loan_TransferFlag = 0
                Tran_Data.Tr_Amount1 = Temp_Amt
                Tran_Data.Tr_Amount2 = Temp_Tfr_Commission
                Tran_Data.Transacting_Branch = Transacting_Branch
                Tran_Data.Transaction_Code = TC_Transfer_To_Loan
                Tran_Data.Transaction_Date = Transaction_Date
                Tran_Data.Transaction_No = Extra_Trans_Number
                Tran_Data.Transaction_Time = Transaction_Time
                Call Insert_Tran_IN_Pool(Tran_Data)
            End If
            
            ' Insert Record in Hotlisted Transactions Table
            If Transacting_Branch = MyClass.Unit_Code And Customer_Home_Branch <> MyClass.Unit_Code And _
                    (With_Card_Flag = 0 And Valid_Card_Holder >= 1) Then
                ' Insert This transaction in HotListed Transactions with confirm_flag as 0 and Exit Sub
                Sqlstr = "insert into " & TempDb & "hotlist_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                         " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,confirm_flag) values (" & _
                         Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & "," & _
                         Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & _
                         TC_Transfer_To_Loan & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & "," & _
                         Temp_Tfr_Commission & "," & Cheque_Number & ",0)"
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
            End If
            
            HotConfirm_Flag = 0
            HotTrans_Ins_DateTime = #1/1/1920#
            If Customer_Home_Branch = MyClass.Unit_Code And Valid_Card_Holder >= 1 And With_Card_Flag <= 0 Then
                HotConfirm_Flag = 1
                HotTrans_Ins_DateTime = Date_Time_Now
            End If
            ''' Insert Transaction in Export Tables
            If (Customer_Home_Branch <> MyClass.Unit_Code) Or (Customer_Home_Branch = MyClass.Unit_Code And Valid_Card_Holder >= 1 And With_Card_Flag <= 0) Then      '''' Trans. Insertion date & time & confirmation flag is initialised
                Sqlstr = "insert into " & TempDb & "export_txn_dl(txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                        " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type,loan_ac_no, " & _
                        " txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                        " " & Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & ", " & _
                        " " & Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ", " & _
                        " '" & TC_Transfer_To_Loan & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & ", " & _
                        " " & Temp_Tfr_Commission & "," & "0" & "," & Loan_AcType & "," & Loan_AcNo & ", " & _
                        " '" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'," & Format(HotTrans_Ins_DateTime, "HHMM") & "" & _
                        "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
                
                Sqlstr = "select txn_no from " & TempDb & "export_txn_hr where txn_br_code = " & Transacting_Branch & " and " & _
                        " txn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "' and txn_no = " & Extra_Trans_Number
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
                If Recset.EOF = True Then
                    ' Write in Hourly Export File
                    Sqlstr = "insert into " & TempDb & "export_txn_hr (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                            " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type,loan_ac_no, " & _
                            " txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                            Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & _
                            "," & Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & _
                            TC_Transfer_To_Loan & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & "," & _
                            Temp_Tfr_Commission & "," & "0" & "," & Loan_AcType & "," & Loan_AcNo & _
                            ",'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'," & Format(HotTrans_Ins_DateTime, "HHMM") & "" & _
                            "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
                    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                    If Sql_Error <> 0 Then GoTo IO_Error
                End If
            End If
        End If
Voluntary_Loan_Posted:
    End If
       
   If Transacting_Branch <> MyClass.Unit_Code Then Exit Sub
   
   
    '===========================================================
    'Generate Additional CREDIT Entry for Inter-Account Transfer
    '===========================================================
    If Transaction_Group = 5 And Transaction_Amount <> 0 Then
        GoSub Allot_Trans_Number
        Extra_Trans_Number = Last_Number
        Temp_Amt = 0 - Transaction_Amount
        Temp_Trans_Code = Transfer_Credit_TrCode
        Narration = "Fr. A/c. " + CStr(Cust_Id) + "/" + CStr(Account_Type) + "/" + CStr(Account_No)
        
        'Insert in Transaction table;
        'In nsav_txn for OWN Customers and in foreign_sav_txn for Alien Customers
        Sqlstr = "insert into " & TempDb & ""
        If Customer_Home_Branch = MyClass.Unit_Code Then Sqlstr = Sqlstr + "nsav_txn"
        If Customer_Home_Branch <> MyClass.Unit_Code Then Sqlstr = Sqlstr + "foreign_sav_txn"
        Sqlstr = Sqlstr + " (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno,type_code,ac_srno,txn_time,txn_code," & _
                 "txn_amt,txn_bnk_chg,txn_refno,txn_clear_date,teller_id,chq_no,bankbr_code,chq_date,post_ind," & _
                 " reversal_flag," & " trans_ln_type_code, trans_ln_ac_srno, card_txn_flag, txn_delete_flag, main_txn_no"
        If Customer_Home_Branch = MyClass.Unit_Code Then Sqlstr = Sqlstr + ",cross_cust_idno,cross_type_code ,cross_ac_srno,txn_ins_date,txn_ins_time"
        If Customer_Home_Branch <> MyClass.Unit_Code Then Sqlstr = Sqlstr + ",card_no,ac_categ"
        Sqlstr = Sqlstr + ") values ("
        Sqlstr = Sqlstr & Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & "," & _
                 Customer_Home_Branch & "," & Trfr_FromTo_Cust & "," & Trfr_AcType & "," & Trfr_AcNo & "," & Transaction_Time & ",'" & _
                 Temp_Trans_Code & "'," & Temp_Amt & ",0,'" & Narration & "','" & _
                 Format(Clear_Date, "dd-mmm-yyyy") & "','" & Teller_Id & "',0,' ','" & _
                 "01-JAN-1920" & "',0,0,0,0,0,"
        If Reversal_Entry_Flag <= 0 Then Sqlstr = Sqlstr & "0," & Transaction_number
        If Reversal_Entry_Flag >= 1 Then Sqlstr = Sqlstr & Reversal_Status & "," & Main_Transaction_No
        If Customer_Home_Branch = MyClass.Unit_Code Then Sqlstr = Sqlstr & "," & Cust_Id & "," & Account_Type & "," & _
                 Account_No & ",'" & Format(Date_Time_Now, "dd-mmm-yyyy") & "'," & Format(Date_Time_Now, "HHMM") & ""
        If Customer_Home_Branch <> MyClass.Unit_Code Then Sqlstr = Sqlstr & "," & "0" & ",'" & "N" & "'"
        Sqlstr = Sqlstr + ")"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        
        'post in export_atm_txn
             
'        **/** Commented By koshy on 12-03-2007 after discussing with Murthy
'        If Transacting_Branch = 0 Then
            If MyClass.ATM_Implemented_Flag > 0 Then
                ATM_Ac_No = Make_ATM_AcNo(Customer_Home_Branch, Trfr_FromTo_Cust, Trfr_AcType, Trfr_AcNo)
                
'                **/** Added by koshy on 12-03-2007
                Sqlstr = "select ffbs_acno from " & TempDb & "atm_register where ffbs_acno = '" & ATM_Ac_No & "' and post_flag >=1"
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
                If Recset.EOF = False Then
                
                    Sqlstr = "insert into " & TempDb & "export_atm_txn(txn_br_code,txn_date,txn_no,txn_time,txn_clear_date," & _
                            "ffbs_acno,txn_amt,txn_code,txn_desc,clear_bal,withdral_bal,status_flag,main_txn) values(" & Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & _
                            " " & Extra_Trans_Number & "," & Transaction_Time & ",'" & Format(Clear_Date, "dd-mmm-yyyy") & "','" & ATM_Ac_No & "'," & _
                            " " & Temp_Amt & ",'" & Temp_Trans_Code & "','" & Left$(Narration, 15) & "',0,0,0,0)"
                    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                   If Sql_Error <> 0 Then GoTo IO_Error
                   
                End If
            End If
'        End If
        

        ' Now Update SBalRec if Home Branch Customer
        If Customer_Home_Branch = MyClass.Unit_Code Then
            Sqlstr = " select sbal_month_debit,sbal_month_credit " & _
                     " from " & TempDb & "sbal_rec " & _
                     " where sbal_hbr_code = " & Customer_Home_Branch & " and " & _
                           " cust_idno = " & Trfr_FromTo_Cust & " and " & _
                           " sbal_acc_type = " & Trfr_AcType & " and " & _
                           " sbal_acc_no = " & Trfr_AcNo & " and " & _
                           " sbal_date = '" & Format(Clear_Date, "dd-mmm-yyyy") & "'"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            If Recset.EOF Then
                Sqlstr = "insert into " & TempDb & "sbal_rec(sbal_hbr_code,cust_idno, " & _
                         "sbal_acc_type,sbal_acc_no,sbal_date,sbal_month_debit," & _
                         "sbal_month_credit) values (" & _
                         " " & Customer_Home_Branch & "," & Trfr_FromTo_Cust & ", " & _
                         " " & Trfr_AcType & "," & Trfr_AcNo & ",'" & Format(Clear_Date, "dd-mmm-yyyy") & "',0,0)"
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
            End If
            If Temp_Amt <> 0 Then
                If Temp_Amt < 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Temp_Amt
                If Temp_Amt > 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Temp_Amt
                If Reversal_Entry_Flag >= 1 Then
                    If Temp_Amt < 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Temp_Amt
                    If Temp_Amt > 0 Then Sqlstr = "update " & TempDb & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Temp_Amt
                End If
                Sqlstr = Sqlstr + " where sbal_hbr_code = " & Customer_Home_Branch & " and cust_idno = " & Trfr_FromTo_Cust & " and sbal_acc_type = " & Trfr_AcType & _
                         " and sbal_acc_no = " & Trfr_AcNo & " and sbal_date = '" & Format(Clear_Date, "dd-mmm-yyyy") & "'"
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
            End If
        End If
        
        ' Update Account Master as well if he is my OWN customer; WITH or WITHOUT card
        ' Discount Amount & Free Withdrawal Amount will be updated in Transactions Program Only
        If Customer_Home_Branch = MyClass.Unit_Code Then
            Sqlstr = "select clear_bal,last_wdrw_date,last_cr_date,last_cr_amt," & _
                     "last_dr_amt,last_cr_refno,bal_chksum from " & TempDb & "nsav_account " & _
                     " where br_code = " & Customer_Home_Branch & _
                     " and type_code = " & Trfr_AcType & _
                     " and ac_srno = " & Trfr_AcNo & _
                     " and cust_idno = " & Trfr_FromTo_Cust
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            If Recset.EOF = True Then Call MyClass.Display_Message("Account Master Not Found; Customer= " & Trfr_FromTo_Cust & " ; A/c Type= " & Trfr_AcType & " Number= " & Trfr_AcNo, 1)
            If Recset.EOF = False Then
                Db_Clear_Bal = IIf(IsNull(Recset!Clear_bal), 0, Recset!Clear_bal)
                '04/04/2003 If Transaction_Date <= myclass.branch_working_date Then DB_Clear_Bal = DB_Clear_Bal + Temp_Amt
                If Clear_Date <= MyClass.Branch_Working_Date Then Db_Clear_Bal = Db_Clear_Bal + Temp_Amt
                Last_Cr_Date = IIf(IsNull(Recset!Last_Cr_Date), #1/1/1920#, Recset!Last_Cr_Date)
                Last_CR_Amount = IIf(IsNull(Recset!Last_Cr_Amt), 0, Recset!Last_Cr_Amt)
                Last_Cr_Narration = IIf(IsNull(Recset!Last_Cr_RefNo), "", Recset!Last_Cr_RefNo)
                ' Do NOT update Last Date & Amount for Ledger Fee Case (Group 7)
                ' 04/04/2003 If Clear_Date = Transaction_Date And Transaction_Date >= Last_CR_Date Then
                If Clear_Date <= MyClass.Branch_Working_Date And Clear_Date >= Last_Cr_Date Then
                    Last_Cr_Date = Transaction_Date
                    Last_CR_Amount = Temp_Amt
                    Last_Cr_Narration = Left$(Narration, 15)
                End If
                 ' Revise the Security Field
'                Checksum_Encrypted = Left$(IIf(IsNull(Recset!bal_chksum), "", Recset!bal_chksum) + Space(16), 16)
'                Byte_Var = DeCrypt_Amount(Checksum_Encrypted, Checksum_Plain)
'                Checksum_Plain = Checksum_Plain + Temp_Amt
'                Checksum_Encrypted = EnCrypt_Amount(Checksum_Plain)
                Checksum_Encrypted = " "
                Sqlstr = "update " & TempDb & "nsav_account set clear_bal = " & Db_Clear_Bal & ", " & _
                                 "last_cr_date = '" & Format(Last_Cr_Date, "dd-mmm-yyyy") & "' , " & _
                                 "last_cr_amt = " & Last_CR_Amount & "," & _
                                 "last_cr_refno='" & Last_Cr_Narration & "', " & _
                                 "last_log_date='" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "', " & _
                                 "bal_chksum = '" & Checksum_Encrypted & "'" & _
                                 ", last_txn_for_stmt = last_txn_for_stmt + 1" & _
                                " where br_code = " & Customer_Home_Branch & _
                                " and type_code = " & Trfr_AcType & _
                                " and ac_srno = " & Trfr_AcNo & _
                                " and cust_idno = " & Trfr_FromTo_Cust
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
            End If
        End If
        
        ' Insert Record in Hotlisted Transactions Table for Alien Transferee
        If Customer_Home_Branch <> MyClass.Unit_Code Then
            ' Insert This transaction in HotListed Transactions with confirm flag as 0 and Exit Sub
            Sqlstr = "insert into " & TempDb & "hotlist_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                     " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no," & _
                     " confirm_flag) values (" & _
                     Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & "," & _
                     Customer_Home_Branch & "," & Trfr_FromTo_Cust & "," & Trfr_AcType & "," & Trfr_AcNo & ",'" & _
                     Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & _
                     "," & "0" & "," & "0" & ",0)"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
        
        ' Insert Records in Export File for Hotlisting Transactions for CREDIT Entry because it is WITHOUT card trans;
        ' Is the Receiver a Valid card Holder
        Valid_Card_Holder = Find_Valid_CardHolder(Customer_Home_Branch, Trfr_FromTo_Cust, Trfr_AcType, Trfr_AcNo, Temp_Connection)
        ' Write in DAILY Export File but should be done if Receiver is a Valid Card Holder if he is of MY branch
        If Valid_Card_Holder >= 1 Then
             '''' Update Trans. Insertion date & time & confirmation flag for home customer only
            HotConfirm_Flag = 0
            HotTrans_Ins_DateTime = #1/1/1920#
            If Customer_Home_Branch = MyClass.Unit_Code Then
                HotConfirm_Flag = 1
                HotTrans_Ins_DateTime = Date_Time_Now
            End If
            Sqlstr = "insert into " & TempDb & "export_txn_dl (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                    " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type,loan_ac_no, " & _
                    " txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                    Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & _
                    "," & Customer_Home_Branch & "," & Trfr_FromTo_Cust & "," & Trfr_AcType & "," & Trfr_AcNo & ",'" & _
                    Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & "," & _
                    "0" & "," & "0" & "," & "0" & "," & "0" & _
                    ",'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'," & Format(HotTrans_Ins_DateTime, "HHMM") & "" & _
                    "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            ' Write in Hourly Export File
            Sqlstr = "select txn_no from " & TempDb & "export_txn_hr where txn_br_code = " & Transacting_Branch & " and " & _
                    " txn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "' and txn_no = " & Extra_Trans_Number
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            If Recset.EOF = True Then
                Sqlstr = "insert into " & TempDb & "export_txn_hr (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                        " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type,loan_ac_no, " & _
                        " txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                        Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & _
                        "," & Customer_Home_Branch & "," & Trfr_FromTo_Cust & "," & Trfr_AcType & "," & Trfr_AcNo & ",'" & _
                        Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & "," & _
                        "0" & "," & "0" & "," & "0" & "," & "0" & _
                        ",'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'," & Format(HotTrans_Ins_DateTime, "HHMM") & "" & _
                        "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
            End If
        End If
    End If
    
    ' Everything Done. Return Gracefully now.
    Exit Sub

Find_Transaction_Group:

    If Transaction_Code = Prev_Txn_Code Then
        Transaction_Group = Prev_Tran_Group
        Return
    End If
    Sqlstr = "select txn_group from " & TempDb & "txn_type where txn_code = '" & Transaction_Code & "'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
'=============================== Original Statements
'    Transaction_Group = 0
'    If Not Recset.EOF Then Transaction_Group = IIf(IsNull(Recset!Txn_Group), 0, Recset!Txn_Group)
'    If Transaction_Group = 0 Then
'        Call MyClass.Display_Message("Transaction Record NOT Defined for Transaction Code = " & Transaction_Code, 1)
'        Call Abort_Program(, "mylibclass\Post_Transaction_Txn_Group")
'        Return
'    End If
    '====================================================
    Transaction_Group = 6
    If Recset.EOF = False Then Transaction_Group = IIf(IsNull(Recset!Txn_Group), 6, Recset!Txn_Group)
            
    If Transaction_Group > 7 Then
        Call MyClass.Display_Message("Invalid Transaction Group Defined for Transaction Code = " & Transaction_Code, 1)
        Transaction_Group = 0
        Return
    End If
    Prev_Txn_Code = Transaction_Code
    Prev_Tran_Group = Transaction_Group
    Return
    
Allot_Trans_Number:

    ' Allot Transaction Number Here
    ' The Following SQL commented by AKS on 21st April 2005. If Duplicate Transaction Number complaint if received, it can uncommented
'    Sqlstr = "Select * from " & tempdb & "aks_parameter with (updlock) where par_key = 'TXN_NO'"
'    Call Fire_Sql(Sqlstr, RecSet, Sql_Error, temp_connection, recs_read)
'    If Sql_Error <> 0 Then GoTo IO_Error
                   
    Sqlstr = "update " & TempDb & "aks_parameter set par_no = par_no + 1 where par_key = 'TXN_NO'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    
    Sqlstr = "select par_no from " & TempDb & "aks_parameter where par_key = 'TXN_NO'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    Last_Number = 0
    If Not Recset.EOF Then Last_Number = Recset!Par_No
    
    Sqlstr = "select cust_idno from " & TempDb & "nsav_txn where txn_br_code = " & Transacting_Branch & " and " & _
            " txn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "' and txn_no = " & Last_Number
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    If Recset.EOF = False Then GoTo Allot_Trans_Number

    Sqlstr = "select cust_idno from " & TempDb & "foreign_sav_txn where txn_br_code = " & Transacting_Branch & " and " & _
            " txn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "' and txn_no = " & Last_Number
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    If Recset.EOF = False Then GoTo Allot_Trans_Number
    Return
    
IO_Error:

    Err_Flag = 1
    Sqlstr = " SQL I/O Error in Post_Transaction"
    MsgBox Sqlstr
    Exit Sub
End Sub

Public Sub Post_Alien_Transaction(ByVal Transacting_Branch As Integer, ByVal Transaction_Date As Date, ByVal Transaction_Time As Integer, _
                            ByRef Transaction_number As Long, ByVal Customer_Home_Branch As Integer, _
                            ByVal Cust_Id As Long, ByVal Account_Type As Integer, ByVal Account_No As Long, _
                            ByVal Transaction_Code As String, ByVal Transaction_Amount As Currency, _
                            ByVal Commission_Amt As Currency, ByVal Narration As String, ByVal Clear_Date As Date, _
                            ByVal Teller_Id As String, ByVal Cheque_Number As Long, ByVal Cheque_Date As Date, _
                            ByVal Cheque_Bank As String, ByVal Reversal_Entry_Flag As Byte, _
                            ByVal Trfr_FromTo_Cust As Long, ByVal Trfr_AcType As Integer, ByVal Trfr_AcNo As Long, _
                            ByVal Loan_AcType As Integer, ByVal Loan_AcNo As Long, ByVal With_Card_Flag As Byte, _
                            ByVal Main_Transaction_No As Long, ByVal Card_Number As Long, ByVal Account_Categ As String, _
                            ByRef Err_Flag As Integer, Optional ByVal nsav_acnt_CardNo As Long)
                            
' This Function Posts Transaction in BOTH the branches; in Transacting Branch as well as in Customers Home Branch
Dim Sqlstr As String
Dim Last_Number As Long, Date_Time_Now As Date, Str_Trans_Time As String
Dim Amt_Posted_In_Loan As Currency, Loan_Txn_No As Long
Dim Db_Clear_Bal As Currency, Transaction_Group As Byte, Valid_Card_Holder As Byte
Dim Last_Wd_Date As Date, Last_WD_Amount As Currency, Extra_Trans_Number As Long
Dim Last_Cr_Date As Date, Last_CR_Amount As Currency, Loan_Transfer_Flag
Dim Teller_Trans_Number As Long, Absolute_Amount As Currency, Temp_Amt As Currency, Reversal_Status As Byte
Dim Last_Cr_Narration As String, Temp_Tfr_Commission As Currency
Dim ExistingConfirm_Flag As Byte, New_Log_Date As Date
Dim Checksum_Encrypted As String, Checksum_Plain As Currency, Byte_Var As Byte
Dim Temp_Amount As Currency
Dim HotTrans_Ins_DateTime As Date, HotConfirm_Flag As Byte
Dim Temp_Trans_Code As String
Dim Months_Debit As Currency, Months_Credit As Currency

'From Where these Fields Have to be taken
Dim Trfr_To_Loan_Commission As Currency
Dim Tran_Data As UnPacked_TranRecord
Dim ATM_Ac_No As String
Dim ATM_Implemented_Flag As Byte, strVar As String
Dim Ora_Branch As Byte

Dim ATM_Narration As String


    If Transaction_Date < #1/4/2005# Then
        MsgBox "Cannot Post the Transaction whose Date is Less than 01-04-2005" & vbCrLf & _
                "The Application will be Terminated" & vbCrLf & _
                "Please Contact Your IT Manager", vbCritical, "Warning"
        End
    End If
    Err_Flag = 0
    
    ' Set Reversal Status
    Reversal_Status = 0
    If Reversal_Entry_Flag >= 1 Then Reversal_Status = 2
    
    ' Transaction Must be of This Branch Only
    ' Customer MUST be an Alien Customer
    If Customer_Home_Branch = MyClass.Unit_Code Then
        Call MyClass.Display_Message("Remote Branch Transaction Received. Stupid Mistake. Inform Amity Software Inc.", 1)
        Exit Sub
    End If
    
    ' Is the Customer a Valid card Holder
    Valid_Card_Holder = 1
    If With_Card_Flag <= 0 Then
        If nsav_acnt_CardNo = 0 Then
            Valid_Card_Holder = Find_Valid_CardHolder(Customer_Home_Branch, Cust_Id, Account_Type, Account_No)
        Else
            Valid_Card_Holder = 1
        End If
    End If
    ' Find Transaction Group
    ' 1 = cash Deposit
    ' 2 = Cash Withdrawal
    ' 3 = Cheque Deposit
    ' 4 = Cheque Withdrawal
    ' 5 = Inter Account Transfer (Withdrawal from This Account & Deposit in another A/c)
    ' 6 = Miscellaneous Entriies (JVs)
    ' 7 = Ledger Fee
    GoSub Find_Transaction_Group
    ' Allocate Transaction Number
    If Transaction_number = 0 Then
        GoSub Allot_Trans_Number
        Transaction_number = Last_Number
    End If
    
    ATM_Implemented_Flag = 0
    Sqlstr = "select par_no from " & MyClass.ForeignDb & "aks_parameter where par_key = 'ATM_FLAG'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Post_Alien_Transaction")
    If Recset.EOF = False Then ATM_Implemented_Flag = IIf(IsNull(Recset!Par_No), 0, Recset!Par_No)
    
    'kunal 19-042007    Checking the oracle flag for the branch to treat the time field accordingly
    Ora_Branch = 0
    Sqlstr = "select par_no from " & MyClass.ForeignDb & "aks_parameter where par_key = 'ORA_BR'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Post_Alien_Transaction_0")
    If Recset.EOF = False Then Ora_Branch = IIf(IsNull(Recset!Par_No), 0, Recset!Par_No)
    
    If Ora_Branch = 1 Then
        Str_Trans_Time = Transaction_Time
    Else
        Str_Trans_Time = Format(Transaction_Time, "00:00")
    End If
    Date_Time_Now = Now()
    
    Loan_Transfer_Flag = 0
    If Loan_AcNo > 0 Then
        If Reversal_Entry_Flag <= 0 And Transaction_Amount > 0 Then Loan_Transfer_Flag = 1
        If Reversal_Entry_Flag > 0 And Transaction_Amount < 0 Then Loan_Transfer_Flag = 1
    End If
    
    Absolute_Amount = Transaction_Amount
    If Absolute_Amount < 0 Then Absolute_Amount = 0 - Absolute_Amount
    
    If Ora_Branch = 1 Then
        ' Insert in Transaction table in Customer's Home Branch;
        Sqlstr = "insert into " & MyClass.ForeignDb & "nsav_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                    "type_code,ac_srno,txn_time,txn_code,txn_amt,txn_bnk_chg,txn_refno,txn_clear_date,teller_id," & _
                    "chq_no,bankbr_code,chq_date,post_ind,reversal_flag,txn_delete_flag,trans_ln_type_code, trans_ln_ac_srno, " & _
                    "card_txn_flag, main_txn_no,cross_cust_idno,cross_type_code ,cross_ac_srno," & _
                    "txn_ins_date,txn_ins_time) values (" & _
                    Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Transaction_number & "," & _
                    Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & "," & Str_Trans_Time & ",'" & _
                    Transaction_Code & "'," & Transaction_Amount & "," & Commission_Amt & ",'" & Narration & "','" & _
                    Format(Clear_Date, "dd-mmm-yyyy") & "','" & System_Transactions_User_ID & "'," & Cheque_Number & ",'" & Cheque_Bank & "','" & _
                    Format(Cheque_Date, "dd-mmm-yyyy") & "',0,"
        If Reversal_Entry_Flag <> 2 Then Sqlstr = Sqlstr & Reversal_Status & ",0,"
        ' Delete Flag is to be updated instead of Reversal Flag for REVERSAL PROGRAM entries
        If Reversal_Entry_Flag = 2 Then Sqlstr = Sqlstr & "0," & Reversal_Status & ","
        Sqlstr = Sqlstr & Loan_AcType & "," & Loan_AcNo & "," & _
                    With_Card_Flag & "," & Main_Transaction_No & "," & Trfr_FromTo_Cust & "," & Trfr_AcType & "," & _
                    Trfr_AcNo & ",'" & Format(Date_Time_Now, "dd-mmm-yyyy") & "'," & Format(Date_Time_Now, "HHMM") & ")"
    Else
        ' Insert in Transaction table in Customer's Home Branch;
        Sqlstr = "insert into " & MyClass.ForeignDb & "nsav_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                    "type_code,ac_srno,txn_time,txn_code,txn_amt,txn_bnk_chg,txn_refno,txn_clear_date,teller_id," & _
                    "chq_no,bankbr_code,chq_date,post_ind,reversal_flag,txn_delete_flag,trans_ln_type_code, trans_ln_ac_srno, " & _
                    "card_txn_flag, main_txn_no,cross_cust_idno,cross_type_code ,cross_ac_srno," & _
                    "txn_ins_date,txn_ins_time) values (" & _
                    Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Transaction_number & "," & _
                    Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & Str_Trans_Time & "','" & _
                    Transaction_Code & "'," & Transaction_Amount & "," & Commission_Amt & ",'" & Narration & "','" & _
                    Format(Clear_Date, "dd-mmm-yyyy") & "','" & System_Transactions_User_ID & "'," & Cheque_Number & ",'" & Cheque_Bank & "','" & _
                    Format(Cheque_Date, "dd-mmm-yyyy") & "',0,"
        If Reversal_Entry_Flag <> 2 Then Sqlstr = Sqlstr & Reversal_Status & ",0,"
        ' Delete Flag is to be updated instead of Reversal Flag for REVERSAL PROGRAM entries
        If Reversal_Entry_Flag = 2 Then Sqlstr = Sqlstr & "0," & Reversal_Status & ","
        Sqlstr = Sqlstr & Loan_AcType & "," & Loan_AcNo & "," & _
                    With_Card_Flag & "," & Main_Transaction_No & "," & Trfr_FromTo_Cust & "," & Trfr_AcType & "," & _
                    Trfr_AcNo & ",'" & Format(Date_Time_Now, "dd-mmm-yyyy") & "','" & Format(Date_Time_Now, "HH:MM") & "')"
    End If
    
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
                    
    'post in export_atm_txn table
    If ATM_Implemented_Flag > 0 Then
        ATM_Narration = Left$(Narration, 15)
       ATM_Ac_No = Make_ATM_AcNo(Customer_Home_Branch, Cust_Id, Account_Type, Account_No)
       Sqlstr = "select ffbs_acno from " & MyClass.ForeignDb & "atm_register where ffbs_acno = '" & ATM_Ac_No & "' and post_flag >=1"
       Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
       If Sql_Error <> 0 Then GoTo IO_Error
       If Recset.EOF = False Then
            Sqlstr = "insert into " & MyClass.ForeignDb & "export_atm_txn(txn_br_code,txn_date,txn_no,txn_time,txn_clear_date," & _
                     "ffbs_acno,txn_amt,txn_code,txn_desc,clear_bal,withdral_bal,status_flag,main_txn) values(" & MyClass.Unit_Code & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & _
                     " " & Transaction_number & "," & Transaction_Time & ",'" & Format(Clear_Date, "dd-mmm-yyyy") & "','" & ATM_Ac_No & "'," & _
                     " " & Transaction_Amount & ",'" & Transaction_Code & "','" & Left$(Narration, 15) & "',0,0,0,0)"
           Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
           If Sql_Error <> 0 Then GoTo IO_Error
        
           If Commission_Amt <> 0 Then
               Sqlstr = "insert into " & MyClass.ForeignDb & "export_atm_txn(txn_br_code,txn_date,txn_no,txn_time,txn_clear_date," & _
                       "ffbs_acno,txn_amt,txn_code,txn_desc,clear_bal,withdral_bal,status_flag,main_txn) values(" & MyClass.Unit_Code & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & _
                       " " & Transaction_number & "," & Transaction_Time & ",'" & Format(Clear_Date, "dd-mmm-yyyy") & "','" & ATM_Ac_No & "'," & _
                       " " & Commission_Amt & ",'" & Transaction_Code & "','" & Left$(Narration, 15) & "',0,0,0,1)"
               Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
               If Sql_Error <> 0 Then GoTo IO_Error
           End If
        End If
    End If
    
    If Transacting_Branch = MyClass.Unit_Code Then
        If Ora_Branch = 1 Then
            ' Insert in Foreign Save Transaction table Transactiing Branch
            Sqlstr = "insert into " & MyClass.gUnifyDb & "foreign_sav_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                        "type_code,ac_srno,txn_time,txn_code,txn_amt,txn_bnk_chg,txn_refno,txn_clear_date,teller_id," & _
                        "chq_no,bankbr_code,chq_date,post_ind,reversal_flag,txn_delete_flag,trans_ln_type_code, trans_ln_ac_srno, " & _
                        "card_txn_flag, main_txn_no,card_no,ac_categ) values (" & _
                        Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Transaction_number & "," & _
                        Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & "," & Str_Trans_Time & ",'" & _
                        Transaction_Code & "'," & Transaction_Amount & "," & Commission_Amt & ",'" & Narration & "','" & _
                        Format(Clear_Date, "dd-mmm-yyyy") & "','" & Teller_Id & "'," & Cheque_Number & ",'" & Cheque_Bank & "','" & _
                        Format(Cheque_Date, "dd-mmm-yyyy") & "',0,"
            If Reversal_Entry_Flag <> 2 Then Sqlstr = Sqlstr & Reversal_Status & ",0,"
            ' Delete Flag is to be updated instead of Reversal Flag for REVERSAL PROGRAM entries
            If Reversal_Entry_Flag = 2 Then Sqlstr = Sqlstr & "0," & Reversal_Status & ","
            Sqlstr = Sqlstr & Loan_AcType & "," & Loan_AcNo & "," & _
                        With_Card_Flag & "," & Main_Transaction_No & "," & Card_Number & ",'" & Account_Categ & "')"
        Else
            ' Insert in Foreign Save Transaction table Transactiing Branch
            Sqlstr = "insert into " & MyClass.gUnifyDb & "foreign_sav_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                        "type_code,ac_srno,txn_time,txn_code,txn_amt,txn_bnk_chg,txn_refno,txn_clear_date,teller_id," & _
                        "chq_no,bankbr_code,chq_date,post_ind,reversal_flag,txn_delete_flag,trans_ln_type_code, trans_ln_ac_srno, " & _
                        "card_txn_flag, main_txn_no,card_no,ac_categ) values (" & _
                        Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Transaction_number & "," & _
                        Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & Str_Trans_Time & "','" & _
                        Transaction_Code & "'," & Transaction_Amount & "," & Commission_Amt & ",'" & Narration & "','" & _
                        Format(Clear_Date, "dd-mmm-yyyy") & "','" & Teller_Id & "'," & Cheque_Number & ",'" & Cheque_Bank & "','" & _
                        Format(Cheque_Date, "dd-mmm-yyyy") & "',0,"
            If Reversal_Entry_Flag <> 2 Then Sqlstr = Sqlstr & Reversal_Status & ",0,"
            ' Delete Flag is to be updated instead of Reversal Flag for REVERSAL PROGRAM entries
            If Reversal_Entry_Flag = 2 Then Sqlstr = Sqlstr & "0," & Reversal_Status & ","
            Sqlstr = Sqlstr & Loan_AcType & "," & Loan_AcNo & "," & _
                        With_Card_Flag & "," & Main_Transaction_No & "," & Card_Number & ",'" & Account_Categ & "')"
        End If
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
    End If
    ' If This Transaction Exists in Unposted Card Transactions then delete that if it is my OWN customer
    ' IRRespective of whether the Transaction is WITH or w/o
    ' If nsav_acnt_cardno is > 0 this means this function is called from Transactions Program Only and we need not
    ' bother about already existing record in unposted_card_txn
    If IsMissing(nsav_acnt_CardNo) = True Or nsav_acnt_CardNo = 0 Then
        Sqlstr = "select txn_amt from " & MyClass.ForeignDb & "unposted_card_txn where txn_br_code = " & Transacting_Branch & " and " & _
                 "txn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "' and txn_no = " & Transaction_number
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        If Not Recset.EOF Then
            Sqlstr = "delete from " & MyClass.ForeignDb & "unposted_card_txn where txn_br_code = " & Transacting_Branch & " and " & _
                 "txn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "' and txn_no = " & Transaction_number
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
    End If
    ' ==========================================================
    ' Following Processing for OUR OWN customer ONLY, till EndIf
    ' ==========================================================
    ' Now Update SBalRec if Home Branch Customer
    Temp_Amount = Transaction_Amount + Commission_Amt
    If Temp_Amount <> 0 Then
'        SQLStr = " select sbal_month_debit,sbal_month_credit from " & MyClass.ForeignDb & "sbal_rec where sbal_hbr_code = " & _
'                 Customer_Home_Branch & " and cust_idno = " & Cust_Id & " and sbal_acc_type = " & Account_type & _
'                 " and sbal_acc_no = " & Account_No & " and sbal_date = '" & Format(Clear_Date, "dd-mmm-yyyy") & "'"
'        Call Fire_Sql(SQLStr, Recset, SQL_Error, MyClass.Foreign_Connection, Recs_Read)
'        If SQL_Error <> 0 Then GoTo IO_Error
'        If Recset.EOF Then
        Months_Debit = 0
        Months_Credit = 0
        If Reversal_Entry_Flag <= 0 Then
            If Temp_Amount < 0 Then Months_Debit = 0 - Temp_Amount
            If Temp_Amount > 0 Then Months_Credit = Temp_Amount
        Else
            If Temp_Amount < 0 Then Months_Credit = Temp_Amount
            If Temp_Amount > 0 Then Months_Debit = 0 - Temp_Amount
        End If
        Sqlstr = "insert into " & MyClass.ForeignDb & "sbal_rec (sbal_hbr_code,cust_idno,sbal_acc_type,sbal_acc_no,sbal_date," & _
                 "sbal_month_debit,sbal_month_credit) values (" & Customer_Home_Branch & "," & Cust_Id & "," & _
                 Account_Type & "," & Account_No & ",'" & Format(Clear_Date, "dd-mmm-yyyy") & "',"
        Sqlstr = Sqlstr & Months_Debit & "," & Months_Credit & ")"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read, True)
        If Sql_Error <> 0 Then
            If Temp_Amount < 0 Then Sqlstr = "update " & MyClass.ForeignDb & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Temp_Amount
            If Temp_Amount > 0 Then Sqlstr = "update " & MyClass.ForeignDb & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Temp_Amount
            If Reversal_Entry_Flag > 0 Then
                If Temp_Amount < 0 Then Sqlstr = "update " & MyClass.ForeignDb & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Temp_Amount
                If Temp_Amount > 0 Then Sqlstr = "update " & MyClass.ForeignDb & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Temp_Amount
            End If
            Sqlstr = Sqlstr + " where sbal_hbr_code = " & _
                     Customer_Home_Branch & " and cust_idno = " & Cust_Id & " and sbal_acc_type = " & Account_Type & _
                     " and sbal_acc_no = " & Account_No & " and sbal_date = '" & Format(Clear_Date, "dd-mmm-yyyy") & "'"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
    End If
    ' Update Account Master as well in Customer's Home Branch
    ' Discount Amount & Free Withdrawal Amount will be updated in Transactions Program Only
    Sqlstr = "select clear_bal, last_wdrw_date,last_cr_date,last_cr_amt,last_dr_amt, last_cr_refno, bal_chksum, " & _
            " last_log_date from " & MyClass.ForeignDb & "nsav_account " & _
            " where br_code = " & Customer_Home_Branch & _
            " and type_code = " & Account_Type & _
            " and ac_srno = " & Account_No & _
            " and cust_idno = " & Cust_Id
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    If Recset.EOF = True Then Call MyClass.Display_Message("Account Master Not Found; Customer= " & Cust_Id & " ; A/c Type= " & Account_Type & " Number= " & Account_No, 1)
    If Recset.EOF = False Then
        Db_Clear_Bal = IIf(IsNull(Recset!Clear_bal), 0, Recset!Clear_bal)
        If Clear_Date <= MyClass.Branch_Working_Date Then Db_Clear_Bal = Db_Clear_Bal + Transaction_Amount + Commission_Amt
        Last_Wd_Date = IIf(IsNull(Recset!Last_Wdrw_Date), #1/1/1920#, Recset!Last_Wdrw_Date)
        Last_WD_Amount = IIf(IsNull(Recset!Last_Dr_Amt), 0, Recset!Last_Dr_Amt)
        Last_Cr_Date = IIf(IsNull(Recset!Last_Cr_Date), #1/1/1920#, Recset!Last_Cr_Date)
        Last_CR_Amount = IIf(IsNull(Recset!Last_Cr_Amt), 0, Recset!Last_Cr_Amt)
        Last_Cr_Narration = IIf(IsNull(Recset!Last_Cr_RefNo), "", Recset!Last_Cr_RefNo)
        New_Log_Date = IIf(IsNull(Recset!Last_Log_Date), #1/1/1920#, Recset!Last_Log_Date)
        
        ' Revise the Security Field
'        Checksum_Encrypted = Left$(IIf(IsNull(RecSet!bal_chksum), "", RecSet!bal_chksum) + Space(16), 16)
'        Byte_Var = DeCrypt_Amount(Checksum_Encrypted, Checksum_Plain)
'        Checksum_Plain = Checksum_Plain + Transaction_Amount + Commission_Amt
'        Checksum_Encrypted = EnCrypt_Amount(Checksum_Plain)
        Checksum_Encrypted = " "
        ' Do NOT update Last Date & Amount for Ledger Fee Case (Group 7) and (Group 6 )
        If Transaction_Group <= 6 Then         '' 04/04/2003 as per Faisal from Kenya for SAL
            If Transaction_Amount > 0 Then
'                If Transaction_Date >= last_cr_date Then
'                    last_cr_date = Transaction_Date
'                    Last_CR_Amount = Transaction_Amount
'                    Last_Cr_Narration = Left$(Narration, 15)
'                End If
                '04/04/2003  '''' clear date instead of Txn Date
                If Clear_Date <= MyClass.Branch_Working_Date And Clear_Date >= Last_Cr_Date Then
                    Last_Cr_Date = Clear_Date
                    Last_CR_Amount = Transaction_Amount
                    Last_Cr_Narration = Left$(Narration, 15)
                End If
            End If
            If Transaction_Amount < 0 Then
                If Transaction_Date >= Last_Wd_Date Then
                    Last_Wd_Date = Transaction_Date
                    Last_WD_Amount = 0 - Transaction_Amount
                End If
            End If
            If New_Log_Date < MyClass.Branch_Working_Date Then New_Log_Date = MyClass.Branch_Working_Date
        End If
        
        Sqlstr = "update " & MyClass.ForeignDb & "nsav_account set bal_chksum = '" & Checksum_Encrypted & "', clear_bal = " & Db_Clear_Bal & " , last_wdrw_date = '" & _
                 Format(Last_Wd_Date, "dd-mmm-yyyy") & "' , last_cr_date = '" & Format(Last_Cr_Date, "dd-mmm-yyyy") & _
                 "' , last_dr_amt = " & Last_WD_Amount & " , last_cr_amt = " & Last_CR_Amount & ",last_cr_refno='" & _
                 Last_Cr_Narration & "'" & ",last_log_date='" & Format(New_Log_Date, "dd-mmm-yyyy") & "'" & _
                 ",last_txn_for_stmt = last_txn_for_stmt + 1" & _
                 " where br_code = " & Customer_Home_Branch & _
                 " and type_code = " & Account_Type & _
                 " and ac_srno = " & Account_No & _
                 " and cust_idno = " & Cust_Id
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
    End If
    
    ' Insert in Card Simulatneously
    If With_Card_Flag >= 1 Then
        Tran_Data.Cheque_Number = Cheque_Number
        Tran_Data.Effective_Date = Clear_Date
        Tran_Data.History_Flag = 0
        Tran_Data.Loan_TransferFlag = Loan_Transfer_Flag
        Tran_Data.Tr_Amount1 = Transaction_Amount
        Tran_Data.Tr_Amount2 = Commission_Amt
        Tran_Data.Transacting_Branch = Transacting_Branch
        Tran_Data.Transaction_Code = Transaction_Code
        Tran_Data.Transaction_Date = Transaction_Date
        Tran_Data.Transaction_No = Transaction_number
        Tran_Data.Transaction_Time = Transaction_Time
        Call Insert_Tran_IN_Pool(Tran_Data)
    End If

    ' Update Teller Transaction Table in Transacting Branch
    If Transacting_Branch = MyClass.Unit_Code And Transaction_Group <= 3 And Transaction_Amount <> 0 Then
        Sqlstr = "select ttxn_row_id from " & MyClass.gUnifyDb & "teller_txn where ttxn_br_code = " & Transacting_Branch & _
                 " and ttxn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "' and ttxn_teller_id = '" & _
                 Teller_Id & "' and ttxn_type = 4 and ttxn_drcr_cd = "
        If Transaction_Amount > 0 Then Sqlstr = Sqlstr & "1"
        If Transaction_Amount < 0 Then Sqlstr = Sqlstr & "2"
        Sqlstr = Sqlstr & " and ttxn_cash_flg = "
        If Transaction_Group <= 2 Then Sqlstr = Sqlstr & "0"
        If Transaction_Group >= 3 Then Sqlstr = Sqlstr & "1"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        If Recset.EOF = False Then Teller_Trans_Number = IIf(IsNull(Recset!ttxn_row_id), 0, Recset!ttxn_row_id)
        If Recset.EOF = True Then
            Sqlstr = "select max(ttxn_row_id) from " & MyClass.gUnifyDb & "teller_txn"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            Teller_Trans_Number = 0
            If Not Recset.EOF Then Teller_Trans_Number = IIf(IsNull(Recset.Fields(0)), 0, Recset.Fields(0))
            Teller_Trans_Number = Teller_Trans_Number + 1
            If Ora_Branch = 1 Then
                Sqlstr = "insert into " & MyClass.gUnifyDb & "teller_txn (ttxn_row_id,ttxn_br_code,ttxn_date,ttxn_teller_id," & _
                         "ttxn_type,ttxn_drcr_cd,ttxn_cash_flg,ttxn_amount,ttxn_oth_teller,ttxn_time,ttxn_gl_sect," & _
                         "ttxn_gl_type,ttxn_gl_dept,ttxn_operator,ttxn_op_date,ttxn_op_time) values (" & _
                         Teller_Trans_Number & "," & MyClass.Unit_Code & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "','" & _
                         Teller_Id & "',4,"
                If Transaction_Amount > 0 Then Sqlstr = Sqlstr & "1"
                If Transaction_Amount < 0 Then Sqlstr = Sqlstr & "2"
                Sqlstr = Sqlstr & ","
                If Transaction_Group <= 2 Then Sqlstr = Sqlstr & "0"
                If Transaction_Group >= 3 Then Sqlstr = Sqlstr & "1"
                Sqlstr = Sqlstr & "," & Absolute_Amount & ",' ',0,0,0,0,'" & Teller_Id & "','" & _
                Format(Date_Time_Now, "dd-mmm-yyyy") & "'," & Format(Date_Time_Now, "HHMM") & ")"
            Else
                Sqlstr = "insert into " & MyClass.gUnifyDb & "teller_txn (ttxn_row_id,ttxn_br_code,ttxn_date,ttxn_teller_id," & _
                         "ttxn_type,ttxn_drcr_cd,ttxn_cash_flg,ttxn_amount,ttxn_oth_teller,ttxn_time,ttxn_gl_sect," & _
                         "ttxn_gl_type,ttxn_gl_dept,ttxn_operator,ttxn_op_date,ttxn_op_time) values (" & _
                         Teller_Trans_Number & "," & MyClass.Unit_Code & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "','" & _
                         Teller_Id & "',4,"
                If Transaction_Amount > 0 Then Sqlstr = Sqlstr & "1"
                If Transaction_Amount < 0 Then Sqlstr = Sqlstr & "2"
                Sqlstr = Sqlstr & ","
                If Transaction_Group <= 2 Then Sqlstr = Sqlstr & "0"
                If Transaction_Group >= 3 Then Sqlstr = Sqlstr & "1"
                Sqlstr = Sqlstr & "," & Absolute_Amount & ",' ',0,0,0,0,'" & Teller_Id & "','" & _
                Format(Date_Time_Now, "dd-mmm-yyyy") & "','" & Format(Date_Time_Now, "HH:MM") & "')"
            End If
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        Else
            Sqlstr = "update " & MyClass.gUnifyDb & "teller_txn set ttxn_amount = ttxn_amount + " & Absolute_Amount & _
                     " Where ttxn_row_id = " & Recset!ttxn_row_id
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
    End If
    
    ' Update Tours Table here
    If Transacting_Branch = MyClass.Unit_Code And Transaction_Amount <> 0 Then
        If Transaction_Group <= 4 Or (Transaction_Group = 5 And Transaction_Amount < 0) Then
            Sqlstr = "select lst_visit_date from " & MyClass.ForeignDb & "tours where hbr_code = " & Customer_Home_Branch & _
                     " and cust_idno = " & Cust_Id & " and visited_br_code = " & Transacting_Branch
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            If Recset.EOF = True Then
                Sqlstr = "insert into " & MyClass.ForeignDb & "tours (hbr_code,cust_idno,visited_br_code,lst_visit_date) " & _
                         "values (" & Customer_Home_Branch & "," & Cust_Id & "," & Transacting_Branch & ",'" & _
                         Format(Transaction_Date, "dd-mmm-yyyy") & "')"
            Else
                Sqlstr = "update " & MyClass.ForeignDb & "tours set lst_visit_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & _
                         "' where hbr_code = " & Customer_Home_Branch & " and cust_idno = " & Cust_Id & _
                         " and visited_br_code = " & Transacting_Branch
            End If
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
    End If
    
    ' Insert Record in Hotlisted Transactions Table
    If With_Card_Flag = 0 And Valid_Card_Holder >= 1 Then
        HotConfirm_Flag = 1
        HotTrans_Ins_DateTime = Date_Time_Now
        ' Insert This transaction in HotListed Transactions with confirm_flag as 1 so that if he comes back with card
        ' in my branch and connectivity is missing, I insert this transaction on card
        If Ora_Branch = 1 Then
            Sqlstr = "insert into " & MyClass.gUnifyDb & "hotlist_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                     " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,txn_ins_date,txn_ins_time,confirm_flag) values (" & _
                     Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Transaction_number & "," & _
                     Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & _
                     Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Transaction_Amount & "," & _
                     Commission_Amt & "," & Cheque_Number & ",'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'" & _
                     "," & Format(HotTrans_Ins_DateTime, "HHMM") & ",1)"
        Else
            Sqlstr = "insert into " & MyClass.gUnifyDb & "hotlist_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                     " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,txn_ins_date,txn_ins_time,confirm_flag) values (" & _
                     Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Transaction_number & "," & _
                     Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & _
                     Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Transaction_Amount & "," & _
                     Commission_Amt & "," & Cheque_Number & ",'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'" & _
                     ",'" & Format(HotTrans_Ins_DateTime, "HH:MM") & "',1)"
        End If
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        
        ' Also insert in export_txn_dl and export_txn_hr for Intimation to Other Branches since he is WITHOUT Card
        If Transaction_Group <= 6 And Transaction_Code <> TC_Ledger_Fee Then        ''' Don't Export LDF
            If Ora_Branch = 1 Then
                ' Write in DAILY Export File
                Sqlstr = "insert into " & MyClass.ForeignDb & "export_txn_dl (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                        " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type,loan_ac_no, " & _
                        " txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                        Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Transaction_number & _
                        "," & Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & _
                        Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Transaction_Amount & "," & _
                        Commission_Amt & "," & Cheque_Number & "," & Loan_AcType & "," & Loan_AcNo & _
                        ",'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'," & Format(HotTrans_Ins_DateTime, "HHMM") & "" & _
                        "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
            Else
                ' Write in DAILY Export File
                Sqlstr = "insert into " & MyClass.ForeignDb & "export_txn_dl (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                        " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type,loan_ac_no, " & _
                        " txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                        Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Transaction_number & _
                        "," & Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & _
                        Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Transaction_Amount & "," & _
                        Commission_Amt & "," & Cheque_Number & "," & Loan_AcType & "," & Loan_AcNo & _
                        ",'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "','" & Format(HotTrans_Ins_DateTime, "HH:MM") & "'" & _
                        "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
            End If
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            If Ora_Branch = 1 Then
                ' Write in Hourly Export File
                Sqlstr = "insert into " & MyClass.ForeignDb & "export_txn_hr (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                        " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type,loan_ac_no, " & _
                        " txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                        Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Transaction_number & _
                        "," & Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & _
                        Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Transaction_Amount & "," & _
                        Commission_Amt & "," & Cheque_Number & "," & Loan_AcType & "," & Loan_AcNo & _
                        ",'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'," & Format(HotTrans_Ins_DateTime, "HH:MM") & "" & _
                        "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
            Else
                ' Write in Hourly Export File
                Sqlstr = "insert into " & MyClass.ForeignDb & "export_txn_hr (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                        " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type,loan_ac_no, " & _
                        " txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                        Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Transaction_number & _
                        "," & Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & _
                        Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Transaction_Amount & "," & _
                        Commission_Amt & "," & Cheque_Number & "," & Loan_AcType & "," & Loan_AcNo & _
                        ",'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "','" & Format(HotTrans_Ins_DateTime, "HH:MM") & "'" & _
                        "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
            End If
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
    End If
    
   '========================================================================================
   ' Processing for Generation of Additional Entries for Loan Deposit & Inter-Account Cases
   '========================================================================================
    ' Append Record in Loan_Pay for Voluntary Loan Payments (Deposit Transactions Only)
    If Loan_Transfer_Flag >= 1 And Transaction_Code <> TC_Saving_CR_From_Loan_Disb Then
        ' Case of Reversal Entry i.e. Cancellation of earlier Deposit Entry; Main Transaction Number will contain the
        ' Transaction Number of Original Entry being Cancelled/Reversed
        If Transaction_Amount < 0 Then
            ' Find The Corresponding ALR
            Sqlstr = "select txn_amt from " & MyClass.ForeignDb & "nsav_txn where txn_hbr_cd = " & _
                        Customer_Home_Branch & " and cust_idno = " & Cust_Id & " and type_code = " & _
                        Account_Type & " and ac_srno = " & Account_No & " and txn_date = '" & _
                        Format(Transaction_Date, "dd-mmm-yyyy") & "' and txn_code = '" & TC_Transfer_To_Loan & _
                        "' and main_txn_no = " & Main_Transaction_No
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            If Recset.EOF = True Then
                MsgBox "Corresponding Loan Transfer Entry Not Found in Savings."
                Exit Sub
            End If
            Dim Reverse_Amt As Currency
            Reverse_Amt = Recset!Txn_Amt
            If Abs(Reverse_Amt) > Abs(Transaction_Amount) Then
                MsgBox "Corresponding Loan Transfer Entry is of Higher Amount in Loans"
                Exit Sub
            End If
            Call Reverse_Loan_Payment(Customer_Home_Branch, Loan_AcType, Loan_AcNo, TL_Transfer_From_Savings, _
                                    Transaction_Date, Reverse_Amt, "", Loan_Txn_No, Amt_Posted_In_Loan)
        End If
        ' Volutary Deposit in Loan Account
        If Transaction_Amount > 0 Then
            ' Generate Withdrawal Transaction in Savings for Amount PUSHED to Loan and ACCEPTED by Loan routine.
            Loan_Txn_No = 0
            Call Post_Loan_Payment(Customer_Home_Branch, Loan_AcType, Loan_AcNo, TL_Transfer_From_Savings, _
                                    Clear_Date, Transaction_Amount, 1, "", Amt_Posted_In_Loan, Loan_Txn_No)
            If Amt_Posted_In_Loan < Transaction_Amount Then Call Reverse_Auto_Loan_Recovery(Customer_Home_Branch, _
                                    Cust_Id, Account_Type, Account_No, Transaction_Amount - Amt_Posted_In_Loan)
            '=========================================================================================================
            ' Generate Additional record for Withdrawal Entry in case of Deposit Transaction with Loan Transfer Flag;
            '=========================================================================================================
            GoSub Allot_Trans_Number
            Extra_Trans_Number = Last_Number
            Temp_Amt = 0 - Amt_Posted_In_Loan
            '=====Trfr_To_Loan_Commission is a constant having value of 50. From now onwards this value in this
            '=====variable has to be fetched from bank commission charges table. modified by faisal on 03-03-04
            '=====I am passing category as blank, beacuse i am not getting the category in the auto loan recovery
            '=====function, where i am calling this function also for the Trfr_To_Loan_Commission.
            Call Calculate_BankCharge(TC_Transfer_To_Loan, Account_Type, "", 0, 0, Trfr_To_Loan_Commission)
            '============================End of modification for Trfr_To_Loan_Commission=========================
            Temp_Tfr_Commission = 0 - Trfr_To_Loan_Commission
            If Reversal_Entry_Flag >= 1 Then Temp_Tfr_Commission = Trfr_To_Loan_Commission
            If Ora_Branch = 1 Then
                Sqlstr = "insert into " & MyClass.ForeignDb & "nsav_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd," & _
                         "cust_idno,type_code,ac_srno,txn_time,txn_code," & _
                         "txn_amt,txn_bnk_chg,txn_refno,txn_clear_date,teller_id,chq_no,bankbr_code,chq_date,post_ind," & _
                         " reversal_flag, trans_ln_type_code, trans_ln_ac_srno, card_txn_flag, txn_delete_flag, " & _
                         "main_txn_no,cross_cust_idno,cross_type_code ,cross_ac_srno,txn_ins_date,txn_ins_time) values ("
                Sqlstr = Sqlstr & Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & "," & _
                         Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & "," & Str_Trans_Time & ",'" & _
                         TC_Transfer_To_Loan & "'," & Temp_Amt & "," & Temp_Tfr_Commission & ",'" & "Transfer to Loan Account" & "','" & _
                         Format(Clear_Date, "dd-mmm-yyyy") & "','" & Teller_Id & "'," & "0" & ",'" & " " & "','" & _
                         Format(#1/1/1920#, "dd-mmm-yyyy") & "',0,0," & Loan_AcType & "," & Loan_AcNo & "," & _
                         With_Card_Flag & ","
                If Reversal_Entry_Flag <= 0 Then Sqlstr = Sqlstr & "0," & Transaction_number
                If Reversal_Entry_Flag >= 1 Then Sqlstr = Sqlstr & Reversal_Status & "," & Main_Transaction_No
                Sqlstr = Sqlstr & "," & "0" & "," & "0" & ",0" & ",'" & Format(Date_Time_Now, "dd-mmm-yyyy") & _
                "'," & Format(Date_Time_Now, "HHMM") & ")"
            Else
                Sqlstr = "insert into " & MyClass.ForeignDb & "nsav_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd," & _
                         "cust_idno,type_code,ac_srno,txn_time,txn_code," & _
                         "txn_amt,txn_bnk_chg,txn_refno,txn_clear_date,teller_id,chq_no,bankbr_code,chq_date,post_ind," & _
                         " reversal_flag, trans_ln_type_code, trans_ln_ac_srno, card_txn_flag, txn_delete_flag, " & _
                         "main_txn_no,cross_cust_idno,cross_type_code ,cross_ac_srno,txn_ins_date,txn_ins_time) values ("
                Sqlstr = Sqlstr & Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & "," & _
                         Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & Str_Trans_Time & "','" & _
                         TC_Transfer_To_Loan & "'," & Temp_Amt & "," & Temp_Tfr_Commission & ",'" & "Transfer to Loan Account" & "','" & _
                         Format(Clear_Date, "dd-mmm-yyyy") & "','" & Teller_Id & "'," & "0" & ",'" & " " & "','" & _
                         Format(#1/1/1920#, "dd-mmm-yyyy") & "',0,0," & Loan_AcType & "," & Loan_AcNo & "," & _
                         With_Card_Flag & ","
                If Reversal_Entry_Flag <= 0 Then Sqlstr = Sqlstr & "0," & Transaction_number
                If Reversal_Entry_Flag >= 1 Then Sqlstr = Sqlstr & Reversal_Status & "," & Main_Transaction_No
                Sqlstr = Sqlstr & "," & "0" & "," & "0" & ",0" & ",'" & Format(Date_Time_Now, "dd-mmm-yyyy") & _
                "','" & Format(Date_Time_Now, "HH:MM") & "')"
            End If
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            
            'post in export_atm_txn table
            If ATM_Implemented_Flag > 0 Then
                ATM_Narration = Left$(Narration, 15)
                ATM_Ac_No = Make_ATM_AcNo(Customer_Home_Branch, Cust_Id, Account_Type, Account_No)
                Sqlstr = "select ffbs_acno from " & MyClass.ForeignDb & "atm_register where ffbs_acno = '" & ATM_Ac_No & "' and post_flag >=1"
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
                If Recset.EOF = False Then
                    Sqlstr = "insert into " & MyClass.ForeignDb & "export_atm_txn(txn_br_code,txn_date,txn_no,txn_time,txn_clear_date," & _
                            "ffbs_acno,txn_amt,txn_code,txn_desc,clear_bal,withdral_bal,status_flag,main_txn) values(" & MyClass.Unit_Code & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & _
                            " " & Transaction_number & "," & Transaction_Time & ",'" & Format(Clear_Date, "dd-mmm-yyyy") & "','" & ATM_Ac_No & "'," & _
                            " " & Temp_Amt & ",'" & TC_Transfer_To_Loan & "','" & Left$(Narration, 15) & "',0,0,0,0)"
                    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
                    If Sql_Error <> 0 Then GoTo IO_Error
                    If Temp_Tfr_Commission <> 0 Then
                        Sqlstr = "insert into " & MyClass.ForeignDb & "export_atm_txn(txn_br_code,txn_date,txn_no,txn_time,txn_clear_date," & _
                                "ffbs_acno,txn_amt,txn_code,txn_desc,clear_bal,withdral_bal,status_flag,main_txn) values(" & MyClass.Unit_Code & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & _
                                " " & Transaction_number & "," & Transaction_Time & ",'" & Format(Clear_Date, "dd-mmm-yyyy") & "','" & ATM_Ac_No & "'," & _
                                " " & Temp_Tfr_Commission & ",'" & TC_Transfer_To_Loan & "','" & Left$(Narration, 15) & "',0,0,0,1)"
                        Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
                        If Sql_Error <> 0 Then GoTo IO_Error
                    End If
                End If
            End If
            ' Now Update SBalRec if Home Branch Customer
            Temp_Amount = Temp_Amt + Temp_Tfr_Commission
            If Temp_Amount <> 0 Then
'                SQLStr = " select sbal_month_debit,sbal_month_credit from " & MyClass.ForeignDb & "sbal_rec where sbal_hbr_code = " & _
'                         Customer_Home_Branch & " and cust_idno = " & Cust_Id & " and sbal_acc_type = " & Account_type & _
'                         " and sbal_acc_no = " & Account_No & " and sbal_date = '" & Format(Clear_Date, "dd-mmm-yyyy") & "'"
'                Call Fire_Sql(SQLStr, Recset, SQL_Error, MyClass.Foreign_Connection, Recs_Read)
'                If SQL_Error <> 0 Then GoTo IO_Error
'                If Recset.EOF Then

                ' sbalrec record WILL always exist for this customer for this date
'                Months_Debit = 0
'                Months_Credit = 0
'                If Reversal_Entry_Flag <= 0 Then
'                    If Temp_Amount < 0 Then Months_Debit = 0 - Temp_Amount
'                    If Temp_Amount > 0 Then Months_Credit = Temp_Amount
'                Else
'                    If Temp_Amount < 0 Then Months_Credit = Temp_Amount
'                    If Temp_Amount > 0 Then Months_Debit = 0 - Temp_Amount
'                End If
'                SQLStr = "insert into " & MyClass.ForeignDb & "sbal_rec (sbal_hbr_code,cust_idno,sbal_acc_type,sbal_acc_no,sbal_date," & _
'                         "sbal_month_debit,sbal_month_credit) values (" & Customer_Home_Branch & "," & Cust_Id & "," & _
'                         Account_type & "," & Account_No & ",'" & Format(Clear_Date, "dd-mmm-yyyy") & "',"
'                SQLStr = SQLStr & Months_Debit & "," & Months_Credit & ")"
'                Call Fire_Sql(SQLStr, Recset, SQL_Error, MyClass.Foreign_Connection, Recs_Read, True)
'                If SQL_Error <> 0 Then
                    If Temp_Amount < 0 Then Sqlstr = "update " & MyClass.ForeignDb & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Temp_Amount
                    If Temp_Amount > 0 Then Sqlstr = "update " & MyClass.ForeignDb & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Temp_Amount
                    If Reversal_Entry_Flag >= 1 Then
                        If Temp_Amount < 0 Then Sqlstr = "update " & MyClass.ForeignDb & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Temp_Amount
                        If Temp_Amount > 0 Then Sqlstr = "update " & MyClass.ForeignDb & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Temp_Amount
                    End If
                    Sqlstr = Sqlstr + " where sbal_hbr_code = " & Customer_Home_Branch & " and cust_idno = " & Cust_Id & _
                             " and sbal_acc_type = " & Account_Type & " and sbal_acc_no = " & Account_No & _
                             " and sbal_date = '" & Format(Clear_Date, "dd-mmm-yyyy") & "'"
                    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
                    If Sql_Error <> 0 Then GoTo IO_Error
'                End If
            End If
            
            ' Update Account Master as well
            Sqlstr = "select clear_bal, last_wdrw_date,last_dr_amt,bal_chksum from " & MyClass.ForeignDb & "nsav_account " & _
                    " where br_code = " & Customer_Home_Branch & " and type_code = " & Account_Type & _
                    " and ac_srno = " & Account_No & " and cust_idno = " & Cust_Id
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            If Recset.EOF Then Call MyClass.Display_Message("Account Master Not Found; Customer= " & Cust_Id & " ; A/c Type= " & Account_Type & " Number= " & Account_No, 1)
            If Recset.EOF = False Then
                Db_Clear_Bal = IIf(IsNull(Recset!Clear_bal), 0, Recset!Clear_bal)
                If Clear_Date <= MyClass.Branch_Working_Date Then Db_Clear_Bal = Db_Clear_Bal + Temp_Amt + Temp_Tfr_Commission
                Last_Wd_Date = IIf(IsNull(Recset!Last_Wdrw_Date), #1/1/1920#, Recset!Last_Wdrw_Date)
                Last_WD_Amount = IIf(IsNull(Recset!Last_Dr_Amt), 0, Recset!Last_Dr_Amt)
                If Transaction_Date >= Last_Wd_Date Then
                    Last_Wd_Date = Transaction_Date
                    Last_WD_Amount = 0 - Temp_Amt
                End If
    
                ' Revise the Security Field
'                Checksum_Encrypted = Left$(IIf(IsNull(RecSet!bal_chksum), "", RecSet!bal_chksum) + Space(16), 16)
'                Byte_Var = DeCrypt_Amount(Checksum_Encrypted, Checksum_Plain)
'                Checksum_Plain = Checksum_Plain + Temp_Amt + Temp_Tfr_Commission
'                Checksum_Encrypted = EnCrypt_Amount(Checksum_Plain)
                Checksum_Encrypted = " "
                Sqlstr = "update " & MyClass.ForeignDb & "nsav_account set clear_bal = " & Db_Clear_Bal & _
                         " , last_wdrw_date = '" & Format(Last_Wd_Date, "dd-mmm-yyyy") & "' , " & _
                         " last_dr_amt = " & Last_WD_Amount & ", " & " bal_chksum = '" & Checksum_Encrypted & "' " & _
                         ", last_txn_for_stmt = last_txn_for_stmt + 1" & " where br_code = " & Customer_Home_Branch & _
                         " and type_code = " & Account_Type & " and ac_srno = " & Account_No & _
                         " and cust_idno = " & Cust_Id
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
            End If
           
            ' Insert in Card Simulatneously
            If With_Card_Flag >= 1 Then
                Tran_Data.Cheque_Number = 0
                Tran_Data.Effective_Date = Clear_Date
                Tran_Data.History_Flag = 0
                Tran_Data.Loan_TransferFlag = 0
                Tran_Data.Tr_Amount1 = Temp_Amt
                Tran_Data.Tr_Amount2 = Temp_Tfr_Commission
                Tran_Data.Transacting_Branch = Transacting_Branch
                Tran_Data.Transaction_Code = TC_Transfer_To_Loan
                Tran_Data.Transaction_Date = Transaction_Date
                Tran_Data.Transaction_No = Extra_Trans_Number
                Tran_Data.Transaction_Time = Transaction_Time
                Call Insert_Tran_IN_Pool(Tran_Data)
            End If
            
            HotConfirm_Flag = 1
            HotTrans_Ins_DateTime = Date_Time_Now
            If Ora_Branch = 1 Then
                ' Insert This transaction in HotListed Transactions with confirm_flag as 1 so that if he comes back with card
                ' in my branch and connectivity is missing, I insert this transaction on card
                Sqlstr = "insert into " & MyClass.gUnifyDb & "hotlist_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                         " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,txn_ins_date,txn_ins_time,confirm_flag) values (" & _
                         Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & "," & _
                         Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & _
                         TC_Transfer_To_Loan & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & "," & _
                         Temp_Tfr_Commission & ",0,'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'" & _
                         "," & Format(HotTrans_Ins_DateTime, "HHMM") & ",1)"
            Else
                ' Insert This transaction in HotListed Transactions with confirm_flag as 1 so that if he comes back with card
                ' in my branch and connectivity is missing, I insert this transaction on card
                Sqlstr = "insert into " & MyClass.gUnifyDb & "hotlist_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                         " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,txn_ins_date,txn_ins_time,confirm_flag) values (" & _
                         Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & "," & _
                         Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & _
                         TC_Transfer_To_Loan & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & "," & _
                         Temp_Tfr_Commission & ",0,'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'" & _
                         ",'" & Format(HotTrans_Ins_DateTime, "HH:MM") & "',1)"
            End If
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            ''' Insert Transaction in Export Tables
            If Valid_Card_Holder >= 1 And With_Card_Flag <= 0 Then
                If Ora_Branch = 1 Then
                    Sqlstr = "insert into " & MyClass.ForeignDb & "export_txn_dl (txn_br_code,txn_date,txn_no,txn_hbr_cd," & _
                            "cust_idno,type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type," & _
                            "loan_ac_no,txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                            " " & Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & ", " & _
                            " " & Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ", " & _
                            " '" & TC_Transfer_To_Loan & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & ", " & _
                            " " & Temp_Tfr_Commission & "," & "0" & "," & Loan_AcType & "," & Loan_AcNo & ", " & _
                            " '" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'," & Format(HotTrans_Ins_DateTime, "HHMM") & "" & _
                            "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
                Else
                    Sqlstr = "insert into " & MyClass.ForeignDb & "export_txn_dl (txn_br_code,txn_date,txn_no,txn_hbr_cd," & _
                            "cust_idno,type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type," & _
                            "loan_ac_no,txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                            " " & Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & ", " & _
                            " " & Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ", " & _
                            " '" & TC_Transfer_To_Loan & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & ", " & _
                            " " & Temp_Tfr_Commission & "," & "0" & "," & Loan_AcType & "," & Loan_AcNo & ", " & _
                            " '" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "','" & Format(HotTrans_Ins_DateTime, "HH:MM") & "'" & _
                            "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
                End If
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
                
                If Ora_Branch = 1 Then
                    ' Write in Hourly Export File
                    Sqlstr = "insert into " & MyClass.ForeignDb & "export_txn_hr (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                            " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type,loan_ac_no, " & _
                            " txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                            Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & _
                            "," & Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & _
                            TC_Transfer_To_Loan & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & "," & _
                            Temp_Tfr_Commission & "," & "0" & "," & Loan_AcType & "," & Loan_AcNo & _
                            ",'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'," & Format(HotTrans_Ins_DateTime, "HHMM") & "" & _
                            "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
                
                Else
                    ' Write in Hourly Export File
                    Sqlstr = "insert into " & MyClass.ForeignDb & "export_txn_hr (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                            " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type,loan_ac_no, " & _
                            " txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                            Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & _
                            "," & Customer_Home_Branch & "," & Cust_Id & "," & Account_Type & "," & Account_No & ",'" & _
                            TC_Transfer_To_Loan & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & "," & _
                            Temp_Tfr_Commission & "," & "0" & "," & Loan_AcType & "," & Loan_AcNo & _
                            ",'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "','" & Format(HotTrans_Ins_DateTime, "HH:MM") & "'" & _
                            "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
                End If
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
            End If
        End If
        
    End If
    
    '===========================================================
    'Generate Additional CREDIT Entry for Inter-Account Transfer
    '===========================================================
    If Transaction_Group = 5 And Transaction_Amount <> 0 Then
        GoSub Allot_Trans_Number
        Extra_Trans_Number = Last_Number
        Temp_Amt = 0 - Transaction_Amount
        Temp_Trans_Code = Transfer_Credit_TrCode
        Narration = "Fr. A/c. " + CStr(Cust_Id) + "/" + CStr(Account_Type) + "/" + CStr(Account_No)
        If Ora_Branch = 1 Then
            ' Insert in Transaction table in Customer's Home Branch;
              Sqlstr = "insert into " & MyClass.ForeignDb & "nsav_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                          "type_code,ac_srno,txn_time,txn_code,txn_amt,txn_bnk_chg,txn_refno,txn_clear_date,teller_id," & _
                          "chq_no,bankbr_code,chq_date,post_ind,reversal_flag,txn_delete_flag,trans_ln_type_code, " & _
                          "trans_ln_ac_srno, " & _
                          "card_txn_flag, main_txn_no,cross_cust_idno,cross_type_code ,cross_ac_srno," & _
                          "txn_ins_date,txn_ins_time) values (" & _
                          Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & "," & _
                          Customer_Home_Branch & "," & Trfr_FromTo_Cust & "," & Trfr_AcType & "," & Trfr_AcNo & "," & Str_Trans_Time & ",'" & _
                          Temp_Trans_Code & "'," & Temp_Amt & ",0,'" & Narration & "','" & _
                          Format(Clear_Date, "dd-mmm-yyyy") & "','" & System_Transactions_User_ID & "',0,' ','" & _
                          "01-JAN-1920" & "',0,"
              If Reversal_Entry_Flag <> 2 Then Sqlstr = Sqlstr & Reversal_Status & ",0,"
              ' Delete Flag is to be updated instead of Reversal Flag for REVERSAL PROGRAM entries
              If Reversal_Entry_Flag = 2 Then Sqlstr = Sqlstr & "0," & Reversal_Status & ","
              Sqlstr = Sqlstr & Loan_AcType & "," & Loan_AcNo & "," & _
                          With_Card_Flag & "," & Main_Transaction_No & "," & Cust_Id & "," & Account_Type & "," & _
                          Account_No & ",'" & Format(Date_Time_Now, "dd-mmm-yyyy") & "'," & Format(Date_Time_Now, "HHMM") & ")"
        Else
            ' Insert in Transaction table in Customer's Home Branch;
              Sqlstr = "insert into " & MyClass.ForeignDb & "nsav_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                          "type_code,ac_srno,txn_time,txn_code,txn_amt,txn_bnk_chg,txn_refno,txn_clear_date,teller_id," & _
                          "chq_no,bankbr_code,chq_date,post_ind,reversal_flag,txn_delete_flag,trans_ln_type_code, " & _
                          "trans_ln_ac_srno, " & _
                          "card_txn_flag, main_txn_no,cross_cust_idno,cross_type_code ,cross_ac_srno," & _
                          "txn_ins_date,txn_ins_time) values (" & _
                          Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & "," & _
                          Customer_Home_Branch & "," & Trfr_FromTo_Cust & "," & Trfr_AcType & "," & Trfr_AcNo & ",'" & Str_Trans_Time & "','" & _
                          Temp_Trans_Code & "'," & Temp_Amt & ",0,'" & Narration & "','" & _
                          Format(Clear_Date, "dd-mmm-yyyy") & "','" & System_Transactions_User_ID & "',0,' ','" & _
                          "01-JAN-1920" & "',0,"
              If Reversal_Entry_Flag <> 2 Then Sqlstr = Sqlstr & Reversal_Status & ",0,"
              ' Delete Flag is to be updated instead of Reversal Flag for REVERSAL PROGRAM entries
              If Reversal_Entry_Flag = 2 Then Sqlstr = Sqlstr & "0," & Reversal_Status & ","
              Sqlstr = Sqlstr & Loan_AcType & "," & Loan_AcNo & "," & _
                          With_Card_Flag & "," & Main_Transaction_No & "," & Cust_Id & "," & Account_Type & "," & _
                          Account_No & ",'" & Format(Date_Time_Now, "dd-mmm-yyyy") & "','" & Format(Date_Time_Now, "HH:MM") & "')"
        End If
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        
        
        'post in export_atm_txn table
        If ATM_Implemented_Flag > 0 Then
            ATM_Ac_No = Make_ATM_AcNo(Customer_Home_Branch, Trfr_FromTo_Cust, Trfr_AcType, Trfr_AcNo)
            Sqlstr = "select ffbs_acno from " & MyClass.ForeignDb & "atm_register where ffbs_acno = '" & ATM_Ac_No & " and post_flag >=1 "
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            If Recset.EOF = False Then
                Sqlstr = "insert into " & MyClass.ForeignDb & "export_atm_txn(txn_br_code,txn_date,txn_no,txn_time,txn_clear_date," & _
                        "ffbs_acno,txn_amt,txn_code,txn_desc,clear_bal,withdral_bal,status_flag,main_txn) values(" & MyClass.Unit_Code & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & _
                        " " & Transaction_number & "," & Transaction_Time & ",'" & Format(Clear_Date, "dd-mmm-yyyy") & "','" & ATM_Ac_No & "'," & _
                        " " & Temp_Amt & ",'" & Temp_Trans_Code & "','" & Left$(Narration, 15) & "',0,0,0,0)"
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
            End If
        End If
                
        If Ora_Branch = 1 Then
            ' Insert in Foreign Save Transaction table Transactiing Branch
            Sqlstr = "insert into " & MyClass.gUnifyDb & "foreign_sav_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                        "type_code,ac_srno,txn_time,txn_code,txn_amt,txn_bnk_chg,txn_refno,txn_clear_date,teller_id," & _
                        "chq_no,bankbr_code,chq_date,post_ind,reversal_flag,txn_delete_flag,trans_ln_type_code, trans_ln_ac_srno, " & _
                        "card_txn_flag, main_txn_no,card_no,ac_categ) values (" & _
                        Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Transaction_number & "," & _
                        Customer_Home_Branch & "," & Trfr_FromTo_Cust & "," & Trfr_AcType & "," & Trfr_AcNo & "," & Str_Trans_Time & ",'" & _
                        Transaction_Code & "'," & Temp_Amt & ",0,'" & Narration & "','" & _
                        Format(Clear_Date, "dd-mmm-yyyy") & "','" & Teller_Id & "',0,' ','" & _
                        "01-JAN-1920" & "',0,"
            If Reversal_Entry_Flag <> 2 Then Sqlstr = Sqlstr & Reversal_Status & ",0,"
            ' Delete Flag is to be updated instead of Reversal Flag for REVERSAL PROGRAM entries
            If Reversal_Entry_Flag = 2 Then Sqlstr = Sqlstr & "0," & Reversal_Status & ","
            Sqlstr = Sqlstr & "0,0," & With_Card_Flag & "," & Main_Transaction_No & "," & Card_Number & ",'" & Account_Categ & "')"
        Else
            ' Insert in Foreign Save Transaction table Transactiing Branch
            Sqlstr = "insert into " & MyClass.gUnifyDb & "foreign_sav_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                        "type_code,ac_srno,txn_time,txn_code,txn_amt,txn_bnk_chg,txn_refno,txn_clear_date,teller_id," & _
                        "chq_no,bankbr_code,chq_date,post_ind,reversal_flag,txn_delete_flag,trans_ln_type_code, trans_ln_ac_srno, " & _
                        "card_txn_flag, main_txn_no,card_no,ac_categ) values (" & _
                        Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Transaction_number & "," & _
                        Customer_Home_Branch & "," & Trfr_FromTo_Cust & "," & Trfr_AcType & "," & Trfr_AcNo & ",'" & Str_Trans_Time & "','" & _
                        Transaction_Code & "'," & Temp_Amt & ",0,'" & Narration & "','" & _
                        Format(Clear_Date, "dd-mmm-yyyy") & "','" & Teller_Id & "',0,' ','" & _
                        "01-JAN-1920" & "',0,"
            If Reversal_Entry_Flag <> 2 Then Sqlstr = Sqlstr & Reversal_Status & ",0,"
            ' Delete Flag is to be updated instead of Reversal Flag for REVERSAL PROGRAM entries
            If Reversal_Entry_Flag = 2 Then Sqlstr = Sqlstr & "0," & Reversal_Status & ","
            Sqlstr = Sqlstr & "0,0," & With_Card_Flag & "," & Main_Transaction_No & "," & Card_Number & ",'" & Account_Categ & "')"
        End If
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        
        
        ' Now Update SBalRec if Home Branch Customer
        If Temp_Amt <> 0 Then
'            SQLStr = " select sbal_month_debit,sbal_month_credit " & _
'                     " from " & MyClass.ForeignDb & "sbal_rec " & _
'                     " where sbal_hbr_code = " & Customer_Home_Branch & " and " & _
'                           " cust_idno = " & Trfr_FromTo_Cust & " and " & _
'                           " sbal_acc_type = " & Trfr_AcType & " and " & _
'                           " sbal_acc_no = " & Trfr_AcNo & " and " & _
'                           " sbal_date = '" & Format(Clear_Date, "dd-mmm-yyyy") & "'"
'            Call Fire_Sql(SQLStr, Recset, SQL_Error, MyClass.Foreign_Connection, Recs_Read)
'            If SQL_Error <> 0 Then GoTo IO_Error
'            If Recset.EOF Then
            Months_Debit = 0
            Months_Credit = 0
            If Reversal_Entry_Flag <= 0 Then
                If Temp_Amount < 0 Then Months_Debit = 0 - Temp_Amount
                If Temp_Amount > 0 Then Months_Credit = Temp_Amount
            Else
                If Temp_Amount < 0 Then Months_Credit = Temp_Amount
                If Temp_Amount > 0 Then Months_Debit = 0 - Temp_Amount
            End If
            Sqlstr = "insert into " & MyClass.ForeignDb & "sbal_rec(sbal_hbr_code,cust_idno, " & _
                     "sbal_acc_type,sbal_acc_no,sbal_date,sbal_month_debit," & _
                     "sbal_month_credit) values (" & _
                     " " & Customer_Home_Branch & "," & Trfr_FromTo_Cust & ", " & _
                     " " & Trfr_AcType & "," & Trfr_AcNo & ",'" & Format(Clear_Date, "dd-mmm-yyyy") & "',"
            Sqlstr = Sqlstr & Months_Debit & "," & Months_Credit & ")"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read, True)
            If Sql_Error <> 0 Then
                If Temp_Amt < 0 Then Sqlstr = "update " & MyClass.ForeignDb & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Temp_Amt
                If Temp_Amt > 0 Then Sqlstr = "update " & MyClass.ForeignDb & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Temp_Amt
                If Reversal_Entry_Flag >= 1 Then
                    If Temp_Amt < 0 Then Sqlstr = "update " & MyClass.ForeignDb & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Temp_Amt
                    If Temp_Amt > 0 Then Sqlstr = "update " & MyClass.ForeignDb & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Temp_Amt
                End If
                Sqlstr = Sqlstr + " where sbal_hbr_code = " & Customer_Home_Branch & " and cust_idno = " & Trfr_FromTo_Cust & " and sbal_acc_type = " & Trfr_AcType & _
                         " and sbal_acc_no = " & Trfr_AcNo & " and sbal_date = '" & Format(Clear_Date, "dd-mmm-yyyy") & "'"
                Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
            End If
        End If
        
        ' Update Account Master as well ; WITH or WITHOUT card
        Sqlstr = "select clear_bal,last_wdrw_date,last_cr_date,last_cr_amt," & _
                 "last_dr_amt,last_cr_refno,bal_chksum from " & MyClass.ForeignDb & "nsav_account " & _
                 " where br_code = " & Customer_Home_Branch & " and type_code = " & Trfr_AcType & _
                 " and ac_srno = " & Trfr_AcNo & " and cust_idno = " & Trfr_FromTo_Cust
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        If Recset.EOF = True Then Call MyClass.Display_Message("Account Master Not Found; Customer= " & Trfr_FromTo_Cust & " ; A/c Type= " & Trfr_AcType & " Number= " & Trfr_AcNo, 1)
        If Recset.EOF = False Then
            Db_Clear_Bal = IIf(IsNull(Recset!Clear_bal), 0, Recset!Clear_bal)
            If Clear_Date <= MyClass.Branch_Working_Date Then Db_Clear_Bal = Db_Clear_Bal + Temp_Amt
            Last_Cr_Date = IIf(IsNull(Recset!Last_Cr_Date), #1/1/1920#, Recset!Last_Cr_Date)
            Last_CR_Amount = IIf(IsNull(Recset!Last_Cr_Amt), 0, Recset!Last_Cr_Amt)
            Last_Cr_Narration = IIf(IsNull(Recset!Last_Cr_RefNo), "", Recset!Last_Cr_RefNo)
            If Clear_Date <= MyClass.Branch_Working_Date And Clear_Date >= Last_Cr_Date Then
                Last_Cr_Date = Transaction_Date
                Last_CR_Amount = Temp_Amt
                Last_Cr_Narration = Left$(Narration, 15)
            End If
             ' Revise the Security Field
'            Checksum_Encrypted = Left$(IIf(IsNull(RecSet!bal_chksum), "", RecSet!bal_chksum) + Space(16), 16)
'            Byte_Var = DeCrypt_Amount(Checksum_Encrypted, Checksum_Plain)
'            Checksum_Plain = Checksum_Plain + Temp_Amt
'            Checksum_Encrypted = EnCrypt_Amount(Checksum_Plain)
            Checksum_Encrypted = " "
            Sqlstr = "update " & MyClass.ForeignDb & "nsav_account set clear_bal = " & Db_Clear_Bal & ", " & _
                             "last_cr_date = '" & Format(Last_Cr_Date, "dd-mmm-yyyy") & "' , " & _
                             "last_cr_amt = " & Last_CR_Amount & "," & "last_cr_refno='" & Last_Cr_Narration & "', " & _
                             "last_log_date='" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "', " & _
                             "bal_chksum = '" & Checksum_Encrypted & "'" & ", last_txn_for_stmt = last_txn_for_stmt + 1" & _
                            " where br_code = " & Customer_Home_Branch & " and type_code = " & Trfr_AcType & _
                            " and ac_srno = " & Trfr_AcNo & " and cust_idno = " & Trfr_FromTo_Cust
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
        
        ' Insert Record in Hotlisted Transactions Table for Alien Transferee
        ' Insert This transaction in HotListed Transactions with confirm flag as 0 and Exit Sub
        Valid_Card_Holder = Find_Valid_CardHolder(Customer_Home_Branch, Trfr_FromTo_Cust, Trfr_AcType, Trfr_AcNo)
        If Valid_Card_Holder >= 1 Then
            HotConfirm_Flag = 1
            HotTrans_Ins_DateTime = Date_Time_Now
            If Ora_Branch = 1 Then
                Sqlstr = "insert into " & MyClass.gUnifyDb & "hotlist_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                         " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no," & _
                         " txn_ins_date,txn_ins_time,confirm_flag) values (" & _
                         Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & "," & _
                         Customer_Home_Branch & "," & Trfr_FromTo_Cust & "," & Trfr_AcType & "," & Trfr_AcNo & ",'" & _
                         Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & _
                         ",0,0,'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'," & Format(HotTrans_Ins_DateTime, "HHMM") & ",1)"
            Else
                Sqlstr = "insert into " & MyClass.gUnifyDb & "hotlist_txn (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                         " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no," & _
                         " txn_ins_date,txn_ins_time,confirm_flag) values (" & _
                         Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & "," & _
                         Customer_Home_Branch & "," & Trfr_FromTo_Cust & "," & Trfr_AcType & "," & Trfr_AcNo & ",'" & _
                         Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & _
                         ",0,0,'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "','" & Format(HotTrans_Ins_DateTime, "HH:MM") & "',1)"
            End If
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        
            ' Insert Records in Export File for Hotlisting Transactions for CREDIT Entry because it is WITHOUT card trans;
            ' Is the Receiver a Valid card Holder
            If Ora_Branch = 1 Then
                Sqlstr = "insert into " & MyClass.ForeignDb & "export_txn_dl (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                        " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type,loan_ac_no, " & _
                        " txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                        Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & _
                        "," & Customer_Home_Branch & "," & Trfr_FromTo_Cust & "," & Trfr_AcType & "," & Trfr_AcNo & ",'" & _
                        Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & "," & _
                        "0,0,0,0,'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'," & Format(HotTrans_Ins_DateTime, "HHMM") & "" & _
                        "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
            Else
                Sqlstr = "insert into " & MyClass.ForeignDb & "export_txn_dl (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                        " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type,loan_ac_no, " & _
                        " txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                        Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & _
                        "," & Customer_Home_Branch & "," & Trfr_FromTo_Cust & "," & Trfr_AcType & "," & Trfr_AcNo & ",'" & _
                        Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & "," & _
                        "0,0,0,0,'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "','" & Format(HotTrans_Ins_DateTime, "HH:MM") & "'" & _
                        "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
            End If
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            ' Write in Hourly Export File
            If Ora_Branch = 1 Then
                Sqlstr = "insert into " & MyClass.ForeignDb & "export_txn_hr (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                        " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type,loan_ac_no, " & _
                        " txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                        Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & _
                        "," & Customer_Home_Branch & "," & Trfr_FromTo_Cust & "," & Trfr_AcType & "," & Trfr_AcNo & ",'" & _
                        Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & "," & _
                        "0,0,0,0,'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "'," & Format(HotTrans_Ins_DateTime, "HHMM") & "" & _
                        "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
            Else
                Sqlstr = "insert into " & MyClass.ForeignDb & "export_txn_hr (txn_br_code,txn_date,txn_no,txn_hbr_cd,cust_idno," & _
                        " type_code,ac_srno,txn_code,txn_clear_date,txn_amt,txn_bnk_chg,chq_no,loan_ac_type,loan_ac_no, " & _
                        " txn_ins_date,txn_ins_time,confirm_flag,card_txn_flag ) values (" & _
                        Transacting_Branch & ",'" & Format(Transaction_Date, "dd-mmm-yyyy") & "'," & Extra_Trans_Number & _
                        "," & Customer_Home_Branch & "," & Trfr_FromTo_Cust & "," & Trfr_AcType & "," & Trfr_AcNo & ",'" & _
                        Transaction_Code & "','" & Format(Clear_Date, "dd-mmm-yyyy") & "'," & Temp_Amt & "," & _
                        "0,0,0,0,'" & Format(HotTrans_Ins_DateTime, "dd-mmm-yyyy") & "','" & Format(HotTrans_Ins_DateTime, "HH:MM") & "'" & _
                        "," & HotConfirm_Flag & "," & With_Card_Flag & ")"
            End If
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Foreign_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
    End If
    
    ' Everything Done. Return Gracefully now.
    Exit Sub

Find_Transaction_Group:

    If Transaction_Code = Prev_Txn_Code Then
        Transaction_Group = Prev_Tran_Group
        Return
    End If
    Sqlstr = "select txn_group from " & MyClass.gUnifyDb & "txn_type where txn_code = '" & Transaction_Code & "'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    Transaction_Group = 6
    If Recset.EOF = False Then Transaction_Group = IIf(IsNull(Recset!Txn_Group), 6, Recset!Txn_Group)
    '==========================================Original Statements
'    Transaction_Group = 0
'    If Not Recset.EOF Then Transaction_Group = IIf(IsNull(Recset!Txn_Group), 0, Recset!Txn_Group)
'    If Transaction_Group = 0 Then
'        Call MyClass.Display_Message("Transaction Record NOT Defined for Transaction Code = " & Transaction_Code, 1)
'        Call Abort_Program(, "mylibclass\Post_Alien_Transaction_Txn_Group")
'        Return
'    End If
    '==================================================================
    If Transaction_Group > 7 Then
        Call MyClass.Display_Message("Invalid Transaction Group Defined for Transaction Code = " & Transaction_Code, 1)
        Transaction_Group = 0
        Return
    End If
    Prev_Txn_Code = Transaction_Code
    Prev_Tran_Group = Transaction_Group
    Return
    
Allot_Trans_Number:

    Sqlstr = "update " & MyClass.gUnifyDb & "aks_parameter set par_no = par_no + 1 where par_key = 'TXN_NO'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    
    Sqlstr = "select par_no from " & MyClass.gUnifyDb & "aks_parameter where par_key = 'TXN_NO'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    Last_Number = 0
    If Not Recset.EOF Then Last_Number = Recset!Par_No
    
    Sqlstr = "select cust_idno from " & MyClass.gUnifyDb & "nsav_txn where txn_br_code = " & Transacting_Branch & " and " & _
            " txn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "' and txn_no = " & Last_Number
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    If Recset.EOF = False Then GoTo Allot_Trans_Number

    Sqlstr = "select cust_idno from " & MyClass.gUnifyDb & "foreign_sav_txn where txn_br_code = " & Transacting_Branch & " and " & _
            " txn_date = '" & Format(Transaction_Date, "dd-mmm-yyyy") & "' and txn_no = " & Last_Number
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    If Recset.EOF = False Then GoTo Allot_Trans_Number
    Return
    
IO_Error:

    strVar = Sqlstr
    MsgBox "Post Alien Transaction"
    Err_Flag = 1
    'Call MyClass.Display_Message("SQL I/O Error in Post_Tran/Post_Alien_Transaction", 1)
    Exit Sub
End Sub

Public Sub Calculate_BankCharge(ByVal Trans_Code As String, ByVal Account_Type As Integer, _
                                ByVal Category As String, ByVal Trans_Amt As Currency, _
                                ByVal Balance_After_Transaction As Currency, ByRef Bank_Charge As Currency)

Dim Amt_Flag As Byte, rs_RecSet As New ADODB.Recordset
Dim RoundedAmt As Currency, Min_Charge As Currency, Max_Charge As Currency, Comm_Rate As Currency
Dim BCharges_Rounding_Paise As Long
Dim SqlStrA As String, SqlStrB As String, SqlStrC As String, Sqlstr As String

    'This procedure returns BankCharges
    ' Transaction Amount is to be sent as ZERO to this routine, in cases where there is no Transaction Taking Place e.g. Ledger Fee, LIF, Below Block Charges
    ' In case where Balance is not relevant e.g. LOANS cases, you can send the balance as ZERO
    
    Bank_Charge = 0
    
    ' Hard Coded NO Bank Charges on cash Deposits
    If Trans_Code = "CAD" Then Exit Sub
    
    ' Treat Absolute Value of Transaction Amount
    If Trans_Amt < 0 Then Trans_Amt = 0 - Trans_Amt
    If Len(Trim$(Category)) > 0 Then Category = Pad(Category, 2, 0)
    
'    Transaction Code    S   3
'    Applicable to which Account Type    N   3           0 : Applicable to customer else actual a/c type
'    Applicable to which Account Category    S   2           Normal/Staff; BLANK implies All Categories
'    Applicable for Balance Amount Below N   10+2                0 means applicable to ALL Balances (Do NOT Consider Balance )
'    Applicable for Transaction Amount Above N   10+2            0 means applicable to everybody (Do Not Bother about Transaction Amount)
'    Percentage or Fixed amount to be charged    N   1           0=Fixed Amount; 1=% of Transaction Amount; 2=% of Balance
'    Commission rate (%) or amount   N   10+2
'    Minimum Commission Charges  N   10+2
'    Maximum Commission Charges  N   10+2
    
    SqlStrA = " select bcc_bal_amt,bcc_txn_amt,bcc_amt_flag,bcc_com_rate,bcc_min_com_chg,bcc_max_com_chg from " & _
                MyClass.gUnifyDb & "bank_comm_chg where " & _
                "bcc_txn_code='" & Trans_Code & "' and  bcc_br_code = " & MyClass.Unit_Code & " and bcc_ac_type = " & Account_Type & " and "
    SqlStrB = "bcc_ac_categ ='" & Category & "'"
    SqlStrC = ""
    If Balance_After_Transaction <> 0 Then SqlStrC = " and (bcc_bal_amt > " & Format(Balance_After_Transaction, "0.00") & " or bcc_bal_amt = 0 ) "
    If Trans_Amt <> 0 Then SqlStrC = SqlStrC + " and (bcc_txn_amt < " & Format(Trans_Amt, "0.00") & " or bcc_txn_amt = 0 ) "
    SqlStrC = SqlStrC + " order by  bcc_bal_amt asc, bcc_txn_amt desc "
    Sqlstr = SqlStrA + SqlStrB + SqlStrC
    Call Fire_Sql(Sqlstr, rs_RecSet, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Calculate_BankCharge_1")
    If Not rs_RecSet.EOF Then GoTo Do_Calculations
    
    ' Treat Category as BLANK and then Try
    SqlStrB = "bcc_ac_categ like ' %'"
    Sqlstr = SqlStrA + SqlStrB + SqlStrC
    Call Fire_Sql(Sqlstr, rs_RecSet, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Calculate_BankCharge_2")
    If Not rs_RecSet.EOF Then GoTo Do_Calculations
    
    Account_Type = 0
    SqlStrA = " select bcc_bal_amt,bcc_txn_amt,bcc_amt_flag,bcc_com_rate,bcc_min_com_chg,bcc_max_com_chg from " & _
                MyClass.gUnifyDb & "bank_comm_chg where " & _
                "bcc_txn_code='" & Trans_Code & "' and  Bcc_br_code = " & MyClass.Unit_Code & " and bcc_ac_type = " & Account_Type & " and "
    Sqlstr = SqlStrA + SqlStrB + SqlStrC
    Call Fire_Sql(Sqlstr, rs_RecSet, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Calculate_BankCharge_3")
    
    If rs_RecSet.EOF = True Then
        Bank_Charge = 0
        Exit Sub
    End If

Do_Calculations:
        
    Amt_Flag = IIf(IsNull(rs_RecSet!bcc_amt_flag), 0, rs_RecSet!bcc_amt_flag)
    Min_Charge = IIf(IsNull(rs_RecSet!bcc_min_com_chg), 0, rs_RecSet!bcc_min_com_chg)
    Max_Charge = IIf(IsNull(rs_RecSet!bcc_max_com_chg), 0, rs_RecSet!bcc_max_com_chg)
    If Max_Charge = 0 Then Max_Charge = 9999999999.99
    Comm_Rate = IIf(IsNull(rs_RecSet!bcc_com_rate), 0, rs_RecSet!bcc_com_rate)
    
    ' Assume Bank Charge is ABSOLUTE Amount
    Bank_Charge = Comm_Rate
    
    ' Is Bank Charge a % of Transaction Amount ?
    If Amt_Flag = 1 Then Bank_Charge = Comm_Rate * Trans_Amt / 100
    
    ' Is Bank Charge a % of New Balance
    If Amt_Flag >= 2 Then Bank_Charge = Comm_Rate * Balance_After_Transaction / 100
    If Amt_Flag >= 1 Then
        If Bank_Charge < Min_Charge Then Bank_Charge = Min_Charge
        If Bank_Charge > Max_Charge Then Bank_Charge = Max_Charge
    End If
    
    '' For rounding of to nearest paise
    BCharges_Rounding_Paise = 5
    If BCharges_Rounding_Paise = 0 And Amt_Flag <> 0 Then
        Call Get_Loan_Parameter("ROUND_INT", BCharges_Rounding_Paise)
        If BCharges_Rounding_Paise = 0 Then BCharges_Rounding_Paise = 5
    End If
    Call round_off_amt(Bank_Charge, BCharges_Rounding_Paise, RoundedAmt)
    Bank_Charge = RoundedAmt
    Exit Sub
End Sub
Public Sub Get_Loan_Parameter(ByVal Parm_Key As String, ByRef Par_value As Long)
Dim Sqlstr As String, tRecSet As New ADODB.Recordset, ParamKey As String * 10

    ParamKey = Trim$(Parm_Key)
    Sqlstr = "select par_no from " & MyClass.gUnifyDb & "parameter where par_key = '" & ParamKey & "' "
    Call Fire_Sql(Sqlstr, tRecSet, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_Loan_Parameter_1")
    Par_value = 0
    If Not tRecSet.EOF Then Par_value = IIf(IsNull(tRecSet!Par_No), 0, tRecSet!Par_No)
    Exit Sub
End Sub

Public Sub Post_Loan_Payment(ByVal BranchCode As Integer, ByVal AcntType As Integer, _
                            ByVal AcntNumber As Long, ByVal Payment_Txn_Code As String, _
                            ByVal Payment_Date As Date, ByVal Payment_Amt As Currency, _
                            ByVal Update_Flag As Byte, ByVal Narration As String, _
                            ByRef Amt_Accepted As Currency, ByRef Loan_Txn_No As Long)
                            
Dim Princ_Adjusted As Currency, Cap_Int_Adj As Currency
Dim Cap_Charges_Adj As Currency, Uncap_Int_Adj As Currency, UnCap_Charges_Adj As Currency
Dim Left_Over_Amt As Currency

    Princ_Adjusted = 0
    Cap_Int_Adj = 0
    Cap_Charges_Adj = 0
    Uncap_Int_Adj = 0
    UnCap_Charges_Adj = 0
    Amt_Accepted = 0
    
    Loan_Txn_No = 0
    Call Post_Payment_In_Loan(BranchCode, AcntType, AcntNumber, Payment_Txn_Code, _
                            Payment_Date, Payment_Amt, Princ_Adjusted, Cap_Int_Adj, Cap_Charges_Adj, Uncap_Int_Adj, _
                            UnCap_Charges_Adj, Left_Over_Amt, Update_Flag, Narration, Loan_Txn_No)
    Amt_Accepted = Payment_Amt - Left_Over_Amt
    Exit Sub
End Sub

Public Sub Post_Payment_In_Loan(ByVal BranchCode As Integer, ByVal AcntType As Integer, _
                            ByVal AcntNumber As Long, ByVal Payment_Txn_Code As String, _
                            ByVal Payment_Date As Date, ByVal Pay_Amt As Currency, _
                            ByRef Princ_Adjusted As Currency, ByRef Cap_Int_Adj As Currency, _
                            ByRef Cap_Charges_Adj As Currency, ByRef Uncap_Int_Adj As Currency, _
                            ByRef UnCap_Charges_Adj As Currency, ByRef Left_Over_Amt As Currency, _
                            ByVal Update_Flag As Byte, ByVal Narrat As String, ByRef Loan_Txn_No As Long)
                            
'This procedure returns Payment Breakup Values
'Principal Adjusted,Capitalised Interest Adjusted,Capitalised Charges Adjusted
'Uncapitalised Interest Adjusted,Uncapitalised Charges Adjusted & Left Over Amount
'if update flag =0 then not to Append/Update Records
'   update flag =1 then Append/Update Records in Database

Dim Sqlstr As String, Opg_Bal(5) As Currency, Last_Int_Date As Date, Byte_Flag As Byte
Dim Int_Till_Today As Currency, Capitalised_Balance As Currency, Temp_Amt As Currency
Dim Int_From_Date As Date, Int_Till_Date As Date, Txn_Amt As Currency, Monthly_Ledger_Fee As Currency
Dim Loan_Closing_Fees As Currency, Orig_Principal As Currency

Dim Cap_Int_Recovered As Currency, Cap_Charges_Recovered As Currency
Dim Uncap_Int_Unrecovered As Currency, Uncap_Charges_Unrecovered As Currency
Dim Principal_Recovered As Currency, Total_Int_Recovered As Currency
Dim Upd_Recset As New ADODB.Recordset
Dim Txn_No As Long, Trans_Date As Date, Sacrifice_Closing_fee As Byte, Sacrifice_Last_Ledger_Fee As Byte
Dim Remaining_Principal As Currency, Loan_Category As String
Dim Loan_Close_Amt_Limit As Long, NewRec_Type As Byte, Close_Loan_Now As Byte
Dim Int_Type As Byte, Minimum_Closing_Recovery As Currency
Dim Base_Code As Integer, Adnl_Rate As Currency, Categ_Code As String
Dim Pre_Payment_Charges As Currency, Maturity_Date As Date, Pre_Pay_Rate As Currency
Dim Temp_Balance As Currency, Temp_Interest As Currency, Funds_Available_For_Recovery As Currency
Dim Recovery_From_Payment As Currency, Recovery_From_Account As Currency
Dim Transfer_To_Savings As Currency, Recovery_From_Savings As Currency
Dim Savings_Funds_Available As Currency
Dim Recset As New ADODB.Recordset
' Variables for Deduction from Savings Recovery
Dim Sav_Princ_Adj As Currency, Sav_Cap_int_Adj As Currency, Sav_Cap_Charges_Adj As Currency, Sav_UnCap_int_Adj As Currency
Dim Sav_UnCap_Charges_Adj As Currency, Sav_Ledger_Fees_Adj As Currency

' Variables for Savings Account Data of This Loan Customer
Dim Clear_bal As Currency, UnClear_bal As Currency, Block_Amt As Currency, Sav_Cust_ID As Long, Sav_Acnt_Type As Integer, Sav_Acnt_No As Long, Sav_Txn_No As Long, Sav_Acnt_Categ As String
Dim Integer_Flag As Integer, Closing_Recovery As Currency
Dim lm_int_cap As Currency, lm_bnk_cap As Currency
Dim LTran_Recset As New ADODB.Recordset
Dim Lrepay_Princ As Currency, Lrepay_Interest As Currency, Lrepay_Ledger_Fee As Currency
Dim Lrepay_Installment_Amt As Currency, Amt_Adjusted As Currency
Dim Tot_Princ_Adjust As Currency, Tot_Interest_Adjust As Currency, Tot_Ledger_Adjust As Currency
Dim Ora_Branch As Byte

On Error GoTo IO_Error:
    
    ' Depending on Policy Decision by FFBS Credit Manager, the following 2 variables can be set to 1
    Sacrifice_Closing_fee = 0
    Sacrifice_Last_Ledger_Fee = 0
    
    ' Int_Type 1 = Flat Rated Loan
    ' This function is not supposed to take care of Payment Reversals i.e. Where Payment Amount
    ' is NEGATIVE. For that Purpose we have got a separate function Reverse_Loan_Payment
    Loan_Txn_No = 0
    Left_Over_Amt = Pay_Amt
    
    Princ_Adjusted = 0
    Cap_Int_Adj = 0
    Cap_Charges_Adj = 0
    Uncap_Int_Adj = 0
    UnCap_Charges_Adj = 0
    
    Sav_Princ_Adj = 0
    Sav_Cap_int_Adj = 0
    Sav_Cap_Charges_Adj = 0
    Sav_UnCap_int_Adj = 0
    Sav_UnCap_Charges_Adj = 0
    Sav_Ledger_Fees_Adj = 0
    
    Recovery_From_Account = 0
    Recovery_From_Payment = 0
    
    ' Set Module Level variables to 0 so that previous values are NOT returned by mistake
    LL_Closing_Fees = 0
    LL_Ledger_Fees = 0
    LL_Pre_Payment_Charges = 0
    
    If Pay_Amt < 0 Then
        Call MyClass.Display_Message("Post Payment Function Called with Negative Amount. Programming Error.", 1)
        End
    End If
    
    If Set_Connection(BranchCode) <> 0 Then Exit Sub
   
    'kunal 19-042007    Checking the oracle flag for the branch to treat the time field accordingly
    Ora_Branch = 0
    Sqlstr = "select par_no from " & MyClass.ForeignDb & "aks_parameter where par_key = 'ORA_BR'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Post_Payment_in_Loan_0")
    If Recset.EOF = False Then Ora_Branch = IIf(IsNull(Recset!Par_No), 0, Recset!Par_No)

    ' Get Loan Category from Loan Master
    Sqlstr = "select lm_category,lm_addnl_int_rate,lm_disb_amt,lm_maturity_date from " & UseDbPrefix & "laccounts "
    Sqlstr = Sqlstr + " where lm_hbr_cd = " & BranchCode & " and lm_type_code = " & AcntType & " and lm_ac_srno = " & AcntNumber
    Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Post_Payment_in_Loan_1")
    If Upd_Recset.EOF Then Exit Sub
    
    Categ_Code = Trim$(IIf(IsNull(Upd_Recset!lm_category), "", Upd_Recset!lm_category))
    Adnl_Rate = IIf(IsNull(Upd_Recset!lm_addnl_int_rate), 0, Upd_Recset!lm_addnl_int_rate)
    Orig_Principal = IIf(IsNull(Upd_Recset!lm_disb_amt), 0, Upd_Recset!lm_disb_amt)
    Maturity_Date = IIf(IsNull(Upd_Recset!lm_maturity_date), Payment_Date, Upd_Recset!lm_maturity_date)
    Call Find_Loan_Int_Rate(Categ_Code, 0, 0, Int_Type, Base_Code)
    
    'Get Loan Close Amount Limit
    Loan_Close_Amt_Limit = 0
    If AcntType < Loan_Type_For_SalAdv Then Loan_Close_Amt_Limit = Get_Loan_Close_Limit()
    If Loan_Close_Amt_Limit < 0 Then Loan_Close_Amt_Limit = 0
   
    Recovery_From_Savings = 0
    Transfer_To_Savings = 0
    Close_Loan_Now = 0
    
    'Get Closing Balances as on payment date i.e. Closing Balance as on Payment Date
    Call Bank_Loan_Open(BranchCode, AcntType, AcntNumber, Payment_Date + 1, Payment_Date + 1, Opg_Bal(), Last_Int_Date, Byte_Flag)
    If Byte_Flag <> 0 Then GoTo Error_Case

    ' Now Find Capitalised Amount For Interest Calculation
    Capitalised_Balance = Opg_Bal(1) + Opg_Bal(2) + Opg_Bal(3)
    ' Incase of Normal Loans Skip Loan Adjustment Processing
    If Int_Type = 0 Then GoTo Normal_Processing
     
Flat_Rated_Processing:

    '************************************************************************************
    ' Flat rated Loans Recovery Logic
    'First we have to recover ALL unrecovered installments
    '************************************************************************************
    Sqlstr = "select pay_install_amt,pay_principal_amt,pay_interest_amt from " & UseDbPrefix & "lrepay " & _
            " where pay_hbr_cd = " & BranchCode & " and pay_type_code = " & AcntType & " and " & _
            " pay_ac_srno = " & AcntNumber & " and pay_status = 0 order by pay_install_due_date"
    Call Fire_Sql(Sqlstr, LTran_Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Post_payment_in_loan_0A")
    
    Tot_Princ_Adjust = 0
    Tot_Interest_Adjust = 0
    Tot_Ledger_Adjust = 0
    If LTran_Recset.EOF = True Then GoTo Normal_Processing
    Do While LTran_Recset.EOF = False
        If Left_Over_Amt <= 0 Then GoTo Adjustments_Over
        
        Lrepay_Princ = IIf(IsNull(LTran_Recset!pay_principal_amt), 0, LTran_Recset!pay_principal_amt)
        Lrepay_Interest = IIf(IsNull(LTran_Recset!pay_interest_amt), 0, LTran_Recset!pay_interest_amt)
        Lrepay_Installment_Amt = IIf(IsNull(LTran_Recset!Pay_Install_Amt), 0, LTran_Recset!Pay_Install_Amt)
        Lrepay_Ledger_Fee = Lrepay_Installment_Amt - Lrepay_Princ - Lrepay_Interest
        If Lrepay_Ledger_Fee < 0 Then Lrepay_Ledger_Fee = 0
        
        ' Try to Adjust Ledger Fee
        Amt_Adjusted = Lrepay_Ledger_Fee
        If Left_Over_Amt < Amt_Adjusted Then Amt_Adjusted = Left_Over_Amt
        If Amt_Adjusted > 0 Then
            Tot_Ledger_Adjust = Tot_Ledger_Adjust + Amt_Adjusted
            Left_Over_Amt = Left_Over_Amt - Amt_Adjusted
        End If
        ' Try to Adjust Interest
        Amt_Adjusted = Lrepay_Interest
        If Left_Over_Amt < Amt_Adjusted Then Amt_Adjusted = Left_Over_Amt
        If Amt_Adjusted > 0 Then
            Tot_Interest_Adjust = Tot_Interest_Adjust + Amt_Adjusted
            Left_Over_Amt = Left_Over_Amt - Amt_Adjusted
        End If
        ' Try to Adjust Principal
        Amt_Adjusted = Lrepay_Princ
        If Left_Over_Amt < Amt_Adjusted Then Amt_Adjusted = Left_Over_Amt
        If Amt_Adjusted > 0 Then
            Tot_Princ_Adjust = Tot_Princ_Adjust + Amt_Adjusted
            Left_Over_Amt = Left_Over_Amt - Amt_Adjusted
        End If
        LTran_Recset.MoveNext
    Loop

Adjustments_Over:
    
    Temp_Amt = 0
    ' Make sure that Total Ledger Fee adjusted as per Repayment schedule, does not exceed Ledger Fee as per Master
    If Tot_Ledger_Adjust > (Opg_Bal(5) + Opg_Bal(3)) Then
        Temp_Amt = Tot_Ledger_Adjust - Opg_Bal(5) - Opg_Bal(3)
        Tot_Ledger_Adjust = Opg_Bal(5) + Opg_Bal(3)
    End If
    ' Make sure that Total Interest adjusted as per Repayment schedule, does not exceed Interest as per Master
    If Tot_Interest_Adjust > (Opg_Bal(4) + Opg_Bal(2)) Then
        Temp_Amt = Temp_Amt + Tot_Interest_Adjust - Opg_Bal(4) - Opg_Bal(2)
        Tot_Interest_Adjust = Opg_Bal(4) + Opg_Bal(2)
    End If
    Tot_Princ_Adjust = Tot_Princ_Adjust + Temp_Amt
    If Tot_Princ_Adjust > Opg_Bal(1) Then Tot_Princ_Adjust = Opg_Bal(1)
   
    ' Rework out Left Over Amount
    Left_Over_Amt = Pay_Amt - (Tot_Princ_Adjust + Tot_Interest_Adjust + Tot_Ledger_Adjust)
    
    'If payment amount is high amount or payment amount >= total loan balance
    If Pay_Amt = 99999999.99 Or Pay_Amt >= Opg_Bal(0) Then
        If Tot_Ledger_Adjust < (Opg_Bal(5) + Opg_Bal(3)) Then Tot_Ledger_Adjust = Opg_Bal(5) + Opg_Bal(3)
        If Tot_Interest_Adjust < (Opg_Bal(4) + Opg_Bal(2)) Then Tot_Interest_Adjust = Opg_Bal(4) + Opg_Bal(2)
        Tot_Princ_Adjust = Opg_Bal(1)
        Left_Over_Amt = Pay_Amt - (Tot_Princ_Adjust + Tot_Interest_Adjust + Tot_Ledger_Adjust)
    End If
    
    ' If still Left Over Amount is Left Then do What ?
   
    UnCap_Charges_Adj = Tot_Ledger_Adjust
    Cap_Charges_Adj = 0
    Uncap_Int_Adj = Tot_Interest_Adjust
    Cap_Int_Adj = 0
    Princ_Adjusted = Tot_Princ_Adjust
    
    Opg_Bal(5) = Opg_Bal(5) - UnCap_Charges_Adj
    Opg_Bal(3) = Opg_Bal(3) - Cap_Charges_Adj
    Opg_Bal(4) = Opg_Bal(4) - Uncap_Int_Adj
    Opg_Bal(2) = Opg_Bal(2) - Cap_Int_Adj
    Opg_Bal(1) = Opg_Bal(1) - Princ_Adjusted
    GoTo Common_Processing
    
Normal_Processing:

    ' First of all Adjust Unrecovered Uncapitalised Bank Charges
    UnCap_Charges_Adj = Opg_Bal(5)
    If UnCap_Charges_Adj > Left_Over_Amt Then UnCap_Charges_Adj = Left_Over_Amt
    Left_Over_Amt = Left_Over_Amt - UnCap_Charges_Adj
    Opg_Bal(5) = Opg_Bal(5) - UnCap_Charges_Adj
    If Left_Over_Amt <= 0 Then GoTo Common_Processing

    ' Then Adjust Capitalised Bank Charges
    Cap_Charges_Adj = Opg_Bal(3)
    If Cap_Charges_Adj > Left_Over_Amt Then Cap_Charges_Adj = Left_Over_Amt
    Left_Over_Amt = Left_Over_Amt - Cap_Charges_Adj
    Opg_Bal(3) = Opg_Bal(3) - Cap_Charges_Adj
    If Left_Over_Amt <= 0 Then GoTo Common_Processing
    
    ' Next Adjust Unrecovered Uncapitalised Interest
    Uncap_Int_Adj = Opg_Bal(4)
    If Uncap_Int_Adj > Left_Over_Amt Then Uncap_Int_Adj = Left_Over_Amt
    Left_Over_Amt = Left_Over_Amt - Uncap_Int_Adj
    Opg_Bal(4) = Opg_Bal(4) - Uncap_Int_Adj
    If Left_Over_Amt <= 0 Then GoTo Common_Processing

    ' Next Adjust UnCapitalised Interest Till Today
    ''' Capitalised_Balance = Opg_Bal(1) + Opg_Bal(2) + Opg_Bal(3)
    Int_Till_Today = 0
    If Int_Type = 0 Then
        If Last_Int_Date < Payment_Date - 1 Then
            Int_From_Date = Last_Int_Date + 1
            Int_Till_Date = Payment_Date - 1
            If Last_Int_Date < Payment_Date - 1 And AcntType < Loan_Type_For_SalAdv Then
                Call Debit_Interest(BranchCode, AcntType, AcntNumber, Int_Type, Base_Code, _
                    Adnl_Rate, Capitalised_Balance, Int_From_Date, Int_Till_Date, Update_Flag, Int_Till_Today)
                Last_Int_Date = Payment_Date - 1
                Opg_Bal(4) = Opg_Bal(4) + Int_Till_Today
            End If
        End If
    
        'Adjust Interest Till Today
        If Int_Till_Today > 0 Then
            Temp_Amt = Int_Till_Today
            If Temp_Amt > Left_Over_Amt Then Temp_Amt = Left_Over_Amt
            Left_Over_Amt = Left_Over_Amt - Temp_Amt
            Uncap_Int_Adj = Uncap_Int_Adj + Temp_Amt
            Opg_Bal(4) = Opg_Bal(4) - Temp_Amt
            If Left_Over_Amt <= 0 Then GoTo Common_Processing
        End If
    End If
    
    ' Next Adjust Capitalised Interest
    Cap_Int_Adj = Opg_Bal(2)
    If Cap_Int_Adj > Left_Over_Amt Then Cap_Int_Adj = Left_Over_Amt
    Left_Over_Amt = Left_Over_Amt - Cap_Int_Adj
    Opg_Bal(2) = Opg_Bal(2) - Cap_Int_Adj
    If Left_Over_Amt <= 0 Then GoTo Common_Processing

    ' Next Adjust Principal
    Princ_Adjusted = Opg_Bal(1)
    If Princ_Adjusted > Left_Over_Amt Then Princ_Adjusted = Left_Over_Amt
    Left_Over_Amt = Left_Over_Amt - Princ_Adjusted
    Opg_Bal(1) = Opg_Bal(1) - Princ_Adjusted
    GoTo Common_Processing
    
Common_Processing:

    If Left_Over_Amt < 0 Then
        Left_Over_Amt = 0
        Call MyClass.Display_Message("NEGATIVE Left_Over_Amt in Post_Payment_In_Loan")
    End If
    Remaining_Principal = Opg_Bal(1) + Opg_Bal(2) + Opg_Bal(3)
    Recovery_From_Savings = 0
    Transfer_To_Savings = 0
    Monthly_Ledger_Fee = 0
    Loan_Closing_Fees = 0
    Pre_Payment_Charges = 0
    Close_Loan_Now = 0
    
    ' Cloase Loan if very little balance is left
    If Opg_Bal(1) + Opg_Bal(2) + Opg_Bal(3) + Opg_Bal(4) + Opg_Bal(5) <= Loan_Close_Amt_Limit Then
        If Payment_Txn_Code <> TL_Write_Off Then
            If Int_Type = 0 Then Call Compute_Loan_Ledger_Fee(BranchCode, AcntType, Categ_Code, Orig_Principal, Monthly_Ledger_Fee)
            If AcntType < Loan_Type_For_SalAdv Then Call Calculate_BankCharge(TC_Loan_Closing_Fee, AcntType, Categ_Code, 0, 0, Loan_Closing_Fees)
        End If
        Call Get_Savings_Bal_Of_Loan_Customer(BranchCode, AcntType, AcntNumber, Clear_bal, UnClear_bal, Block_Amt, Sav_Cust_ID, Sav_Acnt_Type, Sav_Acnt_No, Sav_Acnt_Categ)
        ' Do NOT bother about Block Amount while making Loan recoveries
        Savings_Funds_Available = Clear_bal + UnClear_bal '- Block_Amt
        Funds_Available_For_Recovery = Left_Over_Amt + Savings_Funds_Available
        
        ' Work Out Pre-Payment Charges Here
        If Maturity_Date > MyClass.Branch_Working_Date Then
            ' Get Pre-Payment Rate from Category Master
            Sqlstr = "select pre_pay_chgs from " & UseDbPrefix & "loan_ac_categ where loan_categ = '" & Categ_Code & "' "
            Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            Pre_Pay_Rate = 0
            If Upd_Recset.EOF = False Then Pre_Pay_Rate = IIf(IsNull(Upd_Recset!Pre_Pay_Chgs), 0, Upd_Recset!Pre_Pay_Chgs)
            If Pre_Pay_Rate > 0 Then
                Pre_Payment_Charges = Format((Pre_Pay_Rate * Orig_Principal) / 100, "0.00")
                ' However, ensure that Pre_Payment_Charges do no exceed Full Interest Difference
                ''''' Below 4 Lines Commented by Pankaj as instruction given by AKS
                Temp_Balance = Remaining_Principal
                Call Compute_Loan_Interest(Int_Type, Base_Code, Adnl_Rate, Temp_Balance, Payment_Date, Maturity_Date - 1, Temp_Interest, Byte_Flag)
                ' Take LOWER of the two values
                If Pre_Payment_Charges > Temp_Interest Then Pre_Payment_Charges = Temp_Interest
            End If
        End If
        
        ' Minimum Closing Recovery may or may not include Loan Closing Fee and Last Months Ledger Fee
        ' Loan Closing Fee is ALWAYS posted in Savings Account ONLY; It can not be recovered from Pay_Amt
        Minimum_Closing_Recovery = Opg_Bal(1) + Opg_Bal(2) + Opg_Bal(3) + Opg_Bal(4) + Opg_Bal(5) + Pre_Payment_Charges
        If Sacrifice_Last_Ledger_Fee = 0 Then Minimum_Closing_Recovery = Minimum_Closing_Recovery + Monthly_Ledger_Fee
        If Sacrifice_Closing_fee = 0 Then Minimum_Closing_Recovery = Minimum_Closing_Recovery + Loan_Closing_Fees
        ' Closing Recovery does include everything
        Closing_Recovery = Opg_Bal(1) + Opg_Bal(2) + Opg_Bal(3) + Opg_Bal(4) + Opg_Bal(5) + Pre_Payment_Charges + Monthly_Ledger_Fee + Loan_Closing_Fees
        
        ' If Minimum Closing Recovery is available to recover, then Close Loan Now
        If Minimum_Closing_Recovery > Funds_Available_For_Recovery Then GoTo Closing_Logic_Over
        
        ' =====================================================================
        ' Loan to be closed here
        ' =====================================================================
        ' If Loan_Closing_fee is NOT available, then Sacrifice Loan Closing Fee
        If Closing_Recovery > Funds_Available_For_Recovery Then
            If Loan_Closing_Fees > 0 And Sacrifice_Closing_fee >= 1 Then
                Loan_Closing_Fees = Loan_Closing_Fees + Funds_Available_For_Recovery - Closing_Recovery
                If Loan_Closing_Fees < 0 Then Loan_Closing_Fees = 0
                Closing_Recovery = Opg_Bal(1) + Opg_Bal(2) + Opg_Bal(3) + Opg_Bal(4) + Opg_Bal(5) + Pre_Payment_Charges + Monthly_Ledger_Fee + Loan_Closing_Fees
            End If
        End If
        ' If Monthle Ledger Fee is NOT available, then Sacrifice Monthle Ledger Fee
        If Closing_Recovery > Funds_Available_For_Recovery Then
            If Monthly_Ledger_Fee > 0 And Sacrifice_Last_Ledger_Fee >= 1 Then
                Monthly_Ledger_Fee = Monthly_Ledger_Fee + Funds_Available_For_Recovery - Closing_Recovery
                If Monthly_Ledger_Fee < 0 Then Monthly_Ledger_Fee = 0
                Closing_Recovery = Opg_Bal(1) + Opg_Bal(2) + Opg_Bal(3) + Opg_Bal(4) + Opg_Bal(5) + Pre_Payment_Charges + Monthly_Ledger_Fee + Loan_Closing_Fees
            End If
        End If
        
        ' Decide what to recover from Account (Savings) and what from Loan Payment
        Recovery_From_Account = Pre_Payment_Charges + Loan_Closing_Fees
        Recovery_From_Payment = Opg_Bal(1) + Opg_Bal(2) + Opg_Bal(3) + Opg_Bal(4) + Opg_Bal(5) + Monthly_Ledger_Fee
        ' If Savings Balance is < Closing Fee + Pre Payment Charges, then we need to PUSH money in Savings Account
        ' Loan Closing Fee and Pre_Payment Charges have to be recovered from Savings Only
        If Recovery_From_Account > Savings_Funds_Available Then Transfer_To_Savings = Recovery_From_Account - Savings_Funds_Available
        ' Left Over Amount is < Required Amount, remaining is to be PULLED from Savings Account
        If Recovery_From_Payment > Left_Over_Amt Then Recovery_From_Savings = Recovery_From_Payment - Left_Over_Amt
        
        If Transfer_To_Savings > 0 And Recovery_From_Savings > 0 Then
            Call MyClass.Display_Message("There seems to be a Logical Error in Closing Loan Logic.")
        End If
        
        ' Save Ledger Fee and Loan Close Fee Values for returing through another procedure, if user needs
        LL_Ledger_Fees = Monthly_Ledger_Fee
        LL_Closing_Fees = Loan_Closing_Fees
        LL_Pre_Payment_Charges = Pre_Payment_Charges
        
        Close_Loan_Now = 1
        
        ' Revise our Left Over Amount; Adjust what we are using against Closing Recovery
        Left_Over_Amt = Left_Over_Amt + Recovery_From_Savings - Recovery_From_Payment - Transfer_To_Savings
        If Left_Over_Amt < 0 Then Left_Over_Amt = 0
        
        ' Work Out Break up of "Recovery from Savings"
        If Recovery_From_Savings > 0 Then
            Temp_Amt = Recovery_From_Savings
            ' Adjust Last Months Ledger Fee
            If Temp_Amt > 0 Then
                Sav_Ledger_Fees_Adj = Monthly_Ledger_Fee
                If Sav_Ledger_Fees_Adj > Temp_Amt Then Sav_Ledger_Fees_Adj = Temp_Amt
                Temp_Amt = Temp_Amt - Sav_Ledger_Fees_Adj
            End If
            ' Adjust Uncap_Bank_Charges
            If Temp_Amt > 0 Then
                Sav_UnCap_Charges_Adj = Opg_Bal(5)
                If Sav_UnCap_Charges_Adj > Temp_Amt Then Sav_UnCap_Charges_Adj = Temp_Amt
                Temp_Amt = Temp_Amt - Sav_UnCap_Charges_Adj
            End If
            ' Adjust Uncap_Interest
            If Temp_Amt > 0 Then
                Sav_UnCap_int_Adj = Opg_Bal(4)
                If Sav_UnCap_int_Adj > Temp_Amt Then Sav_UnCap_int_Adj = Temp_Amt
                Temp_Amt = Temp_Amt - Sav_UnCap_int_Adj
            End If
            ' Adjust Cap_Bank_Charges
            If Temp_Amt > 0 Then
                Sav_Cap_Charges_Adj = Opg_Bal(3)
                If Sav_Cap_Charges_Adj > Temp_Amt Then Sav_Cap_Charges_Adj = Temp_Amt
                Temp_Amt = Temp_Amt - Sav_Cap_Charges_Adj
            End If
            ' Adjust Capitalized Interest
            If Temp_Amt > 0 Then
                Sav_Cap_int_Adj = Opg_Bal(2)
                If Sav_Cap_int_Adj > Temp_Amt Then Sav_Cap_int_Adj = Temp_Amt
                Temp_Amt = Temp_Amt - Sav_Cap_int_Adj
            End If
            ' Adjust Principal
            If Temp_Amt > 0 Then
                Sav_Princ_Adj = Opg_Bal(1)
                If Sav_Princ_Adj > Temp_Amt Then Sav_Princ_Adj = Temp_Amt
                Temp_Amt = Temp_Amt - Sav_Princ_Adj
            End If
        End If
        ' Since we have adjusted FULL Loan, we should update Loan Master Slots for the same
        Princ_Adjusted = Princ_Adjusted + Opg_Bal(1)
        Cap_Int_Adj = Cap_Int_Adj + Opg_Bal(2)
        Uncap_Int_Adj = Uncap_Int_Adj + Opg_Bal(4)
        Cap_Charges_Adj = Cap_Charges_Adj + Opg_Bal(3)
'        UnCap_Charges_Adj = UnCap_Charges_Adj + Opg_Bal(5) + Monthly_Ledger_Fee
        UnCap_Charges_Adj = UnCap_Charges_Adj + Opg_Bal(5)
        Opg_Bal(1) = 0
        Opg_Bal(2) = 0
        Opg_Bal(3) = 0
        Opg_Bal(4) = 0
        Opg_Bal(5) = 0
        GoTo Closing_Logic_Over
    End If
    
Closing_Logic_Over:

    ' Loan Master Updations
    ' Read values from Loan Master. We have to do it NOW since it might have got updated by Debit_Interest routine
    Sqlstr = "select lm_int_cap,lm_bnk_cap,lm_cap_int_rec,lm_cap_bnk_rec,lm_unrec_int_amt,lm_unrec_bnk_chg,lm_princ_rec,lm_tot_int_rec" & _
            " from " & UseDbPrefix & "laccounts where lm_hbr_cd = " & BranchCode & " and lm_type_code = " & AcntType & " and lm_ac_srno = " & AcntNumber
    Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    If Upd_Recset.EOF Then GoTo Error_Case
    
    lm_int_cap = IIf(IsNull(Upd_Recset!lm_int_cap), 0, Upd_Recset!lm_int_cap)
    lm_bnk_cap = IIf(IsNull(Upd_Recset!lm_bnk_cap), 0, Upd_Recset!lm_bnk_cap)
    
    Cap_Int_Recovered = IIf(IsNull(Upd_Recset!lm_cap_int_rec), 0, Upd_Recset!lm_cap_int_rec)
    Cap_Charges_Recovered = IIf(IsNull(Upd_Recset!lm_cap_bnk_rec), 0, Upd_Recset!lm_cap_bnk_rec)
    Uncap_Int_Unrecovered = IIf(IsNull(Upd_Recset!lm_unrec_int_amt), 0, Upd_Recset!lm_unrec_int_amt)
    Uncap_Charges_Unrecovered = IIf(IsNull(Upd_Recset!lm_unrec_bnk_chg), 0, Upd_Recset!lm_unrec_bnk_chg)
    Principal_Recovered = IIf(IsNull(Upd_Recset!lm_princ_rec), 0, Upd_Recset!lm_princ_rec)
    Total_Int_Recovered = IIf(IsNull(Upd_Recset!lm_tot_int_rec), 0, Upd_Recset!lm_tot_int_rec)
                    
    Cap_Int_Recovered = Cap_Int_Recovered + Cap_Int_Adj
    Cap_Charges_Recovered = Cap_Charges_Recovered + Cap_Charges_Adj
    If lm_int_cap < Cap_Int_Recovered Then lm_int_cap = Cap_Int_Recovered
    If lm_bnk_cap < Cap_Charges_Recovered Then lm_bnk_cap = Cap_Charges_Recovered
    
    Principal_Recovered = Principal_Recovered + Princ_Adjusted
    Total_Int_Recovered = Total_Int_Recovered + Cap_Int_Adj + Uncap_Int_Adj
    Uncap_Int_Unrecovered = Opg_Bal(4)
    Uncap_Charges_Unrecovered = Opg_Bal(5)
    If Update_Flag >= 1 Then
        Sqlstr = "Update  " & UseDbPrefix & "laccounts set lm_cap_int_rec = " & Cap_Int_Recovered & ", " & _
                "lm_cap_bnk_rec = " & Cap_Charges_Recovered & "," & _
                "lm_unrec_int_amt = " & Uncap_Int_Unrecovered & "," & _
                "lm_unrec_bnk_chg = " & Uncap_Charges_Unrecovered & "," & _
                "lm_princ_rec = " & Principal_Recovered & "," & _
                "lm_tot_int_rec = " & Total_Int_Recovered & ", " & _
                "lm_last_cr_date = '" & Format(Payment_Date, "dd-mmm-yyyy") & "', " & _
                "lm_int_cap = " & lm_int_cap & "," & _
                "lm_bnk_cap = " & lm_bnk_cap & " " & _
                " where lm_hbr_cd = " & BranchCode & " and lm_type_code = " & AcntType & " " & _
                " and lm_ac_srno = " & AcntNumber
        Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
    End If
'    If Update_Flag >= 1 Then
'        If (Princ_Adjusted + UnCap_Int_Adj + Cap_Int_Adj + UnCap_Charges_Adj + Cap_Charges_Adj) <> Pay_Amt - Left_Over_Amt - Monthly_Ledger_Fee Then
'            MsgBox "Break Up Amounts are not matched"
'            Exit Sub
'        End If
'    End If
    
    ' Insert CREDIT Record (Type 11) in Loan Transaction File
    ' Generate Transaction Number
    ' Record Type 11; DbCr_Code = 2; Transaction Amount = payment_amt-left_over_amount
    ' Effective_Date = Transaction_Date = myclass.Branch_Working_Date
    ' 5 amount slots will be UPDATED (Princ_Adj Cap_int Cap_charges Uncap_Int Uncap_Charges
    ' Int_From_date & Int_Till_Date will be NULL
    ' Amt_on_Which_Int_Computed = 0
    If Update_Flag >= 1 Then
        ' Insert in ltrans, records for Payment Amount which we have adjusted now
        Trans_Date = Payment_Date
        If Trim$(Narrat) = "" Then Narrat = "Payment Credited"
        ' Write record in ltrans for Payment which was processed through this routine
        NewRec_Type = 11
        If Payment_Txn_Code = TL_Write_Off Then NewRec_Type = 19
        Txn_Amt = Pay_Amt - Left_Over_Amt
        If Txn_Amt > 0 Then
            Call Get_Transaction_No(BranchCode, Trans_Date, Txn_No)
            If Ora_Branch = 1 Then
                Sqlstr = "insert into " & UseDbPrefix & "ltrans(ltxn_br_cd,ltxn_acnt_year,ltxn_txn_no," & _
                    "ltxn_txn_date,ltxn_ac_hbr_cd,ltxn_ac_type_code,ltxn_ac_srno,ltxn_txn_time, " & _
                    "ltxn_txn_code,ltxn_dr_cd,ltxn_effective_date,ltxn_amount,ltxn_princ_amt," & _
                    "ltxn_interest_amt,ltxn_cap_interest_rec,ltxn_narration,ltxn_chq_no,ltxn_bank_drawn," & _
                    "ltxn_chq_date,ltxn_operator,ltxn_post_status,ltxn_cross_ac_hbr_cd,ltxn_cross_ac_type_code," & _
                    "ltxn_cross_ac_srno,ltxn_rec_type,ltxn_uncap_bank_chg,ltxn_cap_bank_chg," & _
                    "ltxn_int_date_from,ltxn_int_date_till,ltxn_int_rate,ltxn_int_cal_on," & _
                    "ltxn_src_prg) values(" & BranchCode & "," & Year(Trans_Date) & "," & Txn_No & "," & _
                    "'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & BranchCode & "," & AcntType & "," & AcntNumber & "," & Format(Now(), "HHMM") & "," & _
                    "'" & Payment_Txn_Code & "',2,'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & Txn_Amt & "," & (Princ_Adjusted - Sav_Princ_Adj) & "," & _
                    " " & (Uncap_Int_Adj - Sav_UnCap_int_Adj) & "," & (Cap_Int_Adj - Sav_Cap_int_Adj) & ",'" & Narrat & "',0,''," & _
                    "'01-JAN-1900','" & Left$(gsUser_Login, 3) & "',0,0,0," & _
                    "0," & NewRec_Type & "," & (UnCap_Charges_Adj - Sav_UnCap_Charges_Adj) & "," & (Cap_Charges_Adj - Sav_Cap_Charges_Adj) & "," & _
                    "'01-JAN-1900','01-JAN-1900',0,0,0)"
            Else
                Sqlstr = "insert into " & UseDbPrefix & "ltrans(ltxn_br_cd,ltxn_acnt_year,ltxn_txn_no," & _
                    "ltxn_txn_date,ltxn_ac_hbr_cd,ltxn_ac_type_code,ltxn_ac_srno,ltxn_txn_time, " & _
                    "ltxn_txn_code,ltxn_dr_cd,ltxn_effective_date,ltxn_amount,ltxn_princ_amt," & _
                    "ltxn_interest_amt,ltxn_cap_interest_rec,ltxn_narration,ltxn_chq_no,ltxn_bank_drawn," & _
                    "ltxn_chq_date,ltxn_operator,ltxn_post_status,ltxn_cross_ac_hbr_cd,ltxn_cross_ac_type_code," & _
                    "ltxn_cross_ac_srno,ltxn_rec_type,ltxn_uncap_bank_chg,ltxn_cap_bank_chg," & _
                    "ltxn_int_date_from,ltxn_int_date_till,ltxn_int_rate,ltxn_int_cal_on," & _
                    "ltxn_src_prg) values(" & BranchCode & "," & Year(Trans_Date) & "," & Txn_No & "," & _
                    "'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & BranchCode & "," & AcntType & "," & AcntNumber & ",'" & Format(Now(), "HH:MM") & "'," & _
                    "'" & Payment_Txn_Code & "',2,'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & Txn_Amt & "," & (Princ_Adjusted - Sav_Princ_Adj) & "," & _
                    " " & (Uncap_Int_Adj - Sav_UnCap_int_Adj) & "," & (Cap_Int_Adj - Sav_Cap_int_Adj) & ",'" & Narrat & "',0,''," & _
                    "'01-JAN-1900','" & Left$(gsUser_Login, 3) & "',0,0,0," & _
                    "0," & NewRec_Type & "," & (UnCap_Charges_Adj - Sav_UnCap_Charges_Adj) & "," & (Cap_Charges_Adj - Sav_Cap_Charges_Adj) & "," & _
                    "'01-JAN-1900','01-JAN-1900',0,0,0)"
            End If
            
            Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
        ' Write record in ltrans for money pulled from Savings Account "Recovery_From_Savings"
        ' Insert CREDIT Record (Type 11) in Loan Transaction File
        ' Generate Transaction Number
        ' Record Type 11; DbCr_Code = 2; Transaction Amount = Recovery From savings
        ' Effective_Date = Transaction_Date = myclass.Branch_Working_Date
        ' 5 amount slots will be UPDATED (Princ_Adj Cap_int Cap_charges Uncap_Int Uncap_Charges
        ' Int_From_date & Int_Till_Date will be NULL
        ' Amt_on_Which_Int_Computed = 0
        Narrat = "ALR from Savings"
        Txn_Amt = Recovery_From_Savings
        If Txn_Amt > 0 Then
            Call Get_Transaction_No(BranchCode, Trans_Date, Txn_No)
            If Ora_Branch = 1 Then
                Sqlstr = "insert into " & UseDbPrefix & "ltrans(ltxn_br_cd,ltxn_acnt_year,ltxn_txn_no," & _
                    "ltxn_txn_date,ltxn_ac_hbr_cd,ltxn_ac_type_code,ltxn_ac_srno,ltxn_txn_time, " & _
                    "ltxn_txn_code,ltxn_dr_cd,ltxn_effective_date,ltxn_amount,ltxn_princ_amt," & _
                    "ltxn_interest_amt,ltxn_cap_interest_rec,ltxn_narration,ltxn_chq_no,ltxn_bank_drawn," & _
                    "ltxn_chq_date,ltxn_operator,ltxn_post_status,ltxn_cross_ac_hbr_cd,ltxn_cross_ac_type_code," & _
                    "ltxn_cross_ac_srno,ltxn_rec_type,ltxn_uncap_bank_chg,ltxn_cap_bank_chg," & _
                    "ltxn_int_date_from,ltxn_int_date_till,ltxn_int_rate,ltxn_int_cal_on," & _
                    "ltxn_src_prg) values(" & BranchCode & "," & Year(Trans_Date) & "," & Txn_No & "," & _
                    "'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & BranchCode & "," & AcntType & "," & AcntNumber & "," & Format(Now(), "HHMM") & "," & _
                    "'" & TL_Transfer_From_Savings & "',2,'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & Txn_Amt & "," & Sav_Princ_Adj & "," & _
                    " " & Sav_UnCap_int_Adj & "," & Sav_Cap_int_Adj & ",'" & Narrat & "',0,''," & _
                    "'01-JAN-1900','" & Left$(gsUser_Login, 3) & "',0,0,0," & _
                    "0,11," & Sav_UnCap_Charges_Adj & "," & Sav_Cap_Charges_Adj & "," & _
                    "'01-JAN-1900','01-JAN-1900',0,0,0)"
            Else
                Sqlstr = "insert into " & UseDbPrefix & "ltrans(ltxn_br_cd,ltxn_acnt_year,ltxn_txn_no," & _
                    "ltxn_txn_date,ltxn_ac_hbr_cd,ltxn_ac_type_code,ltxn_ac_srno,ltxn_txn_time, " & _
                    "ltxn_txn_code,ltxn_dr_cd,ltxn_effective_date,ltxn_amount,ltxn_princ_amt," & _
                    "ltxn_interest_amt,ltxn_cap_interest_rec,ltxn_narration,ltxn_chq_no,ltxn_bank_drawn," & _
                    "ltxn_chq_date,ltxn_operator,ltxn_post_status,ltxn_cross_ac_hbr_cd,ltxn_cross_ac_type_code," & _
                    "ltxn_cross_ac_srno,ltxn_rec_type,ltxn_uncap_bank_chg,ltxn_cap_bank_chg," & _
                    "ltxn_int_date_from,ltxn_int_date_till,ltxn_int_rate,ltxn_int_cal_on," & _
                    "ltxn_src_prg) values(" & BranchCode & "," & Year(Trans_Date) & "," & Txn_No & "," & _
                    "'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & BranchCode & "," & AcntType & "," & AcntNumber & ",'" & Format(Now(), "HH:MM") & "'," & _
                    "'" & TL_Transfer_From_Savings & "',2,'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & Txn_Amt & "," & Sav_Princ_Adj & "," & _
                    " " & Sav_UnCap_int_Adj & "," & Sav_Cap_int_Adj & ",'" & Narrat & "',0,''," & _
                    "'01-JAN-1900','" & Left$(gsUser_Login, 3) & "',0,0,0," & _
                    "0,11," & Sav_UnCap_Charges_Adj & "," & Sav_Cap_Charges_Adj & "," & _
                    "'01-JAN-1900','01-JAN-1900',0,0,0)"
            End If
            Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            ' Make sure to insert the record in savings as well (DEBIT Entry)
            Sav_Txn_No = 0
            Call Post_Transaction(BranchCode, MyClass.Branch_Working_Date, Format(Now(), "HHMM"), Sav_Txn_No, BranchCode, Sav_Cust_ID, Sav_Acnt_Type, Sav_Acnt_No, _
                                TC_Transfer_To_Loan, 0 - Txn_Amt, 0, "Auto Loan Recovery", MyClass.Branch_Working_Date, System_Transactions_User_ID, 0, "01-JAN-1900", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, Sav_Acnt_Categ, , , Integer_Flag)
            If Integer_Flag <> 0 Then GoTo IO_Error
        End If
        ' Take care of Transfer to Savings
        ' Write record in ltrans for money PUSHED to Savings Account "Transfer_To_Savings"
        ' Insert DEBIT Record (Type 1) in Loan Transaction File
        ' Generate Transaction Number
        ' Record Type 1; DbCr_Code = 1; Transaction Amount = Transfer To savings
        ' Effective_Date = Transaction_Date = myclass.Branch_Working_Date
        ' 5 amount slots will be all ZEROs
        ' Int_From_date & Int_Till_Date will be NULL
        ' Amt_on_Which_Int_Computed = 0
        Txn_Amt = Transfer_To_Savings
        If Txn_Amt > 0 Then
            ' Insert Record in ltrans as ALC
            Call Get_Transaction_No(BranchCode, Trans_Date, Txn_No)
            If Ora_Branch = 1 Then
                Sqlstr = "insert into " & UseDbPrefix & "ltrans(ltxn_br_cd,ltxn_acnt_year,ltxn_txn_no," & _
                    "ltxn_txn_date,ltxn_ac_hbr_cd,ltxn_ac_type_code,ltxn_ac_srno,ltxn_txn_time, " & _
                    "ltxn_txn_code,ltxn_dr_cd,ltxn_effective_date,ltxn_amount,ltxn_princ_amt," & _
                    "ltxn_interest_amt,ltxn_cap_interest_rec,ltxn_narration,ltxn_chq_no,ltxn_bank_drawn," & _
                    "ltxn_chq_date,ltxn_operator,ltxn_post_status,ltxn_cross_ac_hbr_cd,ltxn_cross_ac_type_code," & _
                    "ltxn_cross_ac_srno,ltxn_rec_type,ltxn_uncap_bank_chg,ltxn_cap_bank_chg," & _
                    "ltxn_int_date_from,ltxn_int_date_till,ltxn_int_rate,ltxn_int_cal_on," & _
                    "ltxn_src_prg) values(" & BranchCode & "," & Year(Trans_Date) & "," & Txn_No & "," & _
                    "'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & BranchCode & "," & AcntType & "," & AcntNumber & "," & Format(Now(), "HHMM") & "," & _
                    "'" & TL_Transfer_From_Savings & "',1,'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & Txn_Amt & ",0," & _
                    "0,0,'" & Narrat & "',0,''," & _
                    "'01-JAN-1900','" & Left$(gsUser_Login, 3) & "',0,0,0," & _
                    "0,11,0,0," & _
                    "'01-JAN-1900','01-JAN-1900',0,0,0)"
            Else
                Sqlstr = "insert into " & UseDbPrefix & "ltrans(ltxn_br_cd,ltxn_acnt_year,ltxn_txn_no," & _
                    "ltxn_txn_date,ltxn_ac_hbr_cd,ltxn_ac_type_code,ltxn_ac_srno,ltxn_txn_time, " & _
                    "ltxn_txn_code,ltxn_dr_cd,ltxn_effective_date,ltxn_amount,ltxn_princ_amt," & _
                    "ltxn_interest_amt,ltxn_cap_interest_rec,ltxn_narration,ltxn_chq_no,ltxn_bank_drawn," & _
                    "ltxn_chq_date,ltxn_operator,ltxn_post_status,ltxn_cross_ac_hbr_cd,ltxn_cross_ac_type_code," & _
                    "ltxn_cross_ac_srno,ltxn_rec_type,ltxn_uncap_bank_chg,ltxn_cap_bank_chg," & _
                    "ltxn_int_date_from,ltxn_int_date_till,ltxn_int_rate,ltxn_int_cal_on," & _
                    "ltxn_src_prg) values(" & BranchCode & "," & Year(Trans_Date) & "," & Txn_No & "," & _
                    "'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & BranchCode & "," & AcntType & "," & AcntNumber & ",'" & Format(Now(), "HH:MM") & "'," & _
                    "'" & TL_Transfer_From_Savings & "',1,'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & Txn_Amt & ",0," & _
                    "0,0,'" & Narrat & "',0,''," & _
                    "'01-JAN-1900','" & Left$(gsUser_Login, 3) & "',0,0,0," & _
                    "0,11,0,0," & _
                    "'01-JAN-1900','01-JAN-1900',0,0,0)"
            End If
            Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            ' Make sure to insert the record in savings as well (CREDIT Entry)
            Sav_Txn_No = 0
            Call Post_Transaction(BranchCode, MyClass.Branch_Working_Date, Format(Now(), "HHMM"), Sav_Txn_No, BranchCode, Sav_Cust_ID, Sav_Acnt_Type, Sav_Acnt_No, _
                                TC_Transfer_To_Loan, Txn_Amt, 0, "Loan Closing Finalization", MyClass.Branch_Working_Date, System_Transactions_User_ID, 0, "01-JAN-1900", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, Sav_Acnt_Categ, , , Integer_Flag)
            If Integer_Flag <> 0 Then GoTo IO_Error
        End If
        ' Post (DEBIT) Monthly Ledger Fee (Will be ZERO for Write Off cases)
        If Monthly_Ledger_Fee > 0 Then Call Debit_Loan_Ledger_Fee(BranchCode, AcntType, AcntNumber, Monthly_Ledger_Fee, 1)
        ' Also Tag This Payment in Schedule File
        If AcntType < Loan_Type_For_SalAdv Then Call Tag_Payment_In_Repay_Schedule(BranchCode, AcntType, AcntNumber)
    End If
    
    Loan_Txn_No = Txn_No
    If Close_Loan_Now <= 0 Then GoTo Close_Loan_Updations_Over
    If AcntType >= Loan_Type_For_SalAdv Then GoTo Close_Loan_Updations_Over
    
    ' Now Close This Loan
    If Update_Flag >= 1 Then
        ' Post Loan Closing Fees in savings; ZERO for Write Off Cases
        If Loan_Closing_Fees > 0 Then
                Sav_Txn_No = 0
                Call Post_Transaction(BranchCode, MyClass.Branch_Working_Date, Format(Now(), "HHMM"), Sav_Txn_No, BranchCode, Sav_Cust_ID, Sav_Acnt_Type, Sav_Acnt_No, _
                                    TC_Loan_Closing_Fee, 0 - Loan_Closing_Fees, 0, "Loan Closing Fee", MyClass.Branch_Working_Date, System_Transactions_User_ID, 0, "01-JAN-1900", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, Sav_Acnt_Categ, , , Integer_Flag)
                If Integer_Flag <> 0 Then GoTo IO_Error
        End If
        ' Post Pre payment Charges in savings;
        If Pre_Payment_Charges > 0 Then
                Sav_Txn_No = 0
                Call Post_Transaction(BranchCode, MyClass.Branch_Working_Date, Format(Now(), "HHMM"), Sav_Txn_No, BranchCode, Sav_Cust_ID, Sav_Acnt_Type, Sav_Acnt_No, _
                                    TC_Loan_Prepayment_Charges, 0 - Pre_Payment_Charges, 0, "Loan Pre Payment Charges", _
                                    MyClass.Branch_Working_Date, System_Transactions_User_ID, 0, "01-JAN-1900", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, Sav_Acnt_Categ, , , Integer_Flag)
                If Integer_Flag <> 0 Then GoTo IO_Error
        End If
    
        'Now Cancel Loan Arrear Hotlisting for this Loan's Savings Account if already hotlisted for Loan Arrears
        Sqlstr = "select * from " & UseDbPrefix & "hotlist where hbr_code = " & BranchCode & " and "
        Sqlstr = Sqlstr + " cust_idno = " & Sav_Cust_ID & " and type_code = " & Sav_Acnt_Type & " and "
        Sqlstr = Sqlstr + " ac_srno = " & Sav_Acnt_No & " and hot_type = 13 and canflag = 0"
        Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        If Not Upd_Recset.EOF Then Call Cancel_HotList(Upd_Recset)
        
        'Update Loan Master for Account Status and Closing Date
        Sqlstr = "update " & UseDbPrefix & "laccounts set lm_ac_status = 1, lm_close_date = '" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "'"
        If Int_Type = 0 Then Sqlstr = Sqlstr + ",lm_cap_bnk_rec = lm_cap_bnk_rec + " & Monthly_Ledger_Fee
        Sqlstr = Sqlstr + " where lm_hbr_cd = " & BranchCode & " and lm_type_code = " & AcntType & " and lm_ac_srno = " & AcntNumber
        Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
                    
        'ZAP Repayment schedule for this loan
        Sqlstr = "Delete from " & UseDbPrefix & "lrepay where pay_hbr_cd = " & BranchCode & " and pay_type_code = " & _
                                                AcntType & " and pay_ac_srno = " & AcntNumber
        Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        
        ' Now Process (Release) Securities against This Loan
        Call Release_Security_Against_Loan(BranchCode, AcntType, AcntNumber)
    End If

Close_Loan_Updations_Over:

    If AcntType < Loan_Type_For_SalAdv Then Call Update_Cbk_Flag(0)
    Exit Sub

Error_Case:
    Exit Sub
    
IO_Error:

    Call MyClass.Display_Message("SQL I/O Error", 1)
    End
End Sub


Public Sub Reverse_Loan_Payment(ByVal BranchCode As Integer, ByVal AcntType As Integer, _
                            ByVal AcntNumber As Long, ByVal Orig_Payment_Txn_Code As String, _
                            ByVal Orig_Payment_Date As Date, ByVal Orig_Pay_Amt As Currency, _
                            ByVal Narrat As String, ByRef Loan_Txn_No As Long, ByRef Amt_Reversed As Currency)


'if update flag =0 then not to Append/Update Records
'   update flag =1 then Append/Update Records in Database
Dim Sqlstr As String, Princ_Adjusted As Currency, Cap_Int_Adj As Currency, Cap_Charges_Adj As Currency, Uncap_Int_Adj As Currency, UnCap_Charges_Adj As Currency
Dim Txn_Amt As Currency, Upd_Recset As New ADODB.Recordset, Txn_No As Long
Dim Int_Type As Byte, Base_Code As Integer, Adnl_Rate As Currency, Categ_Code As String, Loan_Status As Byte, Orig_Txn_No As Long
Dim First_Inst_Date As Date, Install_Freq As Byte, Install_Amt As Currency, Num_Install As Integer, Byte_Flag As Byte

On Error GoTo IO_Error:

' This function is supposed to take care of Payment Reversals i.e. Where Payment Amount' is NEGATIVE.
' However, we will reverse only LOAN transactions and NOT corresponding Savings Transactions.
' Reversal of subsidiary Savings Trnsaction will be responsibility of the User

    Amt_Reversed = 0
    Loan_Txn_No = 0
    
    If Set_Connection(BranchCode) <> 0 Then Exit Sub
    
    If Orig_Payment_Date <> MyClass.Branch_Working_Date Then
        MsgBox "Can Not Reverse Loan Payments of Dates Other Than Today. Loan Entries NOT reversed."
        Exit Sub
    End If
    
    If Orig_Pay_Amt > 0 Then
        Call MyClass.Display_Message("Reverse_Loan_Payment Function Called with +ve Amount. Programming Error.", 1)
        End
    End If
    
    ' Make sure the Payment Transaction exists for This Loan for This Amount
    Sqlstr = "select ltxn_txn_no,ltxn_effective_date,ltxn_princ_amt," & _
             "ltxn_interest_amt,ltxn_cap_interest_rec,ltxn_rec_type,ltxn_uncap_bank_chg,ltxn_cap_bank_chg," & _
             "ltxn_int_date_from,ltxn_int_date_till,ltxn_int_cal_on from " & UseDbPrefix & "ltrans where " & _
             "ltxn_ac_hbr_cd = " & BranchCode & " and ltxn_ac_type_code = " & AcntType & " and ltxn_ac_srno = " & _
             AcntNumber & " and ltxn_rec_type = 11 and ltxn_txn_date = '" & Format(Orig_Payment_Date, "dd-mmm-yyyy") & _
             "' and  ltxn_txn_code = '" & Orig_Payment_Txn_Code & "' and ltxn_amount = " & Format(0 - Orig_Pay_Amt, "0.00") & _
             " and ltxn_src_prg <> 9 and ltxn_dr_cd = 2" & _
             " order by ltxn_txn_no desc"
    Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Post_Payment_in_Loan_1")
    If Upd_Recset.EOF = True Then
        MsgBox "Could Not Find Original Loan Payment Transaction. Loan Entries NOT reversed."
        Exit Sub
    End If
    
    ' Get Original Transaction Values
    Orig_Txn_No = IIf(IsNull(Upd_Recset!ltxn_txn_no), 0, Upd_Recset!ltxn_txn_no)
    Princ_Adjusted = IIf(IsNull(Upd_Recset!ltxn_princ_amt), 0, Upd_Recset!ltxn_princ_amt)
    Cap_Int_Adj = IIf(IsNull(Upd_Recset!ltxn_cap_interest_rec), 0, Upd_Recset!ltxn_cap_interest_rec)
    Cap_Charges_Adj = IIf(IsNull(Upd_Recset!ltxn_cap_bank_chg), 0, Upd_Recset!ltxn_cap_bank_chg)
    Uncap_Int_Adj = IIf(IsNull(Upd_Recset!ltxn_interest_amt), 0, Upd_Recset!ltxn_interest_amt)
    UnCap_Charges_Adj = IIf(IsNull(Upd_Recset!ltxn_uncap_bank_chg), 0, Upd_Recset!ltxn_uncap_bank_chg)
    
    ' Reverse Entry to be Inserted Here
    Call Get_Transaction_No(BranchCode, MyClass.Branch_Working_Date, Txn_No)
    If Trim$(Narrat) = "" Then Narrat = "Payment Reversed"
    Sqlstr = "insert into " & UseDbPrefix & "ltrans(ltxn_br_cd,ltxn_acnt_year,ltxn_txn_no," & _
            "ltxn_txn_date,ltxn_ac_hbr_cd,ltxn_ac_type_code,ltxn_ac_srno,ltxn_txn_time, " & _
            "ltxn_txn_code,ltxn_dr_cd,ltxn_effective_date,ltxn_amount,ltxn_princ_amt," & _
            "ltxn_interest_amt,ltxn_cap_interest_rec,ltxn_narration,ltxn_chq_no,ltxn_bank_drawn," & _
            "ltxn_chq_date,ltxn_operator,ltxn_post_status,ltxn_cross_ac_hbr_cd,ltxn_cross_ac_type_code," & _
            "ltxn_cross_ac_srno,ltxn_rec_type,ltxn_uncap_bank_chg,ltxn_cap_bank_chg," & _
            "ltxn_int_date_from,ltxn_int_date_till,ltxn_int_rate,ltxn_int_cal_on," & _
            "ltxn_src_prg) values(" & BranchCode & "," & Year(MyClass.Branch_Working_Date) & "," & Txn_No & "," & _
            "'" & Format(Orig_Payment_Date, "dd-mmm-yyyy") & "'," & BranchCode & "," & AcntType & "," & AcntNumber & "," & Format(Now(), "HHMM") & "," & _
            "'" & Orig_Payment_Txn_Code & "',2,'" & Format(Orig_Payment_Date, "dd-mmm-yyyy") & "'," & Orig_Pay_Amt & "," & 0 - Princ_Adjusted & "," & _
            " " & 0 - Uncap_Int_Adj & "," & 0 - Cap_Int_Adj & ",'" & Narrat & "',0,''," & _
            "'01-JAN-1900','" & Left$(gsUser_Login, 3) & "',0,0,0," & _
            "0,11," & 0 - UnCap_Charges_Adj & "," & 0 - Cap_Charges_Adj & "," & _
            "'01-JAN-1900','01-JAN-1900',0,0,0)"
    Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    
    ''''' Tag This Transaction Number so that we donot do reversal against this transaction
    Sqlstr = "update " & UseDbPrefix & "ltrans set ltxn_src_prg = 9" & _
             " where ltxn_ac_hbr_cd = " & BranchCode & " and ltxn_ac_type_code = " & AcntType & _
             " and ltxn_ac_srno = " & AcntNumber & " and ltxn_txn_no = " & Orig_Txn_No
    Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
 
    
    ' Reverse Posting of This Loan Credit Entry in Loan Master
    Sqlstr = "Update  " & UseDbPrefix & "laccounts set lm_cap_int_rec = lm_cap_int_rec - " & Cap_Int_Adj & ", " & _
            "lm_cap_bnk_rec = lm_cap_bnk_rec - " & Cap_Charges_Adj & "," & _
            "lm_unrec_int_amt = lm_unrec_int_amt + " & Uncap_Int_Adj & "," & _
            "lm_unrec_bnk_chg = lm_unrec_bnk_chg + " & UnCap_Charges_Adj & "," & _
            "lm_princ_rec = lm_princ_rec - " & Princ_Adjusted & "," & _
            "lm_tot_int_rec = lm_tot_int_rec - " & (Cap_Int_Adj + Uncap_Int_Adj) & ", " & _
            "lm_last_cr_date = '" & Format(Orig_Payment_Date, "dd-mmm-yyyy") & "' " & _
            " where lm_hbr_cd = " & BranchCode & " and lm_type_code = " & AcntType & " and lm_ac_srno = " & AcntNumber
    Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    
    
    Amt_Reversed = Orig_Pay_Amt
    Loan_Txn_No = Orig_Txn_No
    
    ' Get Loan Category and Loan Status from Loan Master
    Sqlstr = "select lm_category,lm_ac_status,lm_first_install_date,lm_install_freq,lm_no_of_installments,lm_latest_install_amt from " & UseDbPrefix & "laccounts "
    Sqlstr = Sqlstr + " where lm_hbr_cd = " & BranchCode & " and lm_type_code = " & AcntType & " and lm_ac_srno = " & AcntNumber
    Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Post_Payment_in_Loan_1")
    If Upd_Recset.EOF Then
        MsgBox "Invalid Loan Account Number sent to Reverse_Loan_Payment routine. Loan Entries NOT reversed."
        Exit Sub
    End If
    First_Inst_Date = IIf(IsNull(Upd_Recset!lm_first_install_date), #1/1/1900#, Upd_Recset!lm_first_install_date)
    Install_Freq = IIf(IsNull(Upd_Recset!lm_install_freq), 1, Upd_Recset!lm_install_freq)
    Install_Amt = IIf(IsNull(Upd_Recset!lm_latest_install_amt), 0, Upd_Recset!lm_latest_install_amt)
    Num_Install = IIf(IsNull(Upd_Recset!lm_no_of_installments), 1, Upd_Recset!lm_no_of_installments)
    Categ_Code = Trim$(IIf(IsNull(Upd_Recset!lm_category), "", Upd_Recset!lm_category))
    Call Find_Loan_Int_Rate(Categ_Code, 0, 0, Int_Type, Base_Code)
    Loan_Status = IIf(IsNull(Upd_Recset!lm_ac_status), 0, Upd_Recset!lm_ac_status)
    
    If Loan_Status >= 1 Then
        ' Bad news. Loan has already been closed. Open The Loan Again
        Sqlstr = "update " & UseDbPrefix & "laccounts set lm_ac_status = 0, lm_close_date = '01-JAN-1900' where lm_hbr_cd = " & BranchCode & " and lm_type_code = " & AcntType & " and lm_ac_srno = " & AcntNumber
        Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Post_Payment_in_Loan_1")
        ' Reverse Ledger Fee Transaction (For Loan Closing)
        
        ' Make sure the Ledger Fee Transaction exists for This Loan for This Amount
        Sqlstr = "select ltxn_amount from " & UseDbPrefix & "ltrans where " & _
                 "ltxn_ac_hbr_cd = " & BranchCode & " and ltxn_ac_type_code = " & AcntType & _
                 " and ltxn_ac_srno = " & AcntNumber & " and ltxn_rec_type = 3 and ltxn_txn_date = '" & Format(Orig_Payment_Date, "dd-mmm-yyyy") & _
                 "' and ltxn_txn_code = '" & TC_Ledger_Fee & "' and ltxn_dr_cd = 1"
        Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Post_Payment_in_Loan_1")
        If Upd_Recset.EOF = True Then Txn_Amt = 0
        If Upd_Recset.EOF = False Then Txn_Amt = IIf(IsNull(Upd_Recset!ltxn_amount), 0, Upd_Recset!ltxn_amount)
        
        ' Reverse Entry of this LDF Transaction if Ledger Fee Amount > ZERO
        If Txn_Amt > 0 Then
            Call Get_Transaction_No(BranchCode, MyClass.Branch_Working_Date, Txn_No)
            If Trim$(Narrat) = "" Then Narrat = "Ledger Fee Reversed"
            Sqlstr = "insert into " & UseDbPrefix & "ltrans(ltxn_br_cd,ltxn_acnt_year,ltxn_txn_no," & _
                    "ltxn_txn_date,ltxn_ac_hbr_cd,ltxn_ac_type_code,ltxn_ac_srno,ltxn_txn_time, " & _
                    "ltxn_txn_code,ltxn_dr_cd,ltxn_effective_date,ltxn_amount,ltxn_princ_amt," & _
                    "ltxn_interest_amt,ltxn_cap_interest_rec,ltxn_narration,ltxn_chq_no,ltxn_bank_drawn," & _
                    "ltxn_chq_date,ltxn_operator,ltxn_post_status,ltxn_cross_ac_hbr_cd,ltxn_cross_ac_type_code," & _
                    "ltxn_cross_ac_srno,ltxn_rec_type,ltxn_uncap_bank_chg,ltxn_cap_bank_chg," & _
                    "ltxn_int_date_from,ltxn_int_date_till,ltxn_int_rate,ltxn_int_cal_on," & _
                    "ltxn_src_prg) values(" & BranchCode & "," & Year(MyClass.Branch_Working_Date) & "," & Txn_No & "," & _
                    "'" & Format(Orig_Payment_Date, "dd-mmm-yyyy") & "'," & BranchCode & "," & AcntType & "," & AcntNumber & "," & Format(Now(), "HHMM") & "," & _
                    "'" & TC_Ledger_Fee & "',1,'" & Format(Orig_Payment_Date, "dd-mmm-yyyy") & "'," & 0 - Txn_Amt & ",0,0,0,'" & Narrat & "',0,''," & _
                    "'01-JAN-1900','" & Left$(gsUser_Login, 3) & "',0,0,0," & _
                    "0,3,0,0,'01-JAN-1900','01-JAN-1900',0,0,0)"
            Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        
            Sqlstr = "Update " & UseDbPrefix & "laccounts set lm_unrec_bnk_chg = lm_unrec_bnk_chg"
            If Int_Type = 0 Then Sqlstr = "Update " & UseDbPrefix & "laccounts set lm_bnk_cap = lm_bnk_cap"
            Sqlstr = Sqlstr & " - " & Format(Txn_Amt, "0.00") & _
                " , lm_last_dr_date = '" & Format(Orig_Payment_Date, "dd-mmm-yyyy") & "'" & _
                " where lm_hbr_cd = " & BranchCode & " and lm_type_code = " & AcntType & " " & _
                " and lm_ac_srno = " & AcntNumber
            Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
        
        ' Reschedule This Loan
        Call ReSchedule_Loan(BranchCode, AcntType, AcntNumber, First_Inst_Date, Install_Freq, 3, Install_Amt, Num_Install, Byte_Flag)
    End If
    
Ledger_Fee_Over:
    
    
    ' Also Tag This Payment in Schedule File
    Call Tag_Payment_In_Repay_Schedule(BranchCode, AcntType, AcntNumber)
    Call Update_Cbk_Flag(0)
    
Exit Sub

Error_Case:
    Exit Sub
    
IO_Error:

    Call MyClass.Display_Message("SQL I/O Error", 1)
    End
End Sub

Public Sub Compute_Loan_Ledger_Fee(ByVal Cust_Branch As Integer, ByVal Acnt_Type As Integer, ByVal Acnt_Category As String, ByVal Loan_Amt As Currency, ByRef Monthly_Ledger_Fee As Currency)
Dim Sqlstr As String, Recset As New ADODB.Recordset
    Monthly_Ledger_Fee = 0
    If Set_Connection(Cust_Branch) <> 0 Then Exit Sub
    
    If Acnt_Type >= Loan_Type_For_SalAdv Then Exit Sub
    Sqlstr = "select ledg_fee_appl from " & UseDbPrefix & "loan_ac_categ where loan_categ = '" & Acnt_Category & "'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "mylibclass\Compute_Loan_Ledger")
    If Recset.EOF = True Then Exit Sub
    If IIf(IsNull(Recset!Ledg_Fee_Appl), 1, Recset!Ledg_Fee_Appl) = 0 Then Exit Sub
    Call Calculate_BankCharge(TC_Ledger_Fee, Acnt_Type, Acnt_Category, 0, Loan_Amt, Monthly_Ledger_Fee)
    Exit Sub
End Sub
Public Sub Compute_Savings_Ledger_Fee(ByVal Acnt_Type As Integer, ByVal Acnt_Category As String, ByVal Old_Ac_No As String, ByVal Balance_Amt As Currency, ByRef Monthly_Ledger_Fee As Currency)
Dim Recset As New ADODB.Recordset
    Monthly_Ledger_Fee = 0
    Old_Ac_No = UCase(Old_Ac_No) + "     "
    If Left$(Old_Ac_No, 3) = "NCC" Then
        Monthly_Ledger_Fee = Hard_Coded_Ledger_Fee_NCC
        GoTo Exit_Here
    End If
    If Left$(Old_Ac_No, 3) = "PSC" Then
        Monthly_Ledger_Fee = Hard_Coded_Ledger_Fee_PSC
        GoTo Exit_Here
    End If
    If Left$(Old_Ac_No, 4) = "AQUA" Then
        Monthly_Ledger_Fee = Hard_Coded_Ledger_Fee_AQUA
        GoTo Exit_Here
    End If
    Call Calculate_BankCharge(TC_Ledger_Fee, Acnt_Type, Acnt_Category, 0, Balance_Amt, Monthly_Ledger_Fee)

Exit_Here:

    Exit Sub
End Sub

Public Sub Get_Savings_Bal_Of_Loan_Customer(ByVal BranchCode As Integer, ByVal AcntType As Integer, ByVal AcntNumber As Long, _
                                            ByRef Clear_bal As Currency, ByRef UnClear_bal As Currency, ByRef Block_Amt As Currency, _
                                            ByRef Sav_Cust_ID As Long, ByRef Sav_Acnt_Type As Integer, ByRef Sav_Acnt_No As Long, _
                                            ByRef Sav_Acnt_Categ As String)

Dim Sqlstr As String, Recset As New ADODB.Recordset, AcStatus As Byte

    Clear_bal = 0
    UnClear_bal = 0
    Block_Amt = 0
    Sav_Cust_ID = 0
    Sav_Acnt_Type = 0
    Sav_Acnt_No = 0
    Sav_Acnt_Categ = ""
    
    If Set_Connection(BranchCode) <> 0 Then Exit Sub
    
    Sqlstr = "select lm_sav_cust_idno, lm_sav_ac_type_code,lm_sav_ac_srno from " & UseDbPrefix & "laccounts " & _
            " where lm_hbr_cd = " & BranchCode & " and lm_type_code = " & AcntType & " and lm_ac_srno = " & AcntNumber
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_Savings_Bal_of_Loan_Customer_1")
    If Recset.EOF = True Then Exit Sub
    
    Sav_Cust_ID = IIf(IsNull(Recset!lm_sav_cust_idno), 0, Recset!lm_sav_cust_idno)
    Sav_Acnt_Type = IIf(IsNull(Recset!lm_sav_ac_type_code), 0, Recset!lm_sav_ac_type_code)
    Sav_Acnt_No = IIf(IsNull(Recset!lm_sav_ac_srno), 0, Recset!lm_sav_ac_srno)
    
    'Now Check account status in nsav_account
    Sqlstr = "select ac_categ,ac_status, block_amt from " & UseDbPrefix & "nsav_account " & _
            " where br_code = " & BranchCode & " and type_code = " & Sav_Acnt_Type & _
            " and ac_srno = " & Sav_Acnt_No & " and cust_idno = " & Sav_Cust_ID
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_Savings_Bal_of_Loan_Customer_2")
    If Recset.EOF = True Then
        Sav_Cust_ID = 0
        Sav_Acnt_Type = 0
        Sav_Acnt_No = 0
        Sav_Acnt_Categ = ""
        Exit Sub
    End If
    
    AcStatus = IIf(IsNull(Recset!Ac_Status), 0, Recset!Ac_Status)
    If AcStatus <> 0 Then
        Sav_Cust_ID = 0
        Sav_Acnt_Type = 0
        Sav_Acnt_No = 0
        Sav_Acnt_Categ = ""
        Exit Sub
    End If
    Sav_Acnt_Categ = Trim$(IIf(IsNull(Recset!Ac_Categ), "N", Recset!Ac_Categ))
    Block_Amt = IIf(IsNull(Recset!Block_Amt), 0, Recset!Block_Amt)
    'Now get clear and unclear balance
    Call Get_Customer_Balance(BranchCode, Sav_Cust_ID, Sav_Acnt_Type, Sav_Acnt_No, MyClass.Branch_Working_Date, Clear_bal, UnClear_bal)
    Exit Sub
End Sub
Public Sub Tag_Payment_In_Repay_Schedule(ByVal Branch_Code As Integer, ByVal AcntType As Integer, _
                    ByVal AcntNumber As Long)
Dim Sqlstr As String, UpdRecSet As New ADODB.Recordset, tRecSet As New ADODB.Recordset, PRecSet As New ADODB.Recordset
Dim Unadj_Receipt As Currency, Receipt_Amt As Currency, Receipt_Date As Date, Receipt_End As Byte
Dim Repay_Amt As Currency, Install_Date As Date, Repay_Status As Byte
Dim Repay_Recover_Date As Date, Instalment_No As Integer, Repay_End As Byte

    If Set_Connection(Branch_Code) <> 0 Then Exit Sub
    
    'Make Recordset of All Payments against this loan
    Sqlstr = "select ltxn_amount,ltxn_effective_date,ltxn_dr_cd from " & UseDbPrefix & "ltrans where ltxn_ac_hbr_cd = " & Branch_Code & _
        " and ltxn_ac_type_code = " & AcntType & " and ltxn_ac_srno = " & AcntNumber & " and ltxn_rec_type >= 11" & _
        " order by ltxn_effective_date"
    Call Fire_Sql(Sqlstr, tRecSet, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    
    ' UnTag all Installment Records as Unpaid
    Sqlstr = "update " & UseDbPrefix & "lrepay set pay_status = 0, pay_recovery_date = '01-Jan-1900' where " & _
            " pay_hbr_cd = " & Branch_Code & " and pay_type_code = " & AcntType & _
            " and pay_ac_srno = " & AcntNumber & " and pay_status > 0 "
    Call Fire_Sql(Sqlstr, UpdRecSet, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    
    'Make Recordset of all loan instalments till ToDay(Branch Working Date); i.e. All due instalments.
    Sqlstr = "select pay_install_no,pay_install_due_date,pay_install_amt,pay_status,pay_recovery_date from " & _
            UseDbPrefix & "lrepay where pay_hbr_cd = " & Branch_Code & _
            " and pay_type_code = " & AcntType & " and pay_ac_srno = " & AcntNumber & _
            " order by pay_install_due_date "
    Call Fire_Sql(Sqlstr, PRecSet, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    
    Unadj_Receipt = 0
    Receipt_End = 0
    Repay_End = 0
    
    GoSub Read_Receipt
    GoSub Read_Schedule
    
Balance_Line:

    If Receipt_End >= 1 Then GoTo Tagging_Over
    
    ' If Receipt >= Installment then TAG that installment
    If Unadj_Receipt >= Repay_Amt Then
        ' Update Repayment Schedule Record as PAID
        If Repay_Status <> 1 Or Repay_Recover_Date <> Receipt_Date Then
            If Instalment_No <> 0 Then
                Sqlstr = "update " & UseDbPrefix & "lrepay set pay_status = 1, pay_recovery_date = '" & Format(Receipt_Date, "dd-mmm-yyyy") & "' " & _
                        " where pay_hbr_cd = " & Branch_Code & " and pay_type_code = " & AcntType & _
                        " and pay_ac_srno = " & AcntNumber & " and pay_install_no = " & Instalment_No
                Call Fire_Sql(Sqlstr, UpdRecSet, Sql_Error, Use_Connection, recs_read)
                If Sql_Error <> 0 Then GoTo IO_Error
            End If
        End If
        ' Reduce Amount available for Adjustment
        Unadj_Receipt = Unadj_Receipt - Repay_Amt
        GoSub Read_Schedule
        If Repay_End >= 1 Then GoTo Tagging_Over
        GoTo Balance_Line
    End If
    
   'Unadjusted Receipt Amount < instalment
    ' Otherwise Try to Read Next Receipt & Accumulate the amount
    GoSub Read_Receipt
    GoTo Balance_Line
   
Tagging_Over:
    If Unadj_Receipt < 0 Then
        Sqlstr = "select pay_install_no,pay_install_due_date,pay_install_amt,pay_recovery_date from " & _
                UseDbPrefix & "lrepay where pay_hbr_cd = " & Branch_Code & _
                " and pay_type_code = " & AcntType & " and pay_ac_srno = " & AcntNumber & _
                " and pay_status > 0 " & _
                " order by pay_recovery_date desc ,pay_install_no desc "
        Call Fire_Sql(Sqlstr, PRecSet, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        If PRecSet.EOF = True Then GoTo UnTaging_Done
        Do While Unadj_Receipt < 0
            Instalment_No = IIf(IsNull(PRecSet!Pay_Install_No), 1, PRecSet!Pay_Install_No)
            Repay_Amt = IIf(IsNull(PRecSet!Pay_Install_Amt), 0, PRecSet!Pay_Install_Amt)
            Unadj_Receipt = Unadj_Receipt + Repay_Amt
            If Unadj_Receipt > 0 Then GoTo UnTaging_Done
                        
            Sqlstr = "update " & UseDbPrefix & "lrepay set pay_status = 0, pay_recovery_date = '01-Jan-1900'" & _
                    " where pay_hbr_cd = " & Branch_Code & _
                    " and pay_type_code = " & AcntType & _
                    " and pay_ac_srno = " & AcntNumber & _
                    " and pay_install_no = " & Instalment_No & _
                    " and pay_status > 0 "
            Call Fire_Sql(Sqlstr, UpdRecSet, Sql_Error, Use_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            If Unadj_Receipt >= 0 Then GoTo UnTaging_Done
            PRecSet.MoveNext
        Loop
    End If
    
UnTaging_Done:

    Exit Sub
    
Read_Receipt:

    If tRecSet.EOF Then
        Receipt_End = 1
        Receipt_Amt = 0
        Return
    End If
    Receipt_Date = IIf(IsNull(tRecSet!ltxn_effective_date), #1/1/1900#, tRecSet!ltxn_effective_date)
    Receipt_Amt = IIf(IsNull(tRecSet!ltxn_amount), 0, tRecSet!ltxn_amount)
    If tRecSet!ltxn_dr_cd <= 1 Then Receipt_Amt = 0 - Receipt_Amt
    Unadj_Receipt = Unadj_Receipt + Receipt_Amt
    tRecSet.MoveNext
    Return
    
Read_Schedule:
    If PRecSet.EOF Then
        Repay_End = 1
        Repay_Amt = 0
        Return
    End If
    Install_Date = IIf(IsNull(PRecSet!pay_install_due_date), #1/1/1900#, PRecSet!pay_install_due_date)
    Repay_Amt = IIf(IsNull(PRecSet!Pay_Install_Amt), 0, PRecSet!Pay_Install_Amt)
    Repay_Status = IIf(IsNull(PRecSet!Pay_Status), 0, PRecSet!Pay_Status)
    Repay_Recover_Date = IIf(IsNull(PRecSet!pay_recovery_date), #1/1/1900#, PRecSet!pay_recovery_date)
    Instalment_No = PRecSet!Pay_Install_No
    PRecSet.MoveNext
    Return
    
IO_Error:
    End
End Sub

Public Sub Get_Transaction_No(ByVal Br_Code As Integer, ByVal Trans_Date As Date, ByRef Txn_No As Long)
Dim Sqlstr As String, Recset As New ADODB.Recordset

    'This Function Retuns Loan Transaction No
    
    If Set_Connection(Br_Code) <> 0 Then Exit Sub
    
A100:

    Txn_No = 0
    Sqlstr = "update " & UseDbPrefix & "parameter set par_no = par_no + 1 where par_key = 'LN_TXN_NO'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If recs_read <= 0 Then
        Call MyClass.Display_Message("Loan Transaction No. Allocation Failed", 1)
        End
    End If
    
    Sqlstr = "select par_no from " & UseDbPrefix & "parameter where par_key = 'LN_TXN_NO'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Recset.EOF = True Then
        Call MyClass.Display_Message("Loan Transaction No. Allocation Failed", 1)
        End
    End If
    Txn_No = IIf(IsNull(Recset!Par_No), 0, Recset!Par_No)
    
    'Ensure that this transaction no does not exists
    Sqlstr = "select ltxn_br_cd from " & UseDbPrefix & "ltrans where ltxn_br_cd = " & Br_Code & " and ltxn_txn_date = '" & Format(Trans_Date, "dd-mmm-yyyy") & "' and ltxn_txn_no = " & Txn_No
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_Transaction_No_1")
    If Not Recset.EOF Then GoTo A100
    Exit Sub
End Sub

Public Function FD_Get_Txn_No(ByVal Br_Code As Integer, ByVal Trans_Date As Date) As Long
Dim tRecSet As New ADODB.Recordset
Dim Txn_No As Long

A100:
    Sqlstr = "update " & MyClass.gUnifyDb & "parameter set par_no = par_no + 1 where par_key = 'FD_TXN_NO'"
    Call Fire_Sql(Sqlstr, tRecSet, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/FD_Get_Txn_No_1")
    If recs_read <= 0 Then
        Call MyClass.Display_Message("FDR Last Transaction NoParameter Not Defined FD_TXN_NO", 1)
        End
    End If
    Sqlstr = "select par_no from " & MyClass.gUnifyDb & "parameter where par_key = 'FD_TXN_NO'"
    Call Fire_Sql(Sqlstr, tRecSet, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/FD_Get_Txn_No_2")
    If tRecSet.EOF = True Then
        Call MyClass.Display_Message("FDR Transaction No. Allocation Failed", 1)
        End
    End If
    Txn_No = IIf(IsNull(tRecSet!Par_No), 0, tRecSet!Par_No)
    
    'Ensure that this transaction no does not exists
    Sqlstr = "select fdt_cust_code from " & MyClass.gUnifyDb & "fdr_trans where fdt_branch = " & Br_Code & " and fdt_txn_dt = '" & Format(Trans_Date, "dd-mmm-yyyy") & "' and fdt_txn_no = " & Txn_No
    Call Fire_Sql(Sqlstr, tRecSet, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/FD_Get_Txn_No_3")
    If Not tRecSet.EOF Then GoTo A100
    
    FD_Get_Txn_No = Txn_No
    Exit Function
End Function


Private Sub Release_Security_Against_Loan(ByVal BranchCode As Integer, ByVal AcntType As Integer, ByVal AcntNumber As Long)
Dim Sqlstr As String, Recset As New ADODB.Recordset, Temp_Recset As New ADODB.Recordset
Dim Security_or_FDRLien As Byte, Security_No As Long
Dim FDR_Type As Integer, FDR_AcNo As Long, FDR_No As Long, FDR_CustId As Long, Aloc_Amt As Currency

    If Set_Connection(BranchCode) <> 0 Then Exit Sub
    
    'Delete from Security Allocation tables
    'Before Deleting Records from lsecurity_allocation for this a/c
    'First find any security is related to lien/FDR Type
    'If it is FDR Type then we have to reduce lien_bal with allocated amount
    
    ' Select FDR Securities i.e. Lien_Flag = 1
    Sqlstr = "select sal_srno,sal_allocated_amt,sal_lien_flag from " & UseDbPrefix & "lsecurity_allocation " & _
            " where sal_hbr_cd = " & BranchCode & " and sal_ln_type_code = " & AcntType & " and " & _
            " sal_ln_ac_srno = " & AcntNumber & " and sal_lien_flag = 1 "
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLIbClass/Release_Security_Against_Loan_1")
    
    ' Update Now Lien Balance for each FDR hypothecated against this Loan
    Do While Not Recset.EOF
        Security_or_FDRLien = IIf(IsNull(Recset!sal_lien_flag), 0, Recset!sal_lien_flag)
        Security_No = IIf(IsNull(Recset!Sal_SrNo), 0, Recset!Sal_SrNo)
        Aloc_Amt = IIf(IsNull(Recset!sal_allocated_amt), 0, Recset!sal_allocated_amt)
                
        ' Get FDR This Details
        Sqlstr = "select sec_fdr_type_code, sec_fdr_ac_srno, sec_fdr_no, sec_fdr_cust_idno from " & UseDbPrefix & "lsecurity "
        Sqlstr = Sqlstr + " where sec_hbr_cd = " & BranchCode & " and sec_srno = " & Security_No & " and sec_lien_flag = " & Security_or_FDRLien
        Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLIbClass/Release_Security_Against_Loan_2")
        FDR_Type = 0
        FDR_AcNo = 0
        FDR_No = 0
        FDR_CustId = 0
        If Not Temp_Recset.EOF Then
            FDR_Type = IIf(IsNull(Temp_Recset!sec_fdr_type_code), 0, Temp_Recset!sec_fdr_type_code)
            FDR_AcNo = IIf(IsNull(Temp_Recset!sec_fdr_ac_srno), 0, Temp_Recset!sec_fdr_ac_srno)
            FDR_No = IIf(IsNull(Temp_Recset!sec_fdr_no), 0, Temp_Recset!sec_fdr_no)
            FDR_CustId = IIf(IsNull(Temp_Recset!sec_fdr_cust_idno), 0, Temp_Recset!sec_fdr_cust_idno)
        End If
        ''fd_lien_amt
'        Sqlstr = "update " & UseDbPrefix & "fdr_detail set lien_bal = lien_bal - " & Aloc_Amt & _
'                 " where br_code = " & BranchCode & " and type_code = " & FDR_Type & " and " & _
'                 " ac_srno = " & FDR_AcNo & " and fdr_no = " & FDR_No & " and cust_idno = " & FDR_CustId
        
        Sqlstr = "update " & UseDbPrefix & "fdr_accounts set fd_lien_amt = fd_lien_amt - " & Aloc_Amt & _
                 " where fd_branch = " & BranchCode & " and fd_cust = " & FDR_CustId & " and fd_acnt_type = " & FDR_Type & " and " & _
                 " fd_acnt_no = " & FDR_AcNo & " and fd_fdr_id = '" & FDR_No & "'"
        Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLIbClass/Release_Security_Against_Loan_3")
        Recset.MoveNext
    Loop
    
    ' Now Delete all Security Allocation Records against this Loan. However Leave the security records as such in security master
    Sqlstr = "delete from " & UseDbPrefix & "lsecurity_allocation " & _
            " where sal_hbr_cd = " & BranchCode & " and sal_ln_type_code = " & AcntType & " and sal_ln_ac_srno = " & AcntNumber
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLIbClass/Release_Security_Against_Loan_4")
    Exit Sub
End Sub

Public Sub Debit_Interest(ByVal BranchCode As Integer, ByVal AcntType As Integer, _
                        ByVal AcntNumber As Long, ByVal Int_Type As Byte, _
                        ByVal Base_Code As Integer, ByVal Adnl_Rate As Currency, _
                        ByVal CapBalance_On_From_Date As Currency, ByVal Int_From_Date As Date, _
                        ByVal Int_Till_Date As Date, ByVal Upd_Flag As Byte, _
                        ByRef Int_Debited As Currency)

' This function will compute interest for given date range and insert a record in Loan Transactions.
' It will also update the Loan Master
' It will treat this interest computed as UNCApitalized only.
' Therefore Date From and Date Till are supposed to belong to same calendar Month
' In case of Flat Rated interest it will ALWAYS compute interest on Disbursed Amount for that Loan

Dim Sqlstr As String, Byte_Flag As Byte, Trans_Date As Date
Dim Txn_No As Long, Narrat As String, Upd_Recset As New ADODB.Recordset

        Int_Debited = 0
        If Int_Till_Date < Int_From_Date Then Exit Sub
        
        If Set_Connection(BranchCode) <> 0 Then Exit Sub
        
'        If Int_Type = 0 Then
'            If Month(Int_From_Date) <> Month(Int_Till_Date) Or Year(Int_From_Date) <> Year(Int_Till_Date) Then
''                MsgBox "INvalid Call to Function Debit Interest"
'                Int_Debited = 0
'                Exit Sub
'            End If
'        End If
        ' In case of Flat Rated interest, ignore principal amount sent by user and use Original Principal Amount instead
        If Int_Type >= 1 Then
            Sqlstr = "select lm_disb_amt from " & UseDbPrefix & "laccounts where lm_hbr_cd = " & BranchCode & _
                " and lm_type_code = " & AcntType & " and lm_ac_srno = " & AcntNumber
            Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
            If Upd_Recset.EOF = True Then Exit Sub
            CapBalance_On_From_Date = Upd_Recset!lm_disb_amt
        End If
        
        ' Compute Interest Amount
        Call Compute_Loan_Interest(Int_Type, Base_Code, Adnl_Rate, CapBalance_On_From_Date, _
                                    Int_From_Date, Int_Till_Date, Int_Debited, Byte_Flag)
        If Byte_Flag <> 0 Then MsgBox "Acccount Number " + CStr(AcntType) + "/" + CStr(AcntNumber)
        If Upd_Flag >= 1 Then Call Post_Loan_Interest(BranchCode, AcntType, AcntNumber, Int_Debited, Int_From_Date, Int_Till_Date, CapBalance_On_From_Date, "Loan INT Debited")
        Exit Sub
IO_Error:
    End
End Sub

Public Sub FD_Credit_Interest(ByVal Branch_Code As Integer, ByVal Cust_Code As Long, ByVal Ac_Type As Integer, ByVal Ac_No As Long, _
                            ByVal Int_From_Date As Date, ByVal Int_Till_Date As Date, ByVal Next_Int_Date As Date, _
                            ByVal Int_Rate As Currency, ByVal Upd_Flag As Byte, ByRef Int_Credited As Currency, ByRef WhTax As Currency, Optional Sent_Flag As Byte)
' This Function will compute Interest for specified FD, if DUE TODAY

Dim Sqlstr As String, Byte_Flag As Byte
Dim Txn_No As Long
Dim With_Holding_Tax As Currency, Payment_Mode As Byte, Sav_CustId As Long, Sav_AcType As Integer
Dim Sav_AcNo As Long, Sav_Ac_Categ As String
Dim Int_Principal As Currency, Cumulative_Flag As Byte
Dim Capatalized_Interest As Currency
Dim Tax_Perc As Currency
Dim Scheme_Code As String, Effective_Date As Date, Minimum_Days_To_Calculate_Interest As Integer

        Int_Credited = 0
        WhTax = 0
        'Get Master Information
        Sqlstr = "select fd_cumulative,fd_principal,fd_scheme,fd_eff_date,fd_int_rate,fd_adnl_rate,fd_sav_cust,fd_sav_type,fd_sav_acno,fd_cap_interest,fd_repay_mode_princ " & _
                " from " & MyClass.gUnifyDb & "fdr_accounts where fd_branch = " & Branch_Code & " and fd_cust= " & Cust_Code & " and " & _
                " fd_acnt_type = " & Ac_Type & " and fd_acnt_no = " & Ac_No
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Fd_Credit_Interest_1")
        If Recset.EOF = True Then Exit Sub
        
        Payment_Mode = 0
        Cumulative_Flag = 0
        Sav_CustId = 0
        Sav_AcType = 0
        Sav_AcNo = 0
        Int_Principal = 0
        Capatalized_Interest = 0
        Scheme_Code = Trim$(IIf(IsNull(Recset!FD_Scheme), "", Recset!FD_Scheme))
        Effective_Date = IIf(IsNull(Recset!fd_eff_date), "", Recset!fd_eff_date)
        Payment_Mode = IIf(IsNull(Recset!fd_repay_mode_princ), 0, Recset!fd_repay_mode_princ)
        Cumulative_Flag = IIf(IsNull(Recset!fd_cumulative), 0, Recset!fd_cumulative)
        Sav_CustId = IIf(IsNull(Recset!fd_sav_cust), 0, Recset!fd_sav_cust)
        Sav_AcType = IIf(IsNull(Recset!fd_sav_type), 0, Recset!fd_sav_type)
        Sav_AcNo = IIf(IsNull(Recset!fd_sav_acno), 0, Recset!fd_sav_acno)
        Int_Principal = IIf(IsNull(Recset!FD_Principal), 0, Recset!FD_Principal)
        Capatalized_Interest = IIf(IsNull(Recset!fd_cap_interest), 0, Recset!fd_cap_interest)
        
        ''If Scheme_Code = "C" Then Int_Rate = IIf(IsNull(Recset!FD_Int_Rate), 0, Recset!FD_Int_Rate) + IIf(IsNull(Recset!fd_adnl_rate), 0, Recset!fd_adnl_rate)
        ''Int_Rate = 2.5
        If Cumulative_Flag > 0 Then Int_Principal = Int_Principal + Capatalized_Interest
        Minimum_Days_To_Calculate_Interest = 0
        Sqlstr = "select scheme_min_days_for_int from " & MyClass.gUnifyDb & "fdr_schemes where scheme_code = '" & Scheme_Code & "'"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(Me, "FD_Credid_Interest")
        If Recset.EOF = False Then Minimum_Days_To_Calculate_Interest = IIf(IsNull(Recset!scheme_min_days_for_int), 0, Recset!scheme_min_days_for_int)
        
        If Minimum_Days_To_Calculate_Interest > 0 Then
            If Int_From_Date - Effective_Date <= Minimum_Days_To_Calculate_Interest Then Exit Sub
        End If
        
        Sav_Ac_Categ = ""
        If Payment_Mode = 1 Or Payment_Mode = 2 Or Payment_Mode = 4 Or Sent_Flag = 1 Then
            'Get Account Category
            Sqlstr = "select ac_categ from " & MyClass.gUnifyDb & "nsav_account where br_code = " & Branch_Code & " and " & _
                    " cust_idno = " & Sav_CustId & " and type_code = " & Sav_AcType & " and ac_srno = " & Sav_AcNo
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(, "Fd_Credit_Interest_2")
            If Recset.EOF = False Then Sav_Ac_Categ = Trim$(IIf(IsNull(Recset!Ac_Categ), "", Recset!Ac_Categ))
        End If
        
        ' Compute Interest Amount(Int_Rate includes additional rate also)
        Call FD_Compute_Interest(Int_Rate, Int_Principal, Int_From_Date, Int_Till_Date, Int_Credited, Byte_Flag)
        
        'Calculate With holding tax
        'With_Holding_Tax = FD_Compute_WHTax(Branch_Code, Cust_Code, Int_Credited, Int_Till_Date)
        '***********************************************
        'With holding Tax should be 0 at the time of accural of interest
        '***********************************************
        With_Holding_Tax = 0
        WhTax = With_Holding_Tax
        If Upd_Flag >= 1 Then
            'Post in FD Database
            If Sent_Flag > 0 Then Payment_Mode = 1
            If Int_Credited <> 0 Then
                Call Post_FD_Interest(Branch_Code, Cust_Code, Ac_Type, Ac_No, Int_Principal, Int_Credited, _
                        Int_From_Date, Int_Till_Date, Int_Rate, With_Holding_Tax, Payment_Mode, Sav_CustId, Sav_AcType, Sav_AcNo, Sav_Ac_Categ)
            End If
            'Update FDR Account Master
            Sqlstr = "update " & MyClass.gUnifyDb & "fdr_accounts set fd_last_int_cap_dt = '" & Format(Int_Till_Date, "dd-mmm-yyyy") & "', " & _
                    " fd_int_due_date = '" & Format(Next_Int_Date, "dd-mmm-yyyy") & "' "
            If Cumulative_Flag >= 1 Then
                If Int_Credited <> 0 Then Sqlstr = Sqlstr + ", fd_cap_interest = fd_cap_interest + " & Format(Int_Credited, "0.00") & " - " & Format(With_Holding_Tax, "0.00")
            End If
            Sqlstr = Sqlstr + " where fd_branch = " & Branch_Code & " and fd_cust = " & Cust_Code & " and fd_acnt_type = " & Ac_Type & " and fd_acnt_no = " & Ac_No
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(, "FD_Credit_Interest_2")
        End If
        Exit Sub
End Sub

Public Sub Debit_Loan_Ledger_Fee(ByVal BranchCode As Integer, ByVal AcntType As Integer, _
                        ByVal AcntNumber As Long, ByVal Ledger_Fee_Debited As Currency, Optional ByVal Close_Loan As Byte)

Dim Sqlstr As String, Byte_Flag As Byte, Trans_Date As Date, Int_Type As Byte, Int_Rate_Code As Integer
Dim Txn_No As Long, Narrat As String, Upd_Recset As New ADODB.Recordset, Recset As New ADODB.Recordset

Dim Disb_Amt As Currency, Cap_Interest As Currency, Cap_Charges As Currency
Dim Principal_Rec As Currency, Cap_Int_Rec As Currency, Cap_Charges_Rec As Currency
Dim Unrec_Int_Amt As Currency, UnRec_Charges As Currency, Principal_Total As Currency
Dim Recovery_Total As Currency, Balance_Total As Currency
Dim Ora_Branch As Byte

    If Ledger_Fee_Debited = 0 Then Exit Sub
    If Set_Connection(BranchCode) <> 0 Then Exit Sub
    
    'kunal 19-042007    Checking the oracle flag for the branch to treat the time field accordingly
    Ora_Branch = 0
    Sqlstr = "select par_no from " & MyClass.ForeignDb & "aks_parameter where par_key = 'ORA_BR'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Post_Payment_in_Loan_0")
    If Recset.EOF = False Then Ora_Branch = IIf(IsNull(Recset!Par_No), 0, Recset!Par_No)
    
    ' If Ledger Fee is NOT applicable for This Loan Category, then DO Nothing
    Sqlstr = "select lm_disb_amt,lm_int_cap,lm_princ_rec,lm_cap_int_rec,lm_unrec_int_amt,lm_unrec_bnk_chg," & _
             "lm_bnk_cap,lm_cap_bnk_rec,int_type, ledg_fee_appl " & _
             " from " & UseDbPrefix & "laccounts," & UseDbPrefix & "loan_ac_categ " & _
             " where lm_hbr_cd = " & BranchCode & " and lm_type_code = " & AcntType & " " & _
             " and lm_ac_srno = " & AcntNumber & " and lm_category = loan_categ "
    Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    If Upd_Recset.EOF = True Then Exit Sub
    If IIf(IsNull(Upd_Recset!Ledg_Fee_Appl), 1, Upd_Recset!Ledg_Fee_Appl) <= 0 Then Exit Sub
    Int_Type = IIf(IsNull(Upd_Recset!Int_Type), 0, Upd_Recset!Int_Type)
    Disb_Amt = IIf(IsNull(Upd_Recset!lm_disb_amt), 0, Upd_Recset!lm_disb_amt)
    Cap_Interest = IIf(IsNull(Upd_Recset!lm_int_cap), 0, Upd_Recset!lm_int_cap)
    Cap_Charges = IIf(IsNull(Upd_Recset!lm_bnk_cap), 0, Upd_Recset!lm_bnk_cap)

    Principal_Rec = IIf(IsNull(Upd_Recset!lm_princ_rec), 0, Upd_Recset!lm_princ_rec)
    Cap_Int_Rec = IIf(IsNull(Upd_Recset!lm_cap_int_rec), 0, Upd_Recset!lm_cap_int_rec)
    Cap_Charges_Rec = IIf(IsNull(Upd_Recset!lm_cap_bnk_rec), 0, Upd_Recset!lm_cap_bnk_rec)

    Unrec_Int_Amt = IIf(IsNull(Upd_Recset!lm_unrec_int_amt), 0, Upd_Recset!lm_unrec_int_amt)
    UnRec_Charges = IIf(IsNull(Upd_Recset!lm_unrec_bnk_chg), 0, Upd_Recset!lm_unrec_bnk_chg)
    
    If Close_Loan = 0 Then
        Principal_Total = Disb_Amt + Cap_Interest + Cap_Charges
        Recovery_Total = Principal_Rec + Cap_Int_Rec + Cap_Charges_Rec
        Balance_Total = Principal_Total - Recovery_Total + Unrec_Int_Amt + UnRec_Charges
        If Balance_Total <= 0 Then Exit Sub
    End If
    
    Call Get_Transaction_No(BranchCode, MyClass.Branch_Working_Date, Txn_No)
    Trans_Date = MyClass.Branch_Working_Date
    Narrat = "Maintenance Fee " + CStr(Month(Trans_Date)) + "/" + CStr(Year(Trans_Date))
    If Int_Type >= 1 Then Narrat = "Maintenance Fee"
    ' Append This Record in Loan Transaction
    If Ora_Branch = 1 Then
        Sqlstr = "insert into " & UseDbPrefix & "ltrans(ltxn_br_cd,ltxn_acnt_year,ltxn_txn_no," & _
                "ltxn_txn_date,ltxn_ac_hbr_cd,ltxn_ac_type_code,ltxn_ac_srno,ltxn_txn_time, " & _
                "ltxn_txn_code,ltxn_dr_cd,ltxn_effective_date,ltxn_amount,ltxn_princ_amt," & _
                "ltxn_interest_amt,ltxn_cap_interest_rec,ltxn_narration,ltxn_chq_no,ltxn_bank_drawn," & _
                "ltxn_chq_date,ltxn_operator,ltxn_post_status,ltxn_cross_ac_hbr_cd,ltxn_cross_ac_type_code," & _
                "ltxn_cross_ac_srno,ltxn_rec_type,ltxn_uncap_bank_chg,ltxn_cap_bank_chg," & _
                "ltxn_int_date_from,ltxn_int_date_till,ltxn_int_rate,ltxn_int_cal_on," & _
                "ltxn_src_prg) values(" & BranchCode & "," & Year(Trans_Date) & "," & Txn_No & "," & _
                "'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & BranchCode & "," & AcntType & "," & AcntNumber & "," & Format(Now(), "HHMM") & "," & _
                "'" & TC_Ledger_Fee & "',1,'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & Ledger_Fee_Debited & ",0," & _
                "0,0,'" & Narrat & "',0,'','01-JAN-1900','" & Left$(gsUser_Login, 3) & "',0,0,0,0,3,0,0," & _
                "'01-JAN-1900','01-JAN-1900',0,0,0)"
    Else
        Sqlstr = "insert into " & UseDbPrefix & "ltrans(ltxn_br_cd,ltxn_acnt_year,ltxn_txn_no," & _
                "ltxn_txn_date,ltxn_ac_hbr_cd,ltxn_ac_type_code,ltxn_ac_srno,ltxn_txn_time, " & _
                "ltxn_txn_code,ltxn_dr_cd,ltxn_effective_date,ltxn_amount,ltxn_princ_amt," & _
                "ltxn_interest_amt,ltxn_cap_interest_rec,ltxn_narration,ltxn_chq_no,ltxn_bank_drawn," & _
                "ltxn_chq_date,ltxn_operator,ltxn_post_status,ltxn_cross_ac_hbr_cd,ltxn_cross_ac_type_code," & _
                "ltxn_cross_ac_srno,ltxn_rec_type,ltxn_uncap_bank_chg,ltxn_cap_bank_chg," & _
                "ltxn_int_date_from,ltxn_int_date_till,ltxn_int_rate,ltxn_int_cal_on," & _
                "ltxn_src_prg) values(" & BranchCode & "," & Year(Trans_Date) & "," & Txn_No & "," & _
                "'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & BranchCode & "," & AcntType & "," & AcntNumber & ",'" & Format(Now(), "HH:MM") & "'," & _
                "'" & TC_Ledger_Fee & "',1,'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & Ledger_Fee_Debited & ",0," & _
                "0,0,'" & Narrat & "',0,'','01-JAN-1900','" & Left$(gsUser_Login, 3) & "',0,0,0,0,3,0,0," & _
                "'01-JAN-1900','01-JAN-1900',0,0,0)"
    End If
    Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    
    ' Also update this Ledger Fee in Loan Master
    ' For Int_Type >= 1 This Ledger Fee will go to Uncapitalized Field; For Int_Type = 0 it will go to Capitalized Bank Charges
    Sqlstr = "Update " & UseDbPrefix & "laccounts set lm_unrec_bnk_chg = lm_unrec_bnk_chg"
    If Int_Type = 0 Then Sqlstr = "Update " & UseDbPrefix & "laccounts set lm_bnk_cap = lm_bnk_cap"
    Sqlstr = Sqlstr & " + " & Format(Ledger_Fee_Debited, "0.00") & _
        " , lm_last_dr_date = '" & Format(Trans_Date, "dd-mmm-yyyy") & "'" & _
        " where lm_hbr_cd = " & BranchCode & " and lm_type_code = " & AcntType & " " & _
        " and lm_ac_srno = " & AcntNumber
    Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    
    Call Update_Cbk_Flag(0)
    Exit Sub
IO_Error:
    End
End Sub


Private Sub FD_Compute_Interest(ByVal Interest_Rate As Currency, ByVal Principal_Amount As Currency, _
                                  ByVal Date_From As Date, ByVal Date_To As Date, _
                                  ByRef Interest_Amt As Currency, ByRef Error_Flag As Byte)

'This Procedure computes FD interest and returns Simple Interest Amount and Error Flag
Dim J As Integer, Long_Var As Long
Dim Tmp_From As Date, Tmp_Till As Date, Days_In_Year As Integer
Dim Range_interest As Currency

    ' Both Date From as well as Date To is to be INCLUDED
    ' i.e. if 10-Jan to 16-Jan then 7 Days Interest (10th,11th,12th,13th,14th,15th,16th)
    Interest_Amt = 0
    Error_Flag = 0
    If Date_To < Date_From Then Exit Sub
    
    ' If Both Date From & Till belong to same Year
    If Year(Date_From) = Year(Date_To) Then
        Days_In_Year = 365
        If Check_Leap(Year(Date_From)) = True Then Days_In_Year = 366
        Interest_Amt = Format(Principal_Amount * Interest_Rate * 0.01 * (Date_To - Date_From + 1) / Days_In_Year, "0.00")
        GoTo Round_Off_Here
    End If
        
    ' Range Pertains to Multiple Years
    Interest_Amt = 0
    For J = Year(Date_From) To Year(Date_To)
        Days_In_Year = 365
        If Check_Leap(J) = True Then Days_In_Year = 366
        Tmp_From = Date_From
        Tmp_Till = Date_To
        If J <> Year(Date_From) Then Tmp_From = CDate("01-01-" + CStr(J))
        If J <> Year(Date_To) Then Tmp_Till = CDate("01-01-" + CStr(J + 1)) - 1
        Range_interest = Format(Principal_Amount * Interest_Rate * 0.01 * (Tmp_Till - Tmp_From + 1) / Days_In_Year, "0.00")
        Interest_Amt = Interest_Amt + Range_interest
    Next J
   
Round_Off_Here:

    ' Round Off This Interest Amount
    If FD_Interest_Round_Off = 0 Then
        Call Get_Loan_Parameter("FD_RND_INT", Long_Var)
        FD_Interest_Round_Off = Long_Var
        If FD_Interest_Round_Off = 0 Then FD_Interest_Round_Off = 1
    End If
    Call round_off_amt(Interest_Amt, FD_Interest_Round_Off, Interest_Amt)
    Exit Sub
End Sub

Private Sub Compute_Loan_Interest(ByVal Int_Type As Byte, ByVal Base_Rate_Code As Byte, ByVal Adnl_Rate As Currency, ByVal Loan_Amount As Currency, _
                                  ByVal Date_From As Date, ByVal Date_To As Date, _
                                  ByRef Interest_Amt As Currency, ByRef Error_Flag As Byte)

'This Procedure computes loan interest and returns Simple Interest Amount and Error Flag
Dim Sqlstr As String, I As Integer, J As Integer
Dim Tmp_From As Date, Tmp_Till As Date, Days_In_Year As Integer
Dim Range_interest As Currency
Dim Dt_From(100) As Date, Dt_Till(100) As Date, Int_Rate(100) As Currency, Num_Range As Byte
Dim Temp_From_Date As Date


On Error GoTo IO_Error

    ' Both Date From as well as Date To is to be INCLUDED
    ' i.e. if 10-Jan to 16-Jan then 7 Days Interest (10th,11th,12th,13th,14th,15th,16th)
    Interest_Amt = 0
    Error_Flag = 0
    If Date_To < Date_From Then Exit Sub
    
    'Get Interest Rate from Database
    If Int_Type <> Prev_Int_Type Or Base_Rate_Code <> Prev_Rate_Code Then
        Sqlstr = "select br_date_from, br_int_rate " & _
                 " from " & MyClass.gUnifyDb & "lbase_rates " & _
                 " where br_rate_type = 'L' and " & _
                 " br_rate_cd = " & Base_Rate_Code & " order by br_date_from "
        Call Fire_Sql(Sqlstr, Interest_RecSet, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        If Interest_RecSet.EOF = True Then GoTo Int_Not_Defined
        Connection_Open_Flag = 1
        Prev_Rate_Code = Base_Rate_Code
        Prev_Int_Type = Int_Type
    End If
   
    ' First of all Decide How Many Interest Rates will be Applicable in desired Date Range
    Num_Range = 0
    If Interest_RecSet.State <> 0 Then Interest_RecSet.MoveFirst
    If Interest_RecSet.State = 1 Then
    Do While Not Interest_RecSet.EOF
        Temp_From_Date = IIf(IsNull(Interest_RecSet!br_date_from), #1/1/1900#, Interest_RecSet!br_date_from)
        If Temp_From_Date <= Date_To Then
            Num_Range = Num_Range + 1
            Dt_From(Num_Range) = Temp_From_Date
            Int_Rate(Num_Range) = IIf(IsNull(Interest_RecSet!br_int_rate), 0, Interest_RecSet!br_int_rate)
            If Num_Range >= 2 Then Dt_Till(Num_Range - 1) = Dt_From(Num_Range) - 1
        End If
        Interest_RecSet.MoveNext
    Loop
    End If
    If Num_Range >= 1 Then Dt_Till(Num_Range) = #12/31/2099#
    If Num_Range = 0 Then
Int_Not_Defined:
        Call MyClass.Display_Message("No Interest Rate Data Available for Loan " + Format(Date_From, "dd-mm-yyyy") + "To " + Format(Date_To, "dd-mm-yyyy") + "Base Rate Code" + CStr(Base_Rate_Code), 1)
        Error_Flag = 1
        Exit Sub
    End If

    ' We have got Interest Table Now in Memory; Add Additional Interest Rate
    If Adnl_Rate <> 0 Then
        For I = 1 To Num_Range
            Int_Rate(I) = Int_Rate(I) + Adnl_Rate
        Next I
    End If
    Interest_Amt = 0
    For I = 1 To Num_Range
        If Dt_Till(I) < Date_From Or Dt_From(I) > Date_To Then GoTo Skip_This

        ' Modify The Range Dates as per our dates
        If Dt_From(I) < Date_From Then Dt_From(I) = Date_From
        If Dt_Till(I) > Date_To Then Dt_Till(I) = Date_To
        If Year(Dt_From(I)) = Year(Dt_Till(I)) Then
            Days_In_Year = 365
            If Check_Leap(Year(Dt_From(I))) = True Then Days_In_Year = 366
            Range_interest = Format(Loan_Amount * Int_Rate(I) * 0.01 * (Dt_Till(I) - Dt_From(I) + 1) / Days_In_Year, "0.00")
            Interest_Amt = Interest_Amt + Range_interest
            GoTo Skip_This
        End If
        
        ' Range Pertains to Multiple Years
        For J = Year(Dt_From(I)) To Year(Dt_Till(I))
            Days_In_Year = 365
            If Check_Leap(J) = True Then Days_In_Year = 366
            Tmp_From = Dt_From(I)
            Tmp_Till = Dt_Till(I)
            If J <> Year(Dt_From(I)) Then Tmp_From = CDate("01-01-" + CStr(J))
            If J <> Year(Dt_Till(I)) Then Tmp_Till = CDate("01-01-" + CStr(J + 1)) - 1
            Range_interest = Format(Loan_Amount * Int_Rate(I) * 0.01 * (Tmp_Till - Tmp_From + 1) / Days_In_Year, "0.00")
            Interest_Amt = Interest_Amt + Range_interest
        Next J
Skip_This:
    Next I
    
    ' Round Off This Interest Amount
    If Interest_Rounding_Paise = 0 Then
        Call Get_Loan_Parameter("ROUND_INT", Interest_Rounding_Paise)
        If Interest_Rounding_Paise = 0 Then Interest_Rounding_Paise = 5
    End If
    Call round_off_amt(Interest_Amt, Interest_Rounding_Paise, Interest_Amt)
    Exit Sub
    
IO_Error:
    Call MyClass.Display_Message("SQL Failure Compute_Loan_Interest" + " Interest Rate Code " + CStr(Base_Rate_Code), 1)
    Error_Flag = 9
    Exit Sub
End Sub


Public Sub Bank_Loan_Open(ByVal BranchCode As Integer, ByVal AccountType As Integer, _
                          ByVal AccountNumber As Long, ByVal uDateFrom As Date, _
                          ByVal uDateTill As Date, ByRef OpgBal_wo_Latest_Interest() As Currency, _
                          ByRef Last_Interest_Computed_Upto As Date, ByRef ErrFlag As Byte)

Dim Sqlstr As String
Dim Rs_TempRecSet As New ADODB.Recordset, rs_Temp As New ADODB.Recordset
Dim First_Loan_Disb_Date As Date, Tran_Date As Date, TranAmt As Currency, RecType As Byte, I As Integer
Dim strDateTill As String, Last_Month_End_Date_Date_From As Date, DbCr_Code As Byte
Dim Int_Type As Byte

On Error GoTo Proc_Error

Start_Again:

    ErrFlag = 1
    strDateTill = Format$(uDateTill, "dd-mmm-yyyy")
    
    'Find Last Month Close Date
    Ledger_Last_Month_Close_date = Month_Begin_Date(uDateTill) - 1
    Last_Month_End_Date_Date_From = Month_Begin_Date(uDateFrom) - 1
    
    ' OpgBal_wo_Latest_Interest(0) = Total Balance 1=Capital Balance 2= Capitalised Interest Balance
    '                           3=Capitalised Bank Charges Balance 4=Uncapitalised Int.Bal
    '                           5 = Uncapitalised Bank Charges Balance
    OpgBal_wo_Latest_Interest(0) = 0
    OpgBal_wo_Latest_Interest(1) = 0
    OpgBal_wo_Latest_Interest(2) = 0
    OpgBal_wo_Latest_Interest(3) = 0
    OpgBal_wo_Latest_Interest(4) = 0
    OpgBal_wo_Latest_Interest(5) = 0
    Last_Interest_Computed_Upto = #1/1/1900#
    If uDateFrom > uDateTill Then Exit Sub
        
    If Set_Connection(BranchCode) <> 0 Then Exit Sub
    
    'check wheter this a/c exits in Loan Master, if not found exit sub
    Sqlstr = "select lm_first_disb_date,int_type from " + UseDbPrefix + "laccounts," & UseDbPrefix & "loan_ac_categ " & _
             " where lm_hbr_cd = " & BranchCode & " and " & _
                   " lm_type_code = " & AccountType & " and " & _
                   " lm_ac_srno = " & AccountNumber & " and lm_category = loan_categ"
    Call Fire_Sql(Sqlstr, Rs_LTran, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo Proc_Error
    If Rs_LTran.EOF Then Exit Sub
    First_Loan_Disb_Date = IIf(IsNull(Rs_LTran!lm_first_disb_date), #1/1/1900#, Rs_LTran!lm_first_disb_date)
    Last_Interest_Computed_Upto = First_Loan_Disb_Date - 1
    Int_Type = IIf(IsNull(Rs_LTran!Int_Type), 0, Rs_LTran!Int_Type)
    Save_Int_Type = Int_Type
    
    ' Was Loan Disbursed after User Specified Date ?
    If Last_Interest_Computed_Upto > uDateTill Then Exit Sub
    
    'Now Make Record sets for Loan Transactions
    Sqlstr = "select * from " + UseDbPrefix + "ltrans " & _
              " where ltxn_ac_hbr_cd = " & BranchCode & " and " & _
                    " ltxn_ac_type_code = " & AccountType & " and " & _
                    " ltxn_ac_srno = " & AccountNumber & " and " & _
                    " ltxn_effective_date <= '" & strDateTill & "'" & _
                    " order by ltxn_effective_date,ltxn_txn_no "
    Call Fire_Sql(Sqlstr, Rs_LTran, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo Proc_Error
    
    ' Work Out Opening Balances from Transactions
    Do While Not Rs_LTran.EOF
        Tran_Date = IIf(IsNull(Rs_LTran!ltxn_effective_date), CDate(Rs_LTran!ltxn_txn_date), Rs_LTran!ltxn_effective_date)
        If Tran_Date > uDateFrom - 1 Then GoTo Opg_Bal_Found
        If Tran_Date < First_Loan_Disb_Date Then
            Sqlstr = "update " + UseDbPrefix + "laccounts set lm_first_disb_date = '" & Format(Tran_Date, "dd-mmm-yyyy") & "'" & _
                    " where lm_hbr_cd = " & BranchCode & " and " & _
                    " lm_type_code = " & AccountType & " and " & _
                    " lm_ac_srno = " & AccountNumber
            Call Fire_Sql(Sqlstr, Rs_TempRecSet, Sql_Error, Use_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo Proc_Error
            GoTo Start_Again
        End If
        RecType = IIf(IsNull(Rs_LTran!ltxn_rec_type), 0, Rs_LTran!ltxn_rec_type)
        TranAmt = IIf(IsNull(Rs_LTran!ltxn_amount), 0, Rs_LTran!ltxn_amount)
        DbCr_Code = IIf(IsNull(Rs_LTran!ltxn_dr_cd), 1, Rs_LTran!ltxn_dr_cd)
        
        ' In case of Disbursement (RecType = 1) Total Amount is PRINCIPAL Amount
        If RecType = 1 Then
            If DbCr_Code <= 1 Then OpgBal_wo_Latest_Interest(1) = OpgBal_wo_Latest_Interest(1) + TranAmt
            If DbCr_Code >= 2 Then OpgBal_wo_Latest_Interest(1) = OpgBal_wo_Latest_Interest(1) - TranAmt
        End If
        
        ' In case of Interest Debit (RecType = 2) Total Amount is Interest Amount,
        ' but we do not know whether it has to go against Cap.Interest or Uncap.Interest
        If RecType = 2 Then
            Last_Interest_Computed_Upto = IIf(IsNull(Rs_LTran!ltxn_int_date_till), #1/1/1900#, Rs_LTran!ltxn_int_date_till)
            If Tran_Date <= Last_Month_End_Date_Date_From And Int_Type = 0 Then
                If DbCr_Code <= 1 Then OpgBal_wo_Latest_Interest(2) = OpgBal_wo_Latest_Interest(2) + TranAmt
                If DbCr_Code >= 2 Then OpgBal_wo_Latest_Interest(2) = OpgBal_wo_Latest_Interest(2) - TranAmt
            Else
                If DbCr_Code <= 1 Then OpgBal_wo_Latest_Interest(4) = OpgBal_wo_Latest_Interest(4) + TranAmt
                If DbCr_Code >= 2 Then OpgBal_wo_Latest_Interest(4) = OpgBal_wo_Latest_Interest(4) - TranAmt
            End If
        End If
        
        ' In case of Bank Charges Debit (RecType = 3) Total Amount is bank Charges,
        ' but we do not know whether it has to go against Cap.Bank Charges or Uncap.Bank Charges
        If RecType = 3 Then
            If Tran_Date <= Last_Month_End_Date_Date_From And Int_Type = 0 Then
                If DbCr_Code <= 1 Then OpgBal_wo_Latest_Interest(3) = OpgBal_wo_Latest_Interest(3) + TranAmt
                If DbCr_Code >= 2 Then OpgBal_wo_Latest_Interest(3) = OpgBal_wo_Latest_Interest(3) - TranAmt
            Else
                If DbCr_Code <= 1 Then OpgBal_wo_Latest_Interest(5) = OpgBal_wo_Latest_Interest(5) + TranAmt
                If DbCr_Code >= 2 Then OpgBal_wo_Latest_Interest(5) = OpgBal_wo_Latest_Interest(5) - TranAmt
            End If
        End If
        
        ' In case of Recoveries Break-up is already available in Table
        If RecType >= 11 Then
            If DbCr_Code >= 2 Then
                OpgBal_wo_Latest_Interest(1) = OpgBal_wo_Latest_Interest(1) - IIf(IsNull(Rs_LTran!ltxn_princ_amt), 0, Rs_LTran!ltxn_princ_amt)
                OpgBal_wo_Latest_Interest(2) = OpgBal_wo_Latest_Interest(2) - IIf(IsNull(Rs_LTran!ltxn_cap_interest_rec), 0, Rs_LTran!ltxn_cap_interest_rec)
                OpgBal_wo_Latest_Interest(3) = OpgBal_wo_Latest_Interest(3) - IIf(IsNull(Rs_LTran!ltxn_cap_bank_chg), 0, Rs_LTran!ltxn_cap_bank_chg)
                If Tran_Date <= Last_Month_End_Date_Date_From And Int_Type = 0 Then
                    OpgBal_wo_Latest_Interest(2) = OpgBal_wo_Latest_Interest(2) - IIf(IsNull(Rs_LTran!ltxn_interest_amt), 0, Rs_LTran!ltxn_interest_amt)
                    OpgBal_wo_Latest_Interest(3) = OpgBal_wo_Latest_Interest(3) - IIf(IsNull(Rs_LTran!ltxn_uncap_bank_chg), 0, Rs_LTran!ltxn_uncap_bank_chg)
                Else
                    OpgBal_wo_Latest_Interest(4) = OpgBal_wo_Latest_Interest(4) - IIf(IsNull(Rs_LTran!ltxn_interest_amt), 0, Rs_LTran!ltxn_interest_amt)
                    OpgBal_wo_Latest_Interest(5) = OpgBal_wo_Latest_Interest(5) - IIf(IsNull(Rs_LTran!ltxn_uncap_bank_chg), 0, Rs_LTran!ltxn_uncap_bank_chg)
                End If
            End If
            If DbCr_Code <= 1 Then
                OpgBal_wo_Latest_Interest(1) = OpgBal_wo_Latest_Interest(1) + IIf(IsNull(Rs_LTran!ltxn_princ_amt), 0, Rs_LTran!ltxn_princ_amt)
                OpgBal_wo_Latest_Interest(2) = OpgBal_wo_Latest_Interest(2) + IIf(IsNull(Rs_LTran!ltxn_cap_interest_rec), 0, Rs_LTran!ltxn_cap_interest_rec)
                OpgBal_wo_Latest_Interest(3) = OpgBal_wo_Latest_Interest(3) + IIf(IsNull(Rs_LTran!ltxn_cap_bank_chg), 0, Rs_LTran!ltxn_cap_bank_chg)
                If Tran_Date <= Last_Month_End_Date_Date_From And Int_Type = 0 Then
                    OpgBal_wo_Latest_Interest(2) = OpgBal_wo_Latest_Interest(2) + IIf(IsNull(Rs_LTran!ltxn_interest_amt), 0, Rs_LTran!ltxn_interest_amt)
                    OpgBal_wo_Latest_Interest(3) = OpgBal_wo_Latest_Interest(3) + IIf(IsNull(Rs_LTran!ltxn_uncap_bank_chg), 0, Rs_LTran!ltxn_uncap_bank_chg)
                Else
                    OpgBal_wo_Latest_Interest(4) = OpgBal_wo_Latest_Interest(4) + IIf(IsNull(Rs_LTran!ltxn_interest_amt), 0, Rs_LTran!ltxn_interest_amt)
                    OpgBal_wo_Latest_Interest(5) = OpgBal_wo_Latest_Interest(5) + IIf(IsNull(Rs_LTran!ltxn_uncap_bank_chg), 0, Rs_LTran!ltxn_uncap_bank_chg)
                End If
            End If
        End If
        Rs_LTran.MoveNext
    Loop
    
Opg_Bal_Found:
 
    OpgBal_wo_Latest_Interest(0) = 0
    ' Store These Opening Balances in our Variables for Later use
    For I = 1 To 5
        CloseBal(I) = OpgBal_wo_Latest_Interest(I)
        OpgBal_wo_Latest_Interest(0) = OpgBal_wo_Latest_Interest(0) + OpgBal_wo_Latest_Interest(I)
    Next I
    CloseBal(0) = OpgBal_wo_Latest_Interest(0)
    ErrFlag = 0
    Exit Sub

Proc_Error:
    Call errHandler("LibClass/Bank_Loan_Open")
    ErrFlag = 1
    Exit Sub
End Sub

Public Function Find_Valid_CardHolder(ByVal Cust_Home_Branch As Integer, ByVal Cust_Code As Long, ByVal AcType As Integer, ByVal AcNo As Long, Optional Current_Connection As Integer) As Byte
Dim Sqlstr As String, Recset As New ADODB.Recordset

    Find_Valid_CardHolder = 1
    If Current_Connection <> 0 Then
        Use_Connection = Current_Connection
        UseDbPrefix = MyClass.ATM_DB
        GoTo A100
    End If
    If Set_Connection(Cust_Home_Branch) <> 0 Then Exit Function
    
A100:

    Sqlstr = "select f_card_no from " & UseDbPrefix & "nsav_account " & _
             " where br_code = " & Cust_Home_Branch & _
             " and type_code = " & AcType & _
             " and ac_srno = " & AcNo & _
             " and cust_idno = " & Cust_Code
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Exit Function
    If Recset.EOF = True Then Exit Function
    If IIf(IsNull(Recset!F_Card_No), 0, Recset!F_Card_No) > 0 Then Exit Function
    Find_Valid_CardHolder = 0
    Exit Function
End Function

Public Sub GetLedgerMonthYear(ByRef Pn_Year As Integer, ByRef Pn_Month As Byte, ByRef Pn_ErrFlag As Byte)
'''to get the Month & Year for the Ledger Fee
Dim rs_Param As New ADODB.Recordset, Sqlstr As String

    Pn_Year = 0
    Pn_Month = 0
    Pn_ErrFlag = 0
    Sqlstr = "select ledger_month,ledger_year from " & MyClass.gUnifyDb & "nsav_sysparam where home_branch = " & MyClass.Unit_Code
    Call Fire_Sql(Sqlstr, rs_Param, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/GetLedgerMonthYear_1")
    If Not rs_Param.EOF Then
        Pn_Year = rs_Param!ledger_year
        Pn_Month = rs_Param!ledger_month
    End If
    Exit Sub
End Sub

Public Sub GET_SignatureInfo(ByVal Pn_BrCode As Integer, ByVal Pn_CustId As Long, ByRef Sign_Array() As String, ByRef Pn_ErrFlag As Integer)
Dim Sqlstr As String, rs_Signatory As New ADODB.Recordset
Dim FileName As String, SignName As String, DL_No As String, Passport_No As String, ID_No As String
Dim SigSrno As Long, Thumb_Flag As Byte, ErrNum As Byte, I As Integer
Dim Num_Signatories As Byte, Num_Sig As Byte, Num_Photo As Byte, Num_Thumb As Byte

    Pn_ErrFlag = 1
    '******* Delete existing Sign files from c:\sign
    For I = 1 To 4
        If Len(Dir(Card_Sig_Dest_Directory & "\" & "Sign" & I & ".bmp")) > 0 Then Kill Card_Sig_Dest_Directory & "\" & "Sign" & I & ".bmp"
        Sign_Array(I) = ""
    Next

    If Set_Connection(Pn_BrCode) <> 0 Then Exit Sub
    
    '*** Select all signatory records of this Account
    Sqlstr = "select * from " & UseDbPrefix & "signatory where sig_br_cd=" & Pn_BrCode & " and cust_idno=" & Pn_CustId & " order by sig_srno "
    Call Fire_Sql(Sqlstr, rs_Signatory, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_Signature_Info_1")
    If rs_Signatory.EOF Then
        MsgBox "No Signatories Are Defined for this Account "
        Exit Sub
    End If
        
    Num_Signatories = 0
    Num_Sig = 0
    Num_Photo = 0
    Num_Thumb = 0
    
    Do While Not rs_Signatory.EOF
        SigSrno = Format(IIf(IsNull(rs_Signatory!sig_srno), 0, rs_Signatory!sig_srno), "00")
        If SigSrno < 1 Or SigSrno > 4 Then GoTo Next_Record
        Thumb_Flag = IIf(IsNull(rs_Signatory!Sig_Thumb_Flag), 0, rs_Signatory!Sig_Thumb_Flag)
        If Thumb_Flag = 0 Then
            SignName = "Sign" & SigSrno & ".bmp"
            Num_Signatories = Num_Signatories + 1
            Sign_Array(SigSrno) = Card_Sig_Dest_Directory & "\" & SignName
        End If
         If Thumb_Flag >= 1 Then
            Num_Thumb = Num_Thumb + 1
             '*** If Thumb_flag <> 0 then at least 1 ID must exist
            DL_No = Trim$(IIf(IsNull(rs_Signatory!Sig_Drv_Lic_No), "", rs_Signatory!Sig_Drv_Lic_No))
            Passport_No = Trim$(IIf(IsNull(rs_Signatory!Sig_Passport_No), "", rs_Signatory!Sig_Passport_No))
            ID_No = Trim$(IIf(IsNull(rs_Signatory!Sig_Id_No), "", rs_Signatory!Sig_Id_No))
            If DL_No = "" And Passport_No = "" And ID_No = "" Then
                MsgBox " No ID Defined for Thumb Impression Signatory ! Card cannot be Issued "
                Exit Sub
            End If
         End If
Next_Record:
        rs_Signatory.MoveNext
    Loop
    
    'Fetch Signatures for this customer
    If Num_Signatories > 0 Then
        Call MyClass.Fetch_Sig_Photo(Pn_BrCode, Pn_CustId, 1, Num_Signatories, Num_Sig, Num_Photo)
        If Num_Sig <= 0 Then
            MsgBox " Signatures not Found ! Card cannot be Issued "
            Exit Sub
        End If
        If Num_Signatories <> Num_Sig Then
            MsgBox "Insufficient Signatures, Scan All signatures for this customer"
            Exit Sub
        End If
    End If
    Pn_ErrFlag = 0
    Exit Sub
End Sub

Public Sub Change_CardStatus(ByVal CardNo As Long, ByVal New_Status As Byte, ByRef Err_Flag As Integer)
Dim Temp_Account As UnPacked_AccountRecord
    Temp_Account.Card_Status = New_Status
    Call Revise_Account_Pool(Temp_Account)
    Call Update_FFBSCard(Err_Flag)
    If Err_Flag <> 0 Then
        MsgBox " Error in Updating Card Status"
        Exit Sub
    End If
End Sub
Public Sub Cancel_HotList(ByVal Rs_HotList As ADODB.Recordset)
Dim Sqlstr As String, Operator As String, Operator_Date As Date, Operator_Time As String
Dim Cancel_Flag As Byte, cancel_date As Date, Table_Name As String
Dim Update_String As String, Insert_String As String, HotList_Rowid As Long, Hbr_Code As Integer
Dim Cust_IdNo As Long, Type_Code As Integer, Ac_SrNo As Long, Hot_Type As Byte, Card_No As Long
Dim Hot_Date As Date, Hot_Time As Integer, Rs_Set As New ADODB.Recordset

    '--------------------pass the values into the variables-------------------------------
    HotList_Rowid = Rs_HotList!Row_Id
    Operator = gsUser_Login
    Operator_Date = Date
    Operator_Time = Now()
    Cancel_Flag = 1
    cancel_date = Date
    Hbr_Code = Rs_HotList!Hbr_Code
    Cust_IdNo = Rs_HotList!Cust_IdNo
    Type_Code = Rs_HotList!Type_Code
    Ac_SrNo = Rs_HotList!Ac_SrNo
    Hot_Type = Rs_HotList!Hot_Type
    Card_No = Rs_HotList!Card_No
    Hot_Date = Rs_HotList!Hot_Date
    Hot_Time = IIf(IsNull(Rs_HotList!Hot_Time), 0, Rs_HotList!Hot_Time)
        
    If Set_Connection(Hbr_Code) <> 0 Then Exit Sub
    
    '---------------------------------------------------------------------------------------
    'Update record in HOTLIST
    Sqlstr = " Update " & UseDbPrefix & "hotlist Set operator='" & Operator & "'" & "," & _
          " operator_date='" & Format(Operator_Date, "dd-mmm-yyyy") & "'" & "," & _
          " operator_time=" & Format(Operator_Time, "HHMM") & "" & "," & _
          " canflag=" & Cancel_Flag & ", cancel_date='" & Format(cancel_date, "dd-mmm-yyyy") & "'" & _
          " Where hbr_code=" & MyClass.Unit_Code & " and row_id=" & HotList_Rowid
    Call Fire_Sql(Sqlstr, Rs_Set, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo Proc_Error
    If recs_read <> 1 Then
        MsgBox "Logical Error in Cancelling Hotlist !"
        Exit Sub
    End If
 
     Update_String = " Set canflag=" & Cancel_Flag & ",cancel_date='" & Format(cancel_date, "dd-mmm-yyyy") & "'" & _
                     " Where hbr_code=" & MyClass.Unit_Code & " and row_id = " & HotList_Rowid
                 
     Insert_String = " ( hbr_code,row_id,cust_idno, type_code,ac_srno,hot_type," & _
             " card_no,hot_date,hot_time, canflag,cancel_date) Values(" & Hbr_Code & _
               "," & HotList_Rowid & "," & Cust_IdNo & "," & Type_Code & "," & Ac_SrNo & "," & Hot_Type & _
               "," & Card_No & "," & "'" & Format(Hot_Date, "dd-mmm-yyyy") & "'" & _
               "," & Hot_Time & "," & Cancel_Flag & "," & "'" & Format(cancel_date, "dd-mmm-yyyy") & "'" & ")"
    
     'First try to Update record in Export_HOTLIST_HR
     Table_Name = "export_hotlist_hr "
     Sqlstr = " Update " & UseDbPrefix & Table_Name & Update_String
     Call Fire_Sql(Sqlstr, Rs_Set, Sql_Error, Use_Connection, recs_read)
     If Sql_Error <> 0 Then GoTo Proc_Error
     
     '''If record not found in the export table, then Insert in export_hotlist_hr
     If recs_read <= 0 Then
         Sqlstr = " Insert into " & UseDbPrefix & Table_Name & Insert_String
         Call Fire_Sql(Sqlstr, Rs_Set, Sql_Error, Use_Connection, recs_read)
         If Sql_Error <> 0 Then GoTo Proc_Error
     End If
        
    'Now try to update record in export_HOTLIST_DL
    Table_Name = "export_hotlist_dl "
    Sqlstr = " Update " & UseDbPrefix & Table_Name & Update_String
    Call Fire_Sql(Sqlstr, Rs_Set, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo Proc_Error
    '''If record not found in the export table then read details from hotlist table & insert in export
    If recs_read <= 0 Then
        Table_Name = ".export_hotlist_dl"
        Sqlstr = " Insert into " & UseDbPrefix & Table_Name & Insert_String
        Call Fire_Sql(Sqlstr, Rs_Set, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo Proc_Error
    End If
    Exit Sub
Proc_Error:
    
    Call MyClass.Display_Message("SQL I/O Error in MyLibClass/Cancel_Hotlist")
    Exit Sub
End Sub
Public Function Get_CoolDays(ByRef gn_CoolDays, ByRef ErrFlag As Byte)
'function to get Cool Days
Dim Sqlstr As String, Recset As New ADODB.Recordset

    gn_CoolDays = 0
    ErrFlag = 0
    Sqlstr = " Select par_no From " & MyClass.gUnifyDb & "aks_parameter Where par_key='COOL_DAYS'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then ErrFlag = 1
    If Not Recset.EOF Then gn_CoolDays = Val(Recset!Par_No)
End Function


Public Sub GetDocNo(ByVal Pn_BrCode As Integer, ByVal Pd_DocDate As Date, ByVal Pn_DocCode As Long, ByVal Pn_GenType As Byte, _
                    ByRef Pn_DocNo As Long, ByRef Pn_SuccessFlag As Byte, Optional ByVal Pn_AcType As Integer, Optional ByVal Pn_AcNo As Long)
                    
' Pn_DocCode = 10  HotList
' Pn_DocCode = 20  Card_Mst
' Pn_DocCode = 30  Nsav_Txn
' Pn_GenType = 1 Document No
'             = 2 RowId or Key
Dim Sqlstr As String, Recset As New ADODB.Recordset, Rs_Txn As New ADODB.Recordset
Dim NumberGen As Long

    Pn_SuccessFlag = 1
    If Pn_DocCode = 30 Then
        Pn_DocNo = 0
        Exit Sub
    End If

    If Set_Connection(Pn_BrCode) <> 0 Then Exit Sub
    
Select Case Pn_DocCode
    Case 10
        If Pn_GenType = 2 Then Sqlstr = "select max(row_id) from " & UseDbPrefix & "hotlist"
    Case 20
        If Pn_GenType = 1 Then Sqlstr = " select max(crd_card_no) from " & UseDbPrefix & "card_mst"
    Case 30
        If Pn_GenType = 1 Then
            Sqlstr = " select par_no from " & UseDbPrefix & "parameter where par_key='TXN_NO'"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
            If Sql_Error <> 0 Then Exit Sub
            NumberGen = IIf(IsNull(Recset.Fields(0)), 0, Recset.Fields(0)) + 1
            Sqlstr = "select nsav_txn.txn_no,foreign_sav_txn.txn_no from " & UseDbPrefix & "nsav_txn," & UseDbPrefix & "foreign_sav_txn " & _
                        " where ( nsav_txn.txn_br_code =" & Pn_BrCode & " and nsav_txn.txn_no=" & NumberGen & _
                        " ) or ( foreign_sav_txn.txn_br_code =" & Pn_BrCode & " and foreign_sav_txn.txn_no=" & NumberGen & ")"
            Call Fire_Sql(Sqlstr, Rs_Txn, Sql_Error, Use_Connection, recs_read)
            If Sql_Error <> 0 Then Exit Sub
            If Not Rs_Txn.EOF Then
                Sqlstr = "select max(txn_no) from " & UseDbPrefix & "nsav_txn where txn_br_code=" & Pn_BrCode
                Call Fire_Sql(Sqlstr, Rs_Txn, Sql_Error, Use_Connection, recs_read)
                If Sql_Error <> 0 Then Exit Sub
                
                NumberGen = IIf(IsNull(Rs_Txn.Fields(0)), 0, Rs_Txn.Fields(0))
                
                Sqlstr = "select max(txn_no) from " & UseDbPrefix & "foreign_sav_txn where txn_br_code=" & Pn_BrCode
                Call Fire_Sql(Sqlstr, Rs_Txn, Sql_Error, Use_Connection, recs_read)
                If Sql_Error <> 0 Then Exit Sub
                
                If NumberGen < IIf(IsNull(Rs_Txn.Fields(0)), 0, Rs_Txn.Fields(0)) Then NumberGen = IIf(IsNull(Rs_Txn.Fields(0)), 0, Rs_Txn.Fields(0))
                NumberGen = NumberGen + 1
            
                Do While True
                    Sqlstr = "select nsav_txn.txn_no,foreign_sav_txn.txn_no from " & UseDbPrefix & "nsav_txn," & UseDbPrefix & "foreign_sav_txn " & _
                                " where ( nsav_txn.txn_br_code =" & Pn_BrCode & " and nsav_txn.txn_no=" & NumberGen & _
                                " ) or ( foreign_sav_txn.txn_br_code =" & Pn_BrCode & " and foreign_sav_txn.txn_no=" & NumberGen & ")"
                    Call Fire_Sql(Sqlstr, Rs_Txn, Sql_Error, Use_Connection, recs_read)
                    If Sql_Error <> 0 Then Exit Sub
                    If Rs_Txn.EOF() Then Exit Do
                    NumberGen = NumberGen + 1
                Loop
            End If
        End If
End Select

    If Pn_DocCode = 30 And Pn_GenType = 1 Then
        Pn_DocNo = NumberGen
        Sqlstr = " update " & UseDbPrefix & "parameter set par_no=" & Pn_DocNo & " where par_key='TXN_NO'"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Exit Sub
    Else
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Exit Sub
        NumberGen = IIf(IsNull(Recset.Fields(0)), 0, Recset.Fields(0))
        Pn_DocNo = NumberGen + 1
    End If
    Pn_SuccessFlag = 0
    Exit Sub
End Sub
Public Sub SbalRec_InsUpdate(ByVal Pn_Hbr_Code As Integer, ByVal Pn_Cust_Idno As Long, _
                ByVal Pn_Type_Code As Integer, ByVal Pn_Ac_Srno As Long, _
                ByVal Pd_Clear_Date As Date, ByVal Txn_Amt As Currency, ByVal Commission_Amt As Currency, ByRef Pn_Error_Flag As Long)

Dim RecsetBal As New ADODB.Recordset, Sqlstr As String

    Pn_Error_Flag = 1

    If Set_Connection(Pn_Hbr_Code) <> 0 Then Exit Sub
    
    Sqlstr = " select sbal_month_debit,sbal_month_credit from " & UseDbPrefix & "sbal_rec where sbal_hbr_code = " & _
            Pn_Hbr_Code & " and cust_idno = " & Pn_Cust_Idno & " and sbal_acc_type = " & Pn_Type_Code & _
          " and sbal_acc_no = " & Pn_Ac_Srno & " and sbal_date = '" & Format(Pd_Clear_Date, "dd-mmm-yyyy") & "'"
    Call Fire_Sql(Sqlstr, RecsetBal, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/SBalRec_InsUPdate_1")
    If RecsetBal.EOF Then
        Sqlstr = "insert into " & UseDbPrefix & "sbal_rec (sbal_hbr_code,cust_idno,sbal_acc_type,sbal_acc_no,sbal_date," & _
              "sbal_month_debit,sbal_month_credit) values (" & Pn_Hbr_Code & "," & Pn_Cust_Idno & "," & _
               Pn_Type_Code & "," & Pn_Ac_Srno & ",'" & Format(Pd_Clear_Date, "dd-mmm-yyyy") & "',0,0)"
        Call Fire_Sql(Sqlstr, RecsetBal, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/SBalRec_InsUPdate_2")
    End If
    
    If Txn_Amt <> 0 Then
        Sqlstr = "update " & UseDbPrefix & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Txn_Amt
        If Txn_Amt > 0 Then Sqlstr = "update " & UseDbPrefix & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Txn_Amt
        Sqlstr = Sqlstr + " where sbal_hbr_code = " & _
                 Pn_Hbr_Code & " and cust_idno = " & Pn_Cust_Idno & " and sbal_acc_type = " & Pn_Type_Code & _
                 " and sbal_acc_no = " & Pn_Ac_Srno & " and sbal_date = '" & Format(Pd_Clear_Date, "dd-mmm-yyyy") & "'"
        Call Fire_Sql(Sqlstr, RecsetBal, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/SBalRec_InsUPdate_3")
    End If
    If Commission_Amt <> 0 Then
        Sqlstr = "update " & UseDbPrefix & "sbal_rec set sbal_month_debit = sbal_month_debit - " & Commission_Amt
        If Commission_Amt > 0 Then Sqlstr = "update " & UseDbPrefix & "sbal_rec set sbal_month_credit = sbal_month_credit + " & Commission_Amt
        Sqlstr = Sqlstr + " where sbal_hbr_code = " & _
                 Pn_Hbr_Code & " and cust_idno = " & Pn_Cust_Idno & " and sbal_acc_type = " & Pn_Type_Code & _
                 " and sbal_acc_no = " & Pn_Ac_Srno & " and sbal_date = '" & Format(Pd_Clear_Date, "dd-mmm-yyyy") & "'"
        Call Fire_Sql(Sqlstr, RecsetBal, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/SBalRec_InsUPdate_4")
    End If
    Pn_Error_Flag = 0
End Sub
Public Sub Salary_Loan_Recovery(ByVal Cust_Branch As Integer, ByVal Cust_Code As Long, ByVal Ac_Type As Integer, ByVal Ac_No As Long, _
                               ByVal Salary_Type As Byte, ByVal Salary_Txn_Code As String, _
                               ByVal Salary_Amount As Currency, ByVal Salary_Clear_Date As Date, _
                               ByRef Err_Flag As Integer, Optional Blk_Amt As Currency, Optional ByVal Pkg_Begin_Date As Date, Optional Pkg_Opg_Bal As Currency)

Dim Sqlstr As String, Arrear_RecSet As New ADODB.Recordset, Rs_Laccounts As New ADODB.Recordset
Dim RsFutureTxn As New ADODB.Recordset, RsDelete As New ADODB.Recordset
Dim Ac_Recset As New ADODB.Recordset, Rs_Parameter As New ADODB.Recordset

Dim Arrear_Amount As Currency, Deduction_Ceiling_Amt As Currency
Dim Loan_AcType As Integer, Loan_AcNo As Long, I As Byte
Dim Clear_bal As Currency, UnClear_bal As Currency, Block_Amount As Currency
Dim Drawing_Power As Currency, Recovery_Amt As Currency, Transaction_number As Long
Dim Transaction_Time As Integer, Commission_Amt As Currency, InstFreq As Byte, InstAmt As Currency
Dim TotTxnAmt As Currency, TotBnkChg As Currency, AvailableAmt As Currency
Dim Trfr_To_Loan_Commission As Currency ' moved from global variable
Dim Byte_Flag As Byte, Due_Date As Date, Amt_Accepted As Currency, Loan_Txn_No As Long
Dim Ledger_Fee_Deducted As Currency  ' amount deducted for TS customer as ledger fee
Dim Loan_Balance As Currency, Unrec_Int_Amt As Currency
Dim Deduct_Loan_From_Salary As Byte, Percentage_Deduction As Integer
Dim PayRecset As New ADODB.Recordset

    Err_Flag = 9
    
    If Set_Connection(Cust_Branch) <> 0 Then Exit Sub
    
    ' Process for SAL CRC SLC or TPC Transactions only
    If (Salary_Txn_Code <> TC_Salary_Immediate_Credit And Salary_Txn_Code <> TC_Credit_Clearance _
        And Salary_Txn_Code <> TC_Salary_Cheque_Credit And Salary_Txn_Code <> TC_Tea_Payment_Credit And _
        Salary_Txn_Code <> TC_PEN And Salary_Txn_Code <> TC_MPC And Salary_Txn_Code <> TC_CPC) Then Exit Sub
    
    ' Do Not Process for Post Dated Salary Cheques
    If Salary_Clear_Date > MyClass.Branch_Working_Date Then Exit Sub
    If Salary_Amount <= 0 Then Exit Sub
    
    ' If No Ceiling is specified, then No Limit
    Deduction_Ceiling_Amt = 999999999.99
    ' In case of Salary Payment, We have to Deduct Installment, but not beyond Salary Amt
    If Salary_Type = 0 Then Deduction_Ceiling_Amt = Salary_Amount
    If Salary_Type = 1 Or Salary_Type = 2 Then
        Sqlstr = "select * from " & UseDbPrefix & "aks_parameter where par_key='TMINIBONUS'"
        If Salary_Type = 2 Then Sqlstr = "select * from " & UseDbPrefix & "aks_parameter where par_key='TMAINBONUS'"
        Call Fire_Sql(Sqlstr, Rs_Parameter, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Salary_Loan_Recovery_2")
        If Salary_Type = 1 Then Deduction_Ceiling_Amt = Salary_Amount * 0.5         ''' By default 50% of Minibonus to be used for Loan Recovery
        If Salary_Type = 2 Then Deduction_Ceiling_Amt = Salary_Amount
        If Not Rs_Parameter.EOF Then
            Percentage_Deduction = IIf(IsNull(Rs_Parameter!Par_No), 0, Rs_Parameter!Par_No) / 100
            If Percentage_Deduction <= 0 Then Percentage_Deduction = 100
            Deduction_Ceiling_Amt = (Salary_Amount * Percentage_Deduction) / 100
            If Percentage_Deduction = 100 Then Deduction_Ceiling_Amt = 999999999.99
        End If
    End If
    
    ' Compute Bank Commission on ALR
    Err_Flag = 0
    Trfr_To_Loan_Commission = Prev_ALR_Commission
    If Ac_Type <> Prev_ALR_Ac_Type Then
        Call Calculate_BankCharge(TC_Transfer_To_Loan, Ac_Type, "", 0, 0, Trfr_To_Loan_Commission)
        Prev_ALR_Ac_Type = Ac_Type
        Prev_ALR_Commission = Trfr_To_Loan_Commission
    End If
    Commission_Amt = 0 - Trfr_To_Loan_Commission

    ' Find Out Unclosed Loan Accounts of this customer
    ' We take either Inst_Freq = 9 cases or recov_salary >=1 cases
    ' In case of Install Freq 9, we have to Deduct Installment Amount
    ' In case of recov_salary >= 1 then we have to deduct Loan Balance
    Sqlstr = "select lm_install_freq,lm_latest_install_amt,lm_type_code,lm_ac_srno, " & _
            "recov_salary from " & UseDbPrefix & _
            "laccounts ," & UseDbPrefix & "loan_ac_categ where lm_hbr_cd = " & _
            MyClass.Unit_Code & " and lm_sav_cust_idno = " & Cust_Code & _
            " and lm_sav_ac_type_code = " & Ac_Type & " and lm_sav_ac_srno = " & Ac_No & _
            " and lm_type_code < " & Loan_Type_For_SalAdv & " and lm_ac_status = 0 and lm_category = loan_categ and " & _
            "(lm_install_freq = 9 or recov_salary >= 1)"
    Call Fire_Sql(Sqlstr, Arrear_RecSet, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Salary_Loan_Recovery_4")
    If Arrear_RecSet.EOF = True Then Exit Sub
    
    ' Work Out Block Amount for This Account
    If Blk_Amt = 0 Then
        Sqlstr = "select block_amt from " & UseDbPrefix & "nsav_account where br_code = " & MyClass.Unit_Code & _
                " and cust_idno = " & Cust_Code & " and type_code = " & Ac_Type & " and ac_srno = " & Ac_No & " order by type_code "
        Call Fire_Sql(Sqlstr, Ac_Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Salary_Loan_Recovery_5")
        If Ac_Recset.EOF = True Then Exit Sub
        Block_Amount = IIf(IsNull(Ac_Recset!Block_Amt), 0, Ac_Recset!Block_Amt)
    Else
        Block_Amount = Blk_Amt
    End If
    
    ' Get Customer Balance.
    Call Get_Customer_Balance(MyClass.Unit_Code, Cust_Code, Ac_Type, Ac_No, MyClass.Branch_Working_Date, Clear_bal, UnClear_bal, Pkg_Begin_Date, Pkg_Opg_Bal)
    Drawing_Power = Clear_bal - Block_Amount
    AvailableAmt = Drawing_Power
    If AvailableAmt <= 0 Then Exit Sub
    
    Do While Arrear_RecSet.EOF = False
        Deduct_Loan_From_Salary = IIf(IsNull(Arrear_RecSet!Recov_Salary), 0, Arrear_RecSet!Recov_Salary)
        InstFreq = IIf(IsNull(Arrear_RecSet!lm_install_freq), 0, Arrear_RecSet!lm_install_freq)
        Loan_AcType = IIf(IsNull(Arrear_RecSet!lm_type_code), 0, Arrear_RecSet!lm_type_code)
        Loan_AcNo = IIf(IsNull(Arrear_RecSet!lm_ac_srno), 0, Arrear_RecSet!lm_ac_srno)
        InstAmt = IIf(IsNull(Arrear_RecSet!lm_latest_install_amt), 0, Arrear_RecSet!lm_latest_install_amt)
        If InstAmt = 0 Then
            '#*#* Modified on 14/06/05
            'Fetch Installment Amount from lrepay table for this loan account
            Sqlstr = "select pay_install_amt from " & UseDbPrefix & "lrepay where pay_hbr_cd = " & Cust_Branch & " and " & _
                    " pay_type_code = " & Loan_AcType & " and pay_ac_srno = " & Loan_AcNo & " and pay_status = 0"
            Call Fire_Sql(Sqlstr, PayRecset, Sql_Error, Use_Connection, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Salary_Loan_Recovery_5A")
            If PayRecset.EOF = False Then InstAmt = IIf(IsNull(PayRecset!Pay_Install_Amt), 0, PayRecset!Pay_Install_Amt)
        End If
        Recovery_Amt = 0
        
        ' In case of Installment Frequency 9 Deduct Installment Amt
        ' In case of Bonus or Minimbonus Deduct All Balance
        If InstFreq = 9 And Salary_Type = 0 Then
            Call Get_Loan_Balance(MyClass.Unit_Code, Loan_AcType, Loan_AcNo, Month_End_Date(MyClass.Branch_Working_Date), Loan_Balance, Unrec_Int_Amt, Byte_Flag)
            If Byte_Flag <> 0 Then Loan_Balance = 0
            If Loan_Balance < 0 Then Loan_Balance = 0
            
            Recovery_Amt = InstAmt
            If Recovery_Amt > Loan_Balance Then Recovery_Amt = Loan_Balance
            If Recovery_Amt > Deduction_Ceiling_Amt Then Recovery_Amt = Deduction_Ceiling_Amt
            If Recovery_Amt > AvailableAmt Then Recovery_Amt = AvailableAmt
        Else
            ' For Salary Payments Deduct Arrear Amount
            If Salary_Type = 0 Then
                Call Get_Loan_Arrear(MyClass.Unit_Code, Loan_AcType, Loan_AcNo, Salary_Clear_Date, Arrear_Amount, Due_Date)
                If Arrear_Amount > 0 Then
                    Recovery_Amt = Arrear_Amount
                    If Recovery_Amt > Deduction_Ceiling_Amt Then Recovery_Amt = Deduction_Ceiling_Amt
                    If Recovery_Amt > AvailableAmt Then Recovery_Amt = AvailableAmt
                End If
            End If
            ' For Mini or Main Bonus Payments Deduct Complete Loan Balance
            If Salary_Type >= 1 Then
                Call Get_Loan_Balance(MyClass.Unit_Code, Loan_AcType, Loan_AcNo, Salary_Clear_Date, Loan_Balance, Unrec_Int_Amt, Byte_Flag)
                If Byte_Flag <> 0 Then Loan_Balance = 0
                If Loan_Balance > 0 Then
                    Recovery_Amt = Loan_Balance
                    If Recovery_Amt > Deduction_Ceiling_Amt Then Recovery_Amt = Deduction_Ceiling_Amt
                    If Recovery_Amt > AvailableAmt Then Recovery_Amt = AvailableAmt
                End If
            End If
        End If
        If Recovery_Amt > 0 Then
            GoSub Execute_Recovery
            AvailableAmt = AvailableAmt - Recovery_Amt
        End If
        
        ' Do not forget to Deduct Ledger Fee
    '    'now in case of Mini/Main Bonus Payment if after loan recovery , amount is left then recover
    '    'the ledger fee and if amount left, recover the FIC Instalment
        If Salary_Type = 1 Or Salary_Type = 2 Then
            Call TS_Ledger_Posting(Cust_Branch, Cust_Code, Ac_Type, Ac_No, Ledger_Fee_Deducted)
            AvailableAmt = AvailableAmt - Ledger_Fee_Deducted
            If AvailableAmt > 0 Then GoSub Deduct_FIC
        End If
        Arrear_RecSet.MoveNext
    Loop
    Exit Sub
    
Deduct_FIC:
    ' Deduct FIC
    Sqlstr = "select * from future_txn where txn_hbr_cd=" & MyClass.Unit_Code & _
            " and cust_idno=" & Cust_Code & " and type_code=" & Ac_Type & _
            " and ac_srno=" & Ac_No & " and txn_code='" & TC_Card_Issue_Charges_Debit & _
            "' order by txn_clear_date desc"
    Call Fire_Sql(Sqlstr, RsFutureTxn, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Salary_Loan_Recovery_6")
    If RsFutureTxn.EOF = True Then Return
    
    TotBnkChg = 0
    TotTxnAmt = 0
    I = 0
    Do While Not RsFutureTxn.EOF
        If AvailableAmt > Abs(RsFutureTxn!Txn_Amt + RsFutureTxn!Txn_Bnk_Chg) Then
            I = I + 1
            Sqlstr = "delete from " & UseDbPrefix & "future_txn where txn_br_code=" & RsFutureTxn!Txn_Br_Code & _
                    " and txn_date='" & Format(RsFutureTxn!Txn_Date, "dd-mmm-yyyy") & "' and txn_no=" & RsFutureTxn!Txn_No
            Call Fire_Sql(Sqlstr, RsDelete, Sql_Error, Use_Connection, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Salary_Loan_Recovery_7")
            
            TotTxnAmt = TotTxnAmt + RsFutureTxn!Txn_Amt
            TotBnkChg = TotBnkChg + RsFutureTxn!Txn_Bnk_Chg
            AvailableAmt = AvailableAmt + RsFutureTxn!Txn_Amt + RsFutureTxn!Txn_Bnk_Chg
        End If
        RsFutureTxn.MoveNext
    Loop

    If TotBnkChg <> 0 Or TotTxnAmt <> 0 Then
        Transaction_Time = Format(Now(), "HHMM")
        Transaction_number = 0
        Call Post_Transaction(MyClass.Unit_Code, MyClass.Branch_Working_Date, Transaction_Time, Transaction_number, _
            MyClass.Unit_Code, Cust_Code, Ac_Type, Ac_No, TC_Card_Issue_Charges_Debit, TotTxnAmt, TotBnkChg, _
            "FIC :- " & I & " Inst.", MyClass.Branch_Working_Date, System_Transactions_User_ID, 0, #1/1/1900#, _
            " ", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
    End If
    Return

Execute_Recovery:

    Transaction_Time = Format(Now(), "HHMM")
    Transaction_number = 0
    Call Post_Transaction(MyClass.Unit_Code, MyClass.Branch_Working_Date, Transaction_Time, Transaction_number, MyClass.Unit_Code, Cust_Code, _
            Ac_Type, Ac_No, TC_Transfer_To_Loan, 0 - Recovery_Amt, Commission_Amt, "Auto Loan Recovery", MyClass.Branch_Working_Date, _
            gsUser_Login, 0, #1/1/1900#, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, "")
    Call Post_Loan_Payment(MyClass.Unit_Code, Loan_AcType, Loan_AcNo, TL_Transfer_From_Savings, MyClass.Branch_Working_Date, Recovery_Amt, 1, "Auto Loan Recovery", Amt_Accepted, Loan_Txn_No)
    If Amt_Accepted < Recovery_Amt Then Call Reverse_Auto_Loan_Recovery(Cust_Branch, Cust_Code, Ac_Type, Ac_No, Recovery_Amt - Amt_Accepted)
    Return
    
Proc_Error:
    Call errHandler("Salary_Loan_Recovery")
    Err_Flag = 6
    Exit Sub
End Sub

Public Sub Auto_Loan_Recovery(ByVal Cust_Branch As Integer, ByVal Cust_Code As Long, ByVal Ac_Type As Integer, _
                              ByVal Ac_No As Long, Optional ByVal Blk_Amt As Currency, Optional ByVal Pkg_Begin_Dt As Date, _
                              Optional ByVal Pkg_Opg_Bal As Currency)
Dim Sqlstr As String
Dim Arrear_RecSet As New ADODB.Recordset, Arrear_Amount As Currency
Dim Loan_AcType As Integer, Loan_AcNo As Long
Dim Clear_bal As Currency, UnClear_bal As Currency, Block_Amount As Currency, Drawing_Power As Currency
Dim Recovery_Amt As Currency, Ac_Recset As New ADODB.Recordset, Transaction_number As Long
Dim Transaction_Time As Integer
Dim Commission_Amt As Currency, AvailableAmt As Currency
Dim Trfr_To_Loan_Commission As Currency ' moved from global variable
Dim Due_Date As Date, Amt_Accepted As Currency, Loan_Txn_No As Long, Int_Err_Flag As Integer

    If Set_Connection(Cust_Branch) <> 0 Then Exit Sub
    
    ' Extra Values will be available only if it is being called from Transactions Program
    If IsMissing(Blk_Amt) = True Or Blk_Amt = 0 Then
        Sqlstr = "select block_amt from " & UseDbPrefix & "nsav_account where br_code = " & Cust_Branch & _
                " and cust_idno = " & Cust_Code & " and type_code = " & Ac_Type & " and ac_srno = " & Ac_No & " "
        Call Fire_Sql(Sqlstr, Ac_Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Auto_Loan_Recovery_5")
        If Ac_Recset.EOF = True Then Exit Sub
        Block_Amount = IIf(IsNull(Ac_Recset!Block_Amt), 0, Ac_Recset!Block_Amt)
    Else
        Block_Amount = Blk_Amt
    End If
    'Get Customer Clear and UnClear Balances
    Call Get_Customer_Balance(Cust_Branch, Cust_Code, Ac_Type, Ac_No, MyClass.Branch_Working_Date, _
                                Clear_bal, UnClear_bal, Pkg_Begin_Dt, Pkg_Opg_Bal)
    
    Drawing_Power = Clear_bal - Block_Amount
    If Drawing_Power <= 0 Then Exit Sub
    AvailableAmt = Drawing_Power
    
    ' Compute Bank Commission on ALR
    Trfr_To_Loan_Commission = Prev_ALR_Commission
    If Ac_Type <> Prev_ALR_Ac_Type Then
        Call Calculate_BankCharge(TC_Transfer_To_Loan, Ac_Type, "", 0, 0, Trfr_To_Loan_Commission)
        Prev_ALR_Ac_Type = Ac_Type
        Prev_ALR_Commission = Trfr_To_Loan_Commission
    End If
    Commission_Amt = 0 - Trfr_To_Loan_Commission
    
Orig_Logic:

    ' Find Out Unclosed Loan Accounts of this customer
    Sqlstr = "select lm_type_code,lm_ac_srno from " & UseDbPrefix & "laccounts," & _
            UseDbPrefix & "loan_ac_categ where lm_hbr_cd = " & Cust_Branch & _
            " and lm_sav_cust_idno = " & Cust_Code & _
            " and lm_sav_ac_type_code = " & Ac_Type & " and lm_sav_ac_srno = " & Ac_No & _
            " and lm_type_code < " & Loan_Type_For_SalAdv & " and lm_ac_status = 0 and lm_install_freq <> 9 and " & _
            "lm_category = loan_categ and recov_auto >= 1"
    Call Fire_Sql(Sqlstr, Arrear_RecSet, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Auto_Loan_Recovery_4")
    Do While Arrear_RecSet.EOF = False
        Loan_AcType = IIf(IsNull(Arrear_RecSet!lm_type_code), 0, Arrear_RecSet!lm_type_code)
        Loan_AcNo = IIf(IsNull(Arrear_RecSet!lm_ac_srno), 0, Arrear_RecSet!lm_ac_srno)
        Call Get_Loan_Arrear(Cust_Branch, Loan_AcType, Loan_AcNo, MyClass.Branch_Working_Date, Arrear_Amount, Due_Date)
        If Arrear_Amount > 0 Then
            Recovery_Amt = Arrear_Amount
            If Recovery_Amt > AvailableAmt Then Recovery_Amt = AvailableAmt
            GoSub Execute_Recovery
            AvailableAmt = AvailableAmt - Recovery_Amt
        End If
        Arrear_RecSet.MoveNext
    Loop
    Exit Sub
    
Execute_Recovery:

    Transaction_Time = Format(Now(), "HHMM")
    Transaction_number = 0
    If Cust_Branch = MyClass.Unit_Code Then
        Call Post_Transaction(Cust_Branch, MyClass.Branch_Working_Date, Transaction_Time, Transaction_number, Cust_Branch, Cust_Code, _
                Ac_Type, Ac_No, TC_Transfer_To_Loan, 0 - Recovery_Amt, Commission_Amt, "Auto Loan Recovery", MyClass.Branch_Working_Date, _
                gsUser_Login, 0, #1/1/1900#, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, "")
    Else
        Call Post_Alien_Transaction(Cust_Branch, MyClass.Branch_Working_Date, Transaction_Time, Transaction_number, Cust_Branch, Cust_Code, _
                Ac_Type, Ac_No, TC_Transfer_To_Loan, 0 - Recovery_Amt, Commission_Amt, "Auto Loan Recovery", MyClass.Branch_Working_Date, _
                gsUser_Login, 0, #1/1/1900#, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, "", Int_Err_Flag)
    End If
    Call Post_Loan_Payment(Cust_Branch, Loan_AcType, Loan_AcNo, TL_Transfer_From_Savings, MyClass.Branch_Working_Date, Recovery_Amt, 1, "Auto Loan Recovery", Amt_Accepted, Loan_Txn_No)
    If Amt_Accepted < Recovery_Amt Then Call Reverse_Auto_Loan_Recovery(Cust_Branch, Cust_Code, Ac_Type, Ac_No, Recovery_Amt - Amt_Accepted)
    Return

Proc_Error:
    Call errHandler("Auto_Loan_Recovery")
    Exit Sub
End Sub
Private Sub TS_Ledger_Posting(ByVal Cust_Branch As Integer, Cust_Code As Long, ByVal Ac_Type As Integer, _
                          ByVal Ac_No As Long, ByRef Ledger_Fee_Deducted As Currency)
                          
Dim Sqlstr As String, Recset As New ADODB.Recordset, Txn_recset As New ADODB.Recordset
Dim Current_Month_LastDate As Date, Curent_Month_FirstDate As Date, Next_Month_FirstDate As Date
Dim Ac_Open_Date As Date, Clear_Balance As Currency, UnClear_Balance As Currency, Min_Month_Clear_bal As Currency
Dim Ledger_Fees As Currency, Transaction_Time As Integer, Integer_Flag As Integer
Dim Transaction_number As Long, AC_Category As String, Err_Flag As Byte
Dim ln_Month As Byte, ln_Year As Integer, Min_Bal_Concept As Byte
Dim TS_Unpaid_Month As Byte  ' no of month for which TS customer has not paid the ledger fee
Dim SalariedCust As Byte

    Ledger_Fee_Deducted = 0
    
    If Set_Connection(Cust_Branch) <> 0 Then Exit Sub
    
    ln_Month = Month(MyClass.Branch_Working_Date) + 1
    ln_Year = Year(MyClass.Branch_Working_Date)
    If ln_Month > 12 Then
        ln_Month = 1
        ln_Year = ln_Year + 1
    End If
    Next_Month_FirstDate = Format("01-" & CStr(ln_Month) & "-" & CStr(ln_Year), "dd-mmm-yyyy")
    Current_Month_LastDate = Next_Month_FirstDate - 1
    Curent_Month_FirstDate = "01-" & Month(MyClass.Branch_Working_Date) & "-" & Year(MyClass.Branch_Working_Date)
    
    '===================Check whether minimum balance concept to be followed in the branch or not=============
    Sqlstr = "Select par_no From " & UseDbPrefix & "aks_parameter Where par_key='MINBAL_LDF'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    Min_Bal_Concept = 0 ' follow the minimum balance concept
    If Not Recset.EOF Then Min_Bal_Concept = Val(Recset!Par_No)
   
    Sqlstr = "Select ac_categ,open_date,salaried_cust From " & UseDbPrefix & "nsav_account Where" & _
          " br_code=" & Cust_Branch & " and cust_idno = " & Cust_Code & _
          " and type_code = " & Ac_Type & " and ac_srno = " & Ac_No & _
          " and ac_status <> 9  and ac_categ <> 'S' and old_ac_no = 'TS' "
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    If Recset.EOF = True Then Exit Sub
    
    Ac_Open_Date = IIf(IsNull(Recset!Open_Date), #1/1/1900#, Recset!Open_Date)
    If Ac_Open_Date <= #1/1/1920# Then Exit Sub
    If Ac_Open_Date >= Curent_Month_FirstDate Then Exit Sub
    
    Transaction_Time = Format(Now(), "HHMM")
    AC_Category = IIf(IsNull(Recset!Ac_Categ), "N", Recset!Ac_Categ)
    SalariedCust = IIf(IsNull(Recset!Salaried_Cust), 0, Recset!Salaried_Cust) 'added by kirti kumar
    
    Min_Month_Clear_bal = 0
    If Min_Bal_Concept = 0 Then   ' follow the minimum balance concept
        Call Get_Minimum_Customer_Balance_For_Month(Cust_Branch, Cust_Code, Ac_Type, Ac_No, MyClass.Branch_Working_Date, Clear_Balance, UnClear_Balance, Min_Month_Clear_bal)
    Else   'dont follow the minimum balance concept
        Call Get_Customer_Balance(Cust_Branch, Cust_Code, Ac_Type, Ac_No, MyClass.Branch_Working_Date, Clear_Balance, UnClear_Balance)
    End If
    'if clear balance is less than or equal to ZERO then skip this record too.
    If Clear_Balance + UnClear_Balance <= 0 Then Exit Sub
    
    'call function to get the ledger fees
    If Min_Bal_Concept = 0 Then  ' follow the minimum balance concept
        Call Compute_Savings_Ledger_Fee(Ac_Type, AC_Category, "TS", Min_Month_Clear_bal + UnClear_Balance, Ledger_Fees)
    Else  'dont follow the minimum balance concept
        Call Compute_Savings_Ledger_Fee(Ac_Type, AC_Category, "TS", Clear_Balance + UnClear_Balance, Ledger_Fees)
    End If
    
    Sqlstr = "Select max(txn_date) From " & UseDbPrefix & "nsav_txn Where " & _
          " txn_hbr_cd=" & Cust_Branch & " and cust_idno=" & Cust_Code & _
          " and type_code=" & Ac_Type & " and ac_srno=" & Ac_No & _
          " and txn_code='" & TC_Ledger_Fee & "' and txn_delete_flag = 0"
    Call Fire_Sql(Sqlstr, Txn_recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    
    TS_Unpaid_Month = 1
    If Not IsNull(Txn_recset.Fields(0)) Then TS_Unpaid_Month = DateDiff("m", Txn_recset.Fields(0), MyClass.Branch_Working_Date)
    
    Ledger_Fees = Ledger_Fees * TS_Unpaid_Month
     
    If SalariedCust <> 1 Then
        ' If Balance is in betwwen 0 and Ledger fees, then charge what is available
        If Clear_Balance + UnClear_Balance > 0 Then
            If Clear_Balance + UnClear_Balance < Ledger_Fees Then Ledger_Fees = Clear_Balance + UnClear_Balance
        End If
    End If
    If Ledger_Fees <= 0 Then Exit Sub
    
    Ledger_Fee_Deducted = Ledger_Fees
    Ledger_Fees = 0 - Ledger_Fees
    Transaction_number = 0
    Call Post_Transaction(MyClass.Unit_Code, MyClass.Branch_Working_Date, Transaction_Time, Transaction_number, _
                          Cust_Branch, Cust_Code, Ac_Type, Ac_No, TC_Ledger_Fee, 0, Ledger_Fees, _
                          "Ledger Fee", MyClass.Branch_Working_Date, System_Transactions_User_ID, 0, "01-01-1900", "", 0, 0, 0, _
                          0, 0, 0, 0, 0, 0, AC_Category, 0, 0, Integer_Flag)
    If Integer_Flag <> 0 Then MsgBox "Failed to Post Ledger Fee for Cust " & Cust_Code & "/" & Ac_Type & "/" & Ac_No
    Exit Sub

IO_Error:
    Exit Sub
End Sub

Public Sub Ledger_Posting(ByVal WorkingDate As Date, ByRef Error_Flag As Byte)
                          
    'This function checks, if the working date is the last date of the month.
    'Select all the active account from nsav_account
    'If Account Open Date = Current Month-Year then skip the record for the ledegr fee
    'if category="s" (staff) then also skip this
    'if clear balance <=0 then skip record
    'if clear balance>0 then if clear balance < ledegr fee then leger fee=clear balance.
    'call post data function. pass ledger fee amount by multiplying by -1 and it will go to
    'the charges column and txn amount will be zero.
    'LEDGER FEE type=LDF
    'At last update nsav_sysparam with the current month and year
    
Dim Sqlstr As String, Recset As New ADODB.Recordset
Dim Current_Month_LastDate As Date, Curent_Month_FirstDate As Date, Next_Month_FirstDate As Date
Dim Ac_Open_Date As Date, Clear_Balance As Currency, UnClear_Balance As Currency, Min_Month_Clear_bal As Currency

Dim Ledger_Fees As Currency, Transaction_Time As Integer, Integer_Flag As Integer
Dim Transaction_number As Long, Cust_IdNo As Long, Type_Code As Integer, Ac_SrNo As Long, AC_Category As String
Dim Old_Ac_No As String, Err_Flag As Byte
Dim Sel_Cust_Idno As Long   ' for passing the value for the recordset
Dim Sel_Type_Code As Long   ' for passing the value for the recordset
Dim Sel_Ac_Srno As Long     ' for passing the value for the recordset

Dim Prev_Cust_Idno As Long, ln_Month As Byte, ln_Year As Integer, Min_Bal_Concept As Byte
Dim SalariedCust As Byte 'Added by Kirti Kumar for check Salaried Account
Dim Pkg_Begin_Date As Date, Pkg_Open_Bal As Currency

    Error_Flag = 0
    Sel_Cust_Idno = 0
    Sel_Type_Code = 0
    Sel_Ac_Srno = 0

    Prev_Cust_Idno = 0
    ln_Month = Month(WorkingDate) + 1
    ln_Year = Year(WorkingDate)
    If ln_Month > 12 Then
        ln_Month = 1
        ln_Year = ln_Year + 1
    End If
    
    Next_Month_FirstDate = Format("01-" & CStr(ln_Month) & "-" & CStr(ln_Year), "dd-mmm-yyyy")
    Current_Month_LastDate = Next_Month_FirstDate - 1
    Curent_Month_FirstDate = "01-" & Month(WorkingDate) & "-" & Year(WorkingDate)
    
    Pkg_Begin_Date = #1/1/1900#
    Sqlstr = "select pkg_begin_date from " & MyClass.gUnifyDb & "nsav_sysparam where home_branch = " & MyClass.Unit_Code
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(Me, "cmdProceed_Click")
    If Recset.EOF = False Then Pkg_Begin_Date = IIf(IsNull(Recset!Pkg_Begin_Date), #1/1/1900#, Recset!Pkg_Begin_Date)
    
    '===================Check whether minimum balance concept to be followed in the branch or not=============
    Sqlstr = "Select par_no From " & MyClass.gUnifyDb & "aks_parameter Where par_key='MINBAL_LDF'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    Min_Bal_Concept = 0 ' follow the minimum balance concept
    If Not Recset.EOF Then Min_Bal_Concept = Val(Recset!Par_No)
   
Fire_Qry:

    'Select all active account in case of monthly ledger fee deduction
    Sqlstr = "Select cust_idno,type_code,ac_srno,ac_categ,open_date,old_ac_no,salaried_cust,pkg_open_bal From " & MyClass.gUnifyDb & "nsav_account Where" & _
          " br_code=" & MyClass.Unit_Code & " and cust_idno >= " & Sel_Cust_Idno & _
          " and type_code >= 0 and ac_srno >= 0" & _
          " and ac_status <> 9  and ac_categ <> 'S' and old_ac_no <> 'TS' " & _
          " order By cust_idno, type_code, ac_srno"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    
    'Now process all recordset in the loop
    Do While Not Recset.EOF
        Ac_Open_Date = IIf(IsNull(Recset!Open_Date), "01-01-1900", Recset!Open_Date)
        If Ac_Open_Date <= "01-01-1920" Then GoTo Process_Next_Record
        'do not do anything if the account is opened in current month or future months
        If Ac_Open_Date >= Curent_Month_FirstDate Then GoTo Process_Next_Record
        Transaction_Time = Format(Now(), "HHMM")
        Cust_IdNo = Recset!Cust_IdNo
        Type_Code = Recset!Type_Code
        Ac_SrNo = Recset!Ac_SrNo
        AC_Category = IIf(IsNull(Recset!Ac_Categ), "N", Recset!Ac_Categ)
        Old_Ac_No = IIf(IsNull(Recset!Old_Ac_No), "   ", Recset!Old_Ac_No)
        Old_Ac_No = UCase(Trim$(Old_Ac_No)) & Space(5)
        SalariedCust = IIf(IsNull(Recset!Salaried_Cust), 0, Recset!Salaried_Cust) 'added by kirti kumar
        Pkg_Open_Bal = IIf(IsNull(Recset!Pkg_Open_Bal), 0, Recset!Pkg_Open_Bal)
        
        Min_Month_Clear_bal = 0
        If Min_Bal_Concept = 0 Then   ' follow the minimum balance concept
            Call Get_Minimum_Customer_Balance_For_Month(MyClass.Unit_Code, Cust_IdNo, Type_Code, Ac_SrNo, WorkingDate, Clear_Balance, UnClear_Balance, Min_Month_Clear_bal)
        Else   'dont follow the minimum balance concept
            Call Get_Customer_Balance(MyClass.Unit_Code, Cust_IdNo, Type_Code, Ac_SrNo, WorkingDate, Clear_Balance, UnClear_Balance, Pkg_Begin_Date, Pkg_Open_Bal)
        End If
'        'if clear balance is less than or equal to ZERO then skip this record too.
'        If Clear_Balance + UnClear_Balance <= 0 Then GoTo Process_Next_Record
        If Clear_Balance <= 0 Then GoTo Process_Next_Record
        
        'call function to get the ledger fees
        If Min_Bal_Concept = 0 Then  ' follow the minimum balance concept
            Call Compute_Savings_Ledger_Fee(Type_Code, AC_Category, Old_Ac_No, Min_Month_Clear_bal + UnClear_Balance, Ledger_Fees)
        Else  'dont follow the minimum balance concept
            Call Compute_Savings_Ledger_Fee(Type_Code, AC_Category, Old_Ac_No, Clear_Balance + UnClear_Balance, Ledger_Fees)
        End If
        
        ' In case of Salary Advance cases, the account was having Overdraft so we MUST apply FULL Ledger Fees
'        If SalariedCust = 0 Then
            ' If Balance is in betwwen 0 and Ledger fees, then charge what is available
'            If Clear_Balance + UnClear_Balance > 0 Then
'                If Clear_Balance + UnClear_Balance < Ledger_Fees Then Ledger_Fees = Clear_Balance + UnClear_Balance
'            End If
'        End If
'        If Clear_Balance < Ledger_Fees Then Ledger_Fees = Clear_Balance
        
        'if ledger fees is zero or less then donot post transaction
        If Ledger_Fees <= 0 Then GoTo Process_Next_Record
        
        'now make this ledger fee negative and pass it to the post transaction function
        Ledger_Fees = 0 - Ledger_Fees
        Transaction_number = 0
        Call AKS_BeginTrans(MyClass.Connection_No)
        Call Post_Transaction(MyClass.Unit_Code, WorkingDate, Transaction_Time, Transaction_number, _
                              MyClass.Unit_Code, Cust_IdNo, Type_Code, Ac_SrNo, TC_Ledger_Fee, 0, Ledger_Fees, _
                              "Ledger Fee", WorkingDate, System_Transactions_User_ID, 0, "01-01-1900", "", 0, 0, 0, _
                              0, 0, 0, 0, 0, 0, AC_Category, 0, 0, Integer_Flag)
        If Integer_Flag <> 0 Then
            Call AKS_RollBackTrans(MyClass.Connection_No)
            MsgBox "Failed to Post Ledger Fee for Cust " & Cust_IdNo & "/" & Type_Code & "/" & Ac_SrNo
            GoTo Process_Next_Record
        End If
        Call AKS_EndTrans(MyClass.Connection_No)

Process_Next_Record:
        
        Prev_Cust_Idno = Recset!Cust_IdNo
        Recset.MoveNext
        If Recset.AbsolutePosition >= 1000 Then   ' this is done to avoid the "option type out of range error"
            Sel_Cust_Idno = Recset!Cust_IdNo
            Sel_Type_Code = Recset!Type_Code
            Sel_Ac_Srno = Recset!Ac_SrNo
            If Prev_Cust_Idno = Sel_Cust_Idno Then GoTo Process_NextRecord ' if this customer
            'has two account, we cannot skip this account for the ledger fee.
            
            Connection_Open_Flag = 0
            Call Close_DB_Connection(MyClass.Connection_No)
            Call MyClass.ReOpen_Main_Connection(MyClass.Connection_No, Err_Flag)
            If Err_Flag <> 0 Then MsgBox "Error in Opening Connection"
            GoTo Fire_Qry
        End If
Process_NextRecord:
    Loop
    
    'At the end update the nsav_sysparam table with the current month and year
    Sqlstr = " Update " & MyClass.gUnifyDb & "nsav_sysparam " & _
             " Set ledger_month=" & Month(WorkingDate) & ",ledger_year=" & Year(WorkingDate) & " " & _
             " Where home_branch=" & MyClass.Unit_Code
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    Error_Flag = 0
    Exit Sub

IO_Error:
    Error_Flag = 1
    Exit Sub
End Sub

Public Sub Get_Minimum_Customer_Balance_For_Month(ByVal Br_Code As Integer, ByVal Cust_Code As Long, _
                            ByVal Ac_Type As Integer, ByVal Ac_No As Long, ByVal Bal_OnDate As Date, _
                            ByRef Clear_bal As Currency, ByRef UnClear_bal As Currency, ByRef Min_Month_Clear_bal As Currency)

Dim Sqlstr As String, Open_balance As Currency, Recset As New ADODB.Recordset, Month_First_Day As Date

    Clear_bal = 0
    UnClear_bal = 0
    Min_Month_Clear_bal = 0
    Open_balance = 0
    
    If Set_Connection(Br_Code) <> 0 Then Exit Sub
    
    '=========New Modified logic for calculating minimum balance======================================================
    Month_First_Day = CDate("01-" & Month(Bal_OnDate) & "-" & Year(Bal_OnDate))
    Call Get_Customer_Balance(Br_Code, Cust_Code, Ac_Type, Ac_No, Month_First_Day - 1, Clear_bal, UnClear_bal)
    Open_balance = Clear_bal
    Sqlstr = " select sbal_month_debit,sbal_month_credit,sbal_date from " & UseDbPrefix & "sbal_rec where sbal_hbr_code = " & _
            Br_Code & " and cust_idno = " & Cust_Code & " and sbal_acc_type = " & Ac_Type & _
          " and sbal_acc_no = " & Ac_No & " and sbal_date >= '" & Format(Month_First_Day, "dd-mmm-yyyy") & "'" & _
          " and sbal_date <= '" & Format(Bal_OnDate, "dd-mmm-yyyy") & "'" & " order by sbal_date "
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_Minimum_Customer_Balance_for_Month_1")

    Min_Month_Clear_bal = Open_balance
    Do While Not Recset.EOF
        Open_balance = Open_balance - Recset!sbal_month_debit + Recset!sbal_month_credit
        If Open_balance < Min_Month_Clear_bal Then Min_Month_Clear_bal = Open_balance
        Recset.MoveNext
    Loop
    Clear_bal = Open_balance
    UnClear_bal = 0  ' to avoid the overdrawn amount
    Exit Sub
End Sub
Public Sub Customer_SbalRec_Updation(ByVal Pn_Br_Code As Integer, ByVal Pn_Cust_Idno As Long, _
                ByVal Pn_Type_Code As Integer, ByVal Pn_Ac_Srno As Long, _
                ByVal Pd_Date_From As Date, ByVal Pd_Date_Till As Date, _
                ByRef Pn_Error_Flag As Long, ByVal Pn_Labelpass_Flag As Byte, _
                Optional ByRef lblcaption As Label)

'''''''''
''''' pn_labelpass_flag = 1 means that label caption display ELSE do not display
'''''' if pn_labelpass_flag = 1 then lblcaption variable should have value )
'''''''''
Dim Sqlstr As String, Recset As New ADODB.Recordset, Tot_Records As Long
Dim Txn_hbr_Code As Integer, Type_Code As Integer, Ac_SrNo As Long, Txn_Amt As Currency
Dim Clear_Date As Date, Commission_Amt As Currency, Cust_IdNo As Long
Dim Month_FirstDate As Date, Month_LastDate As Date
Dim Customer_Flag As Byte, Records_Processed As Long

    Month_FirstDate = Pd_Date_From
    Month_LastDate = Pd_Date_Till
    Pn_Error_Flag = 1
    Records_Processed = 0
    If Month_FirstDate > Month_LastDate Then Exit Sub
    Customer_Flag = 0

    If Pn_Cust_Idno <> 0 Or Pn_Type_Code <> 0 Or Pn_Ac_Srno <> 0 Then
        If Pn_Cust_Idno = 0 Or Pn_Type_Code = 0 Or Pn_Ac_Srno = 0 Then
            MsgBox ("For indivdual customer, needs compelete account code")
            Exit Sub
        End If
        Customer_Flag = 1
    End If
    If Set_Connection(Pn_Br_Code) <> 0 Then Exit Sub
    
    'STEP 2 => Delete the record in the sbal_rec of the branch for that month
    If Customer_Flag = 1 Then
        Sqlstr = " Delete from " & UseDbPrefix & "sbal_rec where sbal_hbr_code=" & Pn_Br_Code & " and cust_idno = " & Pn_Cust_Idno & _
              " and sbal_acc_type = " & Pn_Type_Code & " and sbal_acc_no = " & Pn_Ac_Srno & _
              " and sbal_date>='" & Format(Month_FirstDate, "dd-mmm-yyyy") & "' and sbal_date<='" & Format(Month_LastDate, "dd-mmm-yyyy") & "'"
    Else
        Sqlstr = " Delete from " & UseDbPrefix & "sbal_rec where sbal_hbr_code=" & Pn_Br_Code & _
              " and sbal_date>='" & Format(Month_FirstDate, "dd-mmm-yyyy") & "' and sbal_date<='" & Format(Month_LastDate, "dd-mmm-yyyy") & "'"
    End If
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Customer_SBALRec_Updation_1")
    
    'STEP 3 => Select all the record from nsav_txn for the month and year
    If Customer_Flag = 1 Then
        Sqlstr = " Select txn_hbr_cd, type_code, ac_srno,cust_idno, txn_date,txn_clear_date, txn_amt, txn_bnk_chg " & _
              " from " & UseDbPrefix & "nsav_txn Where txn_hbr_cd=" & Pn_Br_Code & _
              " and cust_idno = " & Pn_Cust_Idno & " and type_code = " & Pn_Type_Code & _
              " and ac_srno = " & Pn_Ac_Srno & " and txn_clear_date>='" & Format(Month_FirstDate, "dd-mmm-yyyy") & "'" & _
              " and txn_clear_date<='" & Format(Month_LastDate, "dd-mmm-yyyy") & "' and txn_delete_flag = 0 "
    Else
        Sqlstr = " Select txn_hbr_cd, type_code, ac_srno,cust_idno, txn_date,txn_clear_date, txn_amt, txn_bnk_chg " & _
              " from " & UseDbPrefix & "nsav_txn Where txn_hbr_cd=" & Pn_Br_Code & " and cust_idno > 0 " & _
              " and txn_clear_date>='" & Format(Month_FirstDate, "dd-mmm-yyyy") & "'" & _
              " and txn_clear_date<='" & Format(Month_LastDate, "dd-mmm-yyyy") & "' and txn_delete_flag = 0 "
    End If
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, Tot_Records)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Customer_SBALRec_Updation_2")
    'STEP 4 => call function to update the sbal_rec
    If Recset.EOF Then
        Pn_Error_Flag = 0
        Exit Sub
    End If
        
    Do While Not Recset.EOF
        If Pn_Labelpass_Flag = 1 Then
            Records_Processed = Records_Processed + 1
            lblcaption.Caption = "Records processed " & Records_Processed & " OF " & Tot_Records
            lblcaption.Refresh
        End If
        Txn_hbr_Code = Recset!txn_hbr_cd
        Type_Code = Recset!Type_Code
        Ac_SrNo = Recset!Ac_SrNo
        Txn_Amt = Recset!Txn_Amt
        Cust_IdNo = Recset!Cust_IdNo
        Clear_Date = Recset!Txn_Clear_Date
        Commission_Amt = Recset!Txn_Bnk_Chg
        Call SbalRec_InsUpdate(Pn_Br_Code, Cust_IdNo, Type_Code, Ac_SrNo, Clear_Date, Txn_Amt, Commission_Amt, Pn_Error_Flag)
        If Pn_Error_Flag = 1 Then Exit Sub
        Recset.MoveNext
    Loop
    Pn_Error_Flag = 0
    Exit Sub
End Sub
Public Sub CheckAll_GLPosting_Codes(ByVal Called_By As Byte, ByRef Err_Flag As Byte)
    ''''' Value In Called_By Parameter indicates where subroutine is called from
    ''''' 0 indicates calling program is Day End Program
    ''''' 1 indicates calling program is Check GL Code Form
Dim Sqlstr As String, Category_Recset As New ADODB.Recordset, AcType_Recset As New ADODB.Recordset, Ac_TxnType_Recset As New ADODB.Recordset
Dim TxnType_Recset As New ADODB.Recordset
Dim Type_Code As Integer, Txn_Code As String, Ac_Categ As String, Record_Type As String
Dim Section As Integer, Dept As Integer

    'first select all transaction types.
    Sqlstr = " SELECT txn_code From  " & MyClass.gUnifyDb & "txn_type "
    Call Fire_Sql(Sqlstr, TxnType_Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/CheckAll_GLPosting_Codes_1")

    Do While Not TxnType_Recset.EOF
        '====>Transaction Code LOOP
        Txn_Code = Trim$(TxnType_Recset!Txn_Code)
        'Then Fetch All The Account Types of Savings
        Sqlstr = "Select type_code From " & MyClass.gUnifyDb & "ac_type Where sys_type_code=1 "
        Call Fire_Sql(Sqlstr, AcType_Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/CheckAll_GLPosting_Codes_2")
        Do While Not AcType_Recset.EOF
            '====>Account Type LOOP
            Type_Code = AcType_Recset!Type_Code
            'Fetch all categories from category table.
            Sqlstr = "Select catg_code From " & MyClass.gUnifyDb & "ac_category"
            Call Fire_Sql(Sqlstr, Category_Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/CheckAll_GLPosting_Codes_3")
            Do While Not Category_Recset.EOF
                '====>Category LOOP
                Ac_Categ = Category_Recset!Catg_Code
                '====Now perform GL Codes definition check
                GoSub GL_Definition_Check
                Category_Recset.MoveNext
                '====>Category LOOP
            Loop
            AcType_Recset.MoveNext
            '====>Account Type LOOP
        Loop
        TxnType_Recset.MoveNext
        '====>Transaction Code LOOP
    Loop
    Exit Sub
    
''''''''''''''''''''''''' GO SUBS *************************
GL_Definition_Check:

    '============Fetch Record from GL codes definition table=======
    Sqlstr = "Select * from " & MyClass.gUnifyDb & "ac_txn_type Where type_code=" & Type_Code & _
            " and txn_code='" & Trim$(Txn_Code) & "' and ac_categ='" & Trim$(Ac_Categ) & "'"
    Call Fire_Sql(Sqlstr, Ac_TxnType_Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/CheckAll_GLPosting_Codes_4")
    If Ac_TxnType_Recset.EOF Then
        If Called_By = 0 Then GoTo Proc_Error
        GLPostingCodes.lstSavings.AddItem Type_Code & "  -  " & Txn_Code & "  -  " & Ac_Categ
        Return
    End If
    
    Record_Type = Type_Code & "  -  " & Txn_Code & "  -  " & Ac_Categ
    '========BEGINING OF HOME, REMOTE & ALIEN TRANSACTION'S GL CODE FETCHING===================
    ''' Now check value of each slot
    'Debit Slots for transaction amount - Home
    Section = IIf(IsNull(Ac_TxnType_Recset!dr_sect), 0, Ac_TxnType_Recset!dr_sect)
    Type_Code = IIf(IsNull(Ac_TxnType_Recset!dr_type_code), 0, Ac_TxnType_Recset!dr_type_code)
    Dept = IIf(IsNull(Ac_TxnType_Recset!dr_dept), 0, Ac_TxnType_Recset!dr_dept)
    
    If Section = 0 Or Type_Code = 0 Or Dept = 0 Then
        If Called_By = 0 Then GoTo Proc_Error
        GLPostingCodes.lstSavings.AddItem Record_Type & ":- Debit Head for Main Transaction Amount for HOME Customer"
    End If
    
    'Debit Slots for bank charges - Home
    Section = IIf(IsNull(Ac_TxnType_Recset!dr_sect_2), 0, Ac_TxnType_Recset!dr_sect_2)
    Type_Code = IIf(IsNull(Ac_TxnType_Recset!dr_type_code_2), 0, Ac_TxnType_Recset!dr_type_code_2)
    Dept = IIf(IsNull(Ac_TxnType_Recset!dr_dept_2), 0, Ac_TxnType_Recset!dr_dept_2)
    
    If Section = 0 Or Type_Code = 0 Or Dept = 0 Then
        If Called_By = 0 Then GoTo Proc_Error
        GLPostingCodes.lstSavings.AddItem Record_Type & ":- Debit Head for Bank Charges Amount for HOME Customer"
    End If
    'Credit Slots for transaction amount - Home
    Section = IIf(IsNull(Ac_TxnType_Recset!Cr_Sect), 0, Ac_TxnType_Recset!Cr_Sect)
    Type_Code = IIf(IsNull(Ac_TxnType_Recset!cr_type_code), 0, Ac_TxnType_Recset!cr_type_code)
    Dept = IIf(IsNull(Ac_TxnType_Recset!Cr_Dept), 0, Ac_TxnType_Recset!Cr_Dept)
    
    If Section = 0 Or Type_Code = 0 Or Dept = 0 Then
        If Called_By = 0 Then GoTo Proc_Error
        GLPostingCodes.lstSavings.AddItem Record_Type & ":- Credit Head for Main Transaction Amount for HOME Customer"
    End If
    
    'Credit Slots for bank charges - Home
    Section = IIf(IsNull(Ac_TxnType_Recset!Cr_Sect_2), 0, Ac_TxnType_Recset!Cr_Sect_2)
    Type_Code = IIf(IsNull(Ac_TxnType_Recset!cr_type_code_2), 0, Ac_TxnType_Recset!cr_type_code_2)
    Dept = IIf(IsNull(Ac_TxnType_Recset!Cr_Dept_2), 0, Ac_TxnType_Recset!Cr_Dept_2)
    
    If Section = 0 Or Type_Code = 0 Or Dept = 0 Then
        If Called_By = 0 Then GoTo Proc_Error
        GLPostingCodes.lstSavings.AddItem Record_Type & ":- Credit Head for Bank Charges Amount for HOME Customer"
    End If
    
    'Debit Slots for transaction amount-REMOTE
    Section = IIf(IsNull(Ac_TxnType_Recset!dr_sect_hr), 0, Ac_TxnType_Recset!dr_sect_hr)
    Type_Code = IIf(IsNull(Ac_TxnType_Recset!dr_type_code_hr), 0, Ac_TxnType_Recset!dr_type_code_hr)
    Dept = IIf(IsNull(Ac_TxnType_Recset!dr_dept_hr), 0, Ac_TxnType_Recset!dr_dept_hr)
    
    If Section = 0 Or Type_Code = 0 Or Dept = 0 Then
        If Called_By = 0 Then GoTo Proc_Error
        GLPostingCodes.lstSavings.AddItem Record_Type & ":- Debit Head for Main Transaction Amount for HOME Customer doing Transaction in Remote Branches"
    End If
    
    'Debit Slots for bank charges - Remote
    Section = IIf(IsNull(Ac_TxnType_Recset!dr_sect_2_hr), 0, Ac_TxnType_Recset!dr_sect_2_hr)
    Type_Code = IIf(IsNull(Ac_TxnType_Recset!dr_type_code_2_hr), 0, Ac_TxnType_Recset!dr_type_code_2_hr)
    Dept = IIf(IsNull(Ac_TxnType_Recset!dr_dept_2_hr), 0, Ac_TxnType_Recset!dr_dept_2_hr)
    
    If Section = 0 Or Type_Code = 0 Or Dept = 0 Then
        If Called_By = 0 Then GoTo Proc_Error
        GLPostingCodes.lstSavings.AddItem Record_Type & ":- Debit Head for Bank Charges Amount for HOME Customer doing Transaction in Remote Branches"
    End If
    
    'Credit Slots for transaction amount-REMOTE
    Section = IIf(IsNull(Ac_TxnType_Recset!Cr_Sect_hr), 0, Ac_TxnType_Recset!Cr_Sect_hr)
    Type_Code = IIf(IsNull(Ac_TxnType_Recset!cr_type_code_hr), 0, Ac_TxnType_Recset!cr_type_code_hr)
    Dept = IIf(IsNull(Ac_TxnType_Recset!Cr_Dept_hr), 0, Ac_TxnType_Recset!Cr_Dept_hr)
    
    If Section = 0 Or Type_Code = 0 Or Dept = 0 Then
        If Called_By = 0 Then GoTo Proc_Error
        GLPostingCodes.lstSavings.AddItem Record_Type & ":- Credit Head for Main Transaction Amount for HOME Customer doing Transaction in Remote Branches"
    End If
    
    'Credit Slots for bank charges - REMOTE
    Section = IIf(IsNull(Ac_TxnType_Recset!Cr_Sect_2_hr), 0, Ac_TxnType_Recset!Cr_Sect_2_hr)
    Type_Code = IIf(IsNull(Ac_TxnType_Recset!cr_type_code_2_hr), 0, Ac_TxnType_Recset!cr_type_code_2_hr)
    Dept = IIf(IsNull(Ac_TxnType_Recset!Cr_Dept_2_hr), 0, Ac_TxnType_Recset!Cr_Dept_2_hr)
    
    If Section = 0 Or Type_Code = 0 Or Dept = 0 Then
        If Called_By = 0 Then GoTo Proc_Error
        GLPostingCodes.lstSavings.AddItem Record_Type & ":- Credit Head for Bank Charges Amount for HOME Customer doing Transaction in Remote Branches"
    End If
    '-------------------------------
    'Debit Slots for transaction amount-ALIEN
    Section = IIf(IsNull(Ac_TxnType_Recset!dr_sect_al), 0, Ac_TxnType_Recset!dr_sect_al)
    Type_Code = IIf(IsNull(Ac_TxnType_Recset!dr_type_code_al), 0, Ac_TxnType_Recset!dr_type_code_al)
    Dept = IIf(IsNull(Ac_TxnType_Recset!dr_dept_al), 0, Ac_TxnType_Recset!dr_dept_al)
    
    If Section = 0 Or Type_Code = 0 Or Dept = 0 Then
        If Called_By = 0 Then GoTo Proc_Error
        GLPostingCodes.lstSavings.AddItem Record_Type & ":- Debit Head for Main Transaction Amount for ALIEN Customer"
    End If
    'Debit Slots for bank charges-ALIEN
    Section = IIf(IsNull(Ac_TxnType_Recset!dr_sect_2_al), 0, Ac_TxnType_Recset!dr_sect_2_al)
    Type_Code = IIf(IsNull(Ac_TxnType_Recset!dr_type_code_2_al), 0, Ac_TxnType_Recset!dr_type_code_2_al)
    Dept = IIf(IsNull(Ac_TxnType_Recset!dr_dept_2_al), 0, Ac_TxnType_Recset!dr_dept_2_al)
    
    If Section = 0 Or Type_Code = 0 Or Dept = 0 Then
        If Called_By = 0 Then GoTo Proc_Error
        GLPostingCodes.lstSavings.AddItem Record_Type & ":- Debit Head for Bank Charges Amount for ALIEN Customer"
    End If
    'Credit Slots for transaction amount-ALIEN
    Section = IIf(IsNull(Ac_TxnType_Recset!Cr_Sect_al), 0, Ac_TxnType_Recset!Cr_Sect_al)
    Type_Code = IIf(IsNull(Ac_TxnType_Recset!cr_type_code_al), 0, Ac_TxnType_Recset!cr_type_code_al)
    Dept = IIf(IsNull(Ac_TxnType_Recset!Cr_Dept_al), 0, Ac_TxnType_Recset!Cr_Dept_al)
    
    If Section = 0 Or Type_Code = 0 Or Dept = 0 Then
        If Called_By = 0 Then GoTo Proc_Error
        GLPostingCodes.lstSavings.AddItem Record_Type & ":- Credit Head for Main Transaction Amount for ALIEN Customer"
    End If
    'Credit Slots for bank charges-ALIEN
    Section = IIf(IsNull(Ac_TxnType_Recset!Cr_Sect_2_al), 0, Ac_TxnType_Recset!Cr_Sect_2_al)
    Type_Code = IIf(IsNull(Ac_TxnType_Recset!cr_type_code_2_al), 0, Ac_TxnType_Recset!cr_type_code_2_al)
    Dept = IIf(IsNull(Ac_TxnType_Recset!Cr_Dept_2_al), 0, Ac_TxnType_Recset!Cr_Dept_2_al)
    
    If Section = 0 Or Type_Code = 0 Or Dept = 0 Then
        If Called_By = 0 Then GoTo Proc_Error
        GLPostingCodes.lstSavings.AddItem Record_Type & ":- Credit Head for Bank Charges Amount for ALIEN Customer"
    End If
    Return

Proc_Exit:
    Exit Sub
Proc_Error:
    'Call ErrHandler("DayEnd\CheclAll_GLPosting_Codes")
    Err_Flag = 1
    Exit Sub
End Sub

Public Sub Get_Inter_Account_Tr_Codes(ByRef Pn_Transfer_Valid As Byte, ByRef Ps_Transfer_Credit_TrCode As String, _
                                      ByRef Ps_Transfer_Debit_TrCode As String, ByRef Ps_Transfer_Credit_TrDesc As String, _
                                      ByRef Ps_Transfer_Debit_TrDesc As String)

Dim Sqlstr As String, DbCr_Code As String * 1, rs_Temp As New ADODB.Recordset
    
    Pn_Transfer_Valid = 0
    Ps_Transfer_Credit_TrCode = "   "
    Ps_Transfer_Debit_TrCode = "   "
    Ps_Transfer_Credit_TrDesc = ""
    Ps_Transfer_Debit_TrDesc = ""
    
    Sqlstr = "select * from " & MyClass.gUnifyDb & "txn_type where txn_group = 5 order by drcr_ind "
    Call Fire_Sql(Sqlstr, rs_Temp, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_Inter_Account_Tr_Codes_1")
    If rs_Temp.EOF Then Exit Sub
    
    Do While Not rs_Temp.EOF
        DbCr_Code = UCase(Left$(IIf(IsNull(rs_Temp!DRCR_IND), " ", rs_Temp!DRCR_IND), 1))
        If DbCr_Code = "D" Then
            Ps_Transfer_Debit_TrCode = Trim$(rs_Temp!Txn_Code)
            Ps_Transfer_Debit_TrDesc = Trim$(rs_Temp!Txn_Name)
        End If
        If DbCr_Code = "C" Then
            Ps_Transfer_Credit_TrCode = Trim$(rs_Temp!Txn_Code)
            Ps_Transfer_Credit_TrDesc = Trim$(rs_Temp!Txn_Name)
        End If
        If Trim$(Ps_Transfer_Debit_TrCode) <> "" Then Pn_Transfer_Valid = 1
        rs_Temp.MoveNext
    Loop
    Exit Sub
End Sub


Public Sub Get_Clear_Date(ByVal Trans_Date As Date, ByVal Trans_Code As String, ByRef Clear_Date As Date)
Dim Sqlstr As String, rs_Date As New ADODB.Recordset, No_Days As Integer
Dim New_Date As Date, Num_Holidays As Integer

    Clear_Date = Trans_Date
    Sqlstr = "select txn_clear_days from " & MyClass.gUnifyDb & "txn_type " & " where txn_code='" & Trans_Code & "'"
    Call Fire_Sql(Sqlstr, rs_Date, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_Clear_Date_1")
    If rs_Date.EOF Then Exit Sub
    
    No_Days = IIf(IsNull(rs_Date!Txn_Clear_Days), 0, rs_Date!Txn_Clear_Days)
    '' if time is more than 2:00 PM and No_days>0
    'after next day
    If No_Days > 0 And Hour(Time) >= 14 Then No_Days = No_Days + 1
    Clear_Date = Trans_Date + No_Days

Loop_Para:
    
    New_Date = Clear_Date
    Sqlstr = "select count(*) from " & MyClass.gUnifyDb & "holiday" & _
            " where hol_date >='" & Format(Trans_Date, "dd-mmm-yyyy") & "'" & _
            " and hol_date <='" & Format(New_Date, "dd-mmm-yyyy") & "'"
    Call Fire_Sql(Sqlstr, rs_Date, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_Clear_Date_2")
    Num_Holidays = 0
    If rs_Date.EOF = False Then Num_Holidays = rs_Date.Fields(0)
    Clear_Date = Trans_Date + No_Days + Num_Holidays
    If Clear_Date = New_Date Then Exit Sub
    GoTo Loop_Para
End Sub
Public Sub Teller_Balance_InHand(ByVal Teller_Id As String, ByVal Date_Today As Date, ByVal Cash_Flag As Byte, ByRef Teller_Balance As Currency)
Dim Sqlstr As String, rsUser As New ADODB.Recordset
Dim Ls_Cash_Chq As String
' cash_flag = 0  - cash,  1 - Cheque,  2 - both (cash/cheque)
Dim Tel_Rec As Currency, Tel_Pay As Currency, GL_Rec As Currency, Cust_Rec As Currency, Cust_Pay As Currency, GL_Pay As Currency
Dim Other_Rec As Currency, Other_Pay As Currency, Tel_Bal As Currency, Tr_Bal As Currency, Cust_Bal As Currency, Other_Bal As Currency
Dim GL_Bal As Currency, Tot_Rec As Currency, ToT_Pay As Currency

    Teller_Id = UCase(Trim(Teller_Id))
    ''Cash_Flag = cmbChoice.List(cmbChoice.ListIndex)
    Teller_Balance = 0
    Sqlstr = "select sum(ttxn_amount),ttxn_cash_flg,ttxn_type,ttxn_drcr_cd from " & MyClass.gUnifyDb & "teller_txn " & _
            " where ttxn_br_code=" & MyClass.Unit_Code & " and ttxn_date <= '" & Format(Date_Today, "dd-mmm-yyyy") & "'" & _
            " and ttxn_teller_id='" & Teller_Id & "' group by ttxn_cash_flg,ttxn_type,ttxn_drcr_cd"
    Call Fire_Sql(Sqlstr, rsUser, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Teller_Balance_InHand_1")
    If rsUser.EOF Then Exit Sub

    Tel_Rec = 0
    Tel_Pay = 0
    Cust_Rec = 0
    Cust_Pay = 0
    Other_Rec = 0
    Other_Pay = 0
    GL_Rec = 0
    GL_Pay = 0
    Tr_Bal = 0
    Tel_Bal = 0
    GL_Bal = 0
    Other_Bal = 0
    Cust_Bal = 0
    Tot_Rec = 0
    ToT_Pay = 0
    Ls_Cash_Chq = ""
    Ls_Cash_Chq = ""
    Select Case Cash_Flag
        Case 0
            Ls_Cash_Chq = "ttxn_cash_flg = 0 and "
        Case 1
            Ls_Cash_Chq = "ttxn_cash_flg <> 1 and "
    End Select

    rsUser.Filter = Ls_Cash_Chq & " ttxn_type=1 and ttxn_drcr_cd=1"
    If rsUser.EOF = False Then Tel_Rec = IIf(IsNull(rsUser.Fields(0)), 0, rsUser.Fields(0))
    
    rsUser.Filter = ""
    rsUser.Filter = Ls_Cash_Chq & " ttxn_type=1 and ttxn_drcr_cd=2"
    If rsUser.EOF = False Then Tel_Pay = IIf(IsNull(rsUser.Fields(0)), 0, rsUser.Fields(0))
    rsUser.Filter = ""
    
    rsUser.Filter = Ls_Cash_Chq & " ttxn_type=2 and ttxn_drcr_cd=1"
    If rsUser.EOF = False Then Other_Rec = IIf(IsNull(rsUser.Fields(0)), 0, rsUser.Fields(0))
    
    rsUser.Filter = ""
    rsUser.Filter = Ls_Cash_Chq & " ttxn_type=2 and ttxn_drcr_cd=2"
    If rsUser.EOF = False Then Other_Pay = IIf(IsNull(rsUser.Fields(0)), 0, rsUser.Fields(0))
    rsUser.Filter = ""
    
    rsUser.Filter = Ls_Cash_Chq & " ttxn_type=3 and ttxn_drcr_cd=1"
    If rsUser.EOF = False Then GL_Rec = IIf(IsNull(rsUser.Fields(0)), 0, rsUser.Fields(0))
    
    rsUser.Filter = ""
    rsUser.Filter = Ls_Cash_Chq & " ttxn_type=3 and ttxn_drcr_cd=2"
    If rsUser.EOF = False Then GL_Pay = IIf(IsNull(rsUser.Fields(0)), 0, rsUser.Fields(0))
    
    rsUser.Filter = ""
    rsUser.Filter = Ls_Cash_Chq & " ttxn_type=4 and ttxn_drcr_cd=1"
    If rsUser.EOF = False Then Cust_Rec = IIf(IsNull(rsUser.Fields(0)), 0, rsUser.Fields(0))

    rsUser.Filter = ""
    rsUser.Filter = Ls_Cash_Chq & " ttxn_type=4 and ttxn_drcr_cd=2"
    If rsUser.EOF = False Then Cust_Pay = IIf(IsNull(rsUser.Fields(0)), 0, rsUser.Fields(0))
    rsUser.Filter = ""
    
    Tr_Bal = Tel_Rec - Tel_Pay
    GL_Bal = GL_Rec - GL_Pay
    Cust_Bal = Cust_Rec - Cust_Pay
    Other_Bal = Other_Rec - Other_Pay
    Tot_Rec = Tel_Rec + GL_Rec + Cust_Rec + Other_Rec
    ToT_Pay = Tel_Pay + Other_Pay + Cust_Pay + GL_Pay
    Teller_Balance = Tel_Rec + Cust_Rec + Other_Rec + GL_Rec - Tel_Pay - Cust_Pay - Other_Pay - GL_Pay
Proc_Exit:
    Exit Sub
End Sub
Public Function Get_Cust_Long_Name(ByVal BrCode As Integer, ByVal CustId As Long) As String
Dim Sqlstr As String, Krecset As New ADODB.Recordset
Dim FstName As String, MidName As String, SurName As String, strVar As String

    If BrCode = 0 Then Exit Function
    If CustId = 0 Then Exit Function
    Get_Cust_Long_Name = ""
    FstName = ""
    MidName = ""
    SurName = ""
    If Set_Connection(BrCode) <> 0 Then Exit Function
    
    Sqlstr = "select cust_fstname,cust_midname,cust_surname from " & UseDbPrefix & "customer "
    Sqlstr = Sqlstr + " where br_code = " & BrCode & " and cust_idno = " & CustId
    Call Fire_Sql(Sqlstr, Krecset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/GET_Cust_Long_Name_1")
    If Krecset.EOF Then Exit Function
    FstName = IIf(IsNull(Krecset!Cust_FstName), "", Krecset!Cust_FstName)
    MidName = IIf(IsNull(Krecset!Cust_MidName), "", Krecset!Cust_MidName)
    SurName = IIf(IsNull(Krecset!Cust_SurName), "", Krecset!Cust_SurName)
    strVar = FstName + " " + MidName + " " + SurName
    Get_Cust_Long_Name = strVar
    Exit Function
End Function
Public Sub Get_Next_Due_Date(ByVal Instal_Freq As Byte, ByVal First_Inst_Date As Date, _
                            ByVal Curr_Inst_Date As Date, ByRef Next_Inst_Date As Date)
Dim Cur_I_Mon As Byte, Cur_I_Year As Integer
Dim First_I_Mon As Byte, First_I_Day As Byte, Temp_Day As Byte, First_I_Day_2 As Byte

    ' Daily Instalment
    If Instal_Freq = 1 Then
        Next_Inst_Date = Curr_Inst_Date + 1
        Exit Sub
    End If
    ' Weekly Instalment
    If Instal_Freq = 2 Then
        Next_Inst_Date = Curr_Inst_Date + 7
        Exit Sub
    End If
    
    ' Twice a Month Instalment
    If Instal_Freq = 3 Then
        ' Fix 2 Days in Month depending on First Instalment Date
        First_I_Day = Day(First_Inst_Date)
        If First_I_Day <= 15 Then
            First_I_Day_2 = First_I_Day + 15
        End If
        If First_I_Day >= 16 Then
            First_I_Day_2 = First_I_Day - 15
            If First_I_Day_2 = 16 Then First_I_Day_2 = 15
        End If
        ' Put Smaller Value(1-15) in First_I_Day and Bigger value(16-31) in First_I_Day_2
        ' Interchange if required
        If First_I_Day > 15 Then
            Temp_Day = First_I_Day
            First_I_Day = First_I_Day_2
            First_I_Day_2 = Temp_Day
        End If
        ' Now Work Out Next Instalment date depending on current Instalment date
        If Day(Curr_Inst_Date) <= 15 Then
            ' Next Instalment in 2nd half of same month
            Temp_Day = First_I_Day_2
            Cur_I_Mon = Month(Curr_Inst_Date)
            Cur_I_Year = Year(Curr_Inst_Date)
        Else
            ' Next Instalment in First Half of Next Month
            Temp_Day = First_I_Day
            Cur_I_Mon = Month(Curr_Inst_Date) + 1
            Cur_I_Year = Year(Curr_Inst_Date)
            If Cur_I_Mon > 12 Then
                Cur_I_Mon = Cur_I_Mon - 12
                Cur_I_Year = Cur_I_Year + 1
            End If
        End If
        ' Make sure The Date is Valid
        If Temp_Day > Days_In_Month(Cur_I_Mon, Cur_I_Year) Then Temp_Day = Days_In_Month(Cur_I_Mon, Cur_I_Year)
        Next_Inst_Date = CDate(CStr(Temp_Day) + "-" + Month_Name(Cur_I_Mon) + "-" + CStr(Cur_I_Year))
        Exit Sub
    End If

    ' Monthly/Quarterly/Half-Yearly/Yearly Instalment
    'If (Instal_Freq >= 4 And Instal_Freq <= 7) Or Instal_Freq = 9 Then
    If (Instal_Freq >= 4 And Instal_Freq <= 8) Or Instal_Freq = 9 Then
        First_I_Day = Day(First_Inst_Date)
        Cur_I_Year = Year(Curr_Inst_Date)
        Cur_I_Mon = Month(Curr_Inst_Date)
        If Instal_Freq = 4 Then Cur_I_Mon = Cur_I_Mon + 1
        If Instal_Freq = 5 Then Cur_I_Mon = Cur_I_Mon + 3
        If Instal_Freq = 6 Then Cur_I_Mon = Cur_I_Mon + 6
        If Instal_Freq = 7 Then Cur_I_Mon = Cur_I_Mon + 12
        If Instal_Freq = 8 Then Cur_I_Mon = Cur_I_Mon + 4
        If Instal_Freq = 9 Then Cur_I_Mon = Cur_I_Mon + 1
        If Cur_I_Mon > 12 Then
            Cur_I_Mon = Cur_I_Mon - 12
            Cur_I_Year = Cur_I_Year + 1
        End If
        Temp_Day = First_I_Day
        If Instal_Freq = 4 Or Instal_Freq = 9 Then
            If Cur_I_Mon = 1 And First_I_Day = 31 Then Temp_Day = 31
            If Cur_I_Mon = 2 And First_I_Day = 31 Then Temp_Day = 28
            If Cur_I_Mon = 3 And First_I_Day = 28 Then Temp_Day = 31
            If Cur_I_Mon = 4 And First_I_Day = 31 Then Temp_Day = 30
            If Cur_I_Mon = 5 And First_I_Day = 30 Then Temp_Day = 31
            If Cur_I_Mon = 6 And First_I_Day = 31 Then Temp_Day = 30
            If Cur_I_Mon = 7 And First_I_Day = 30 Then Temp_Day = 31
            If Cur_I_Mon = 8 And First_I_Day = 31 Then Temp_Day = 31
            If Cur_I_Mon = 9 And First_I_Day = 31 Then Temp_Day = 30
            If Cur_I_Mon = 10 And First_I_Day = 30 Then Temp_Day = 31
            If Cur_I_Mon = 11 And First_I_Day = 31 Then Temp_Day = 30
            If Cur_I_Mon = 12 And First_I_Day = 30 Then Temp_Day = 31
        End If
        If Temp_Day > Days_In_Month(Cur_I_Mon, Cur_I_Year) Then Temp_Day = Days_In_Month(Cur_I_Mon, Cur_I_Year)
        Next_Inst_Date = CDate(CStr(Temp_Day) + "-" + Month_Name(Cur_I_Mon) + "-" + CStr(Cur_I_Year))
        Exit Sub
    End If
End Sub
Public Sub Get_Next_FDR_Due_Date(ByVal Instal_Freq As Byte, ByVal First_Inst_Date As Date, _
                            ByVal Curr_Inst_Date As Date, ByRef Next_Inst_Date As Date)
Dim Cur_I_Mon As Byte, Cur_I_Year As Integer
Dim First_I_Mon As Byte, First_I_Day As Byte, Temp_Day As Byte, First_I_Day_2 As Byte

    'Instal_Freq 1 = Daily
    'Instal_Freq 2 = Monthly
    'Instal_Freq 3 = Quarterly
    'Instal_Freq 6 = Half Yearly
    'Instal_Freq 7 = Annually
    'Instal_Freq 9 = On maturity

    ' Daily Instalment
    If Instal_Freq = 1 Then
        Next_Inst_Date = Curr_Inst_Date + 1
        Exit Sub
    End If

    ' Monthly/Quarterly/Half-Yearly/Yearly Instalment
    If Instal_Freq = 2 Or Instal_Freq = 3 Or Instal_Freq = 6 Or Instal_Freq = 7 Then
        First_I_Day = Day(First_Inst_Date)
        Cur_I_Year = Year(Curr_Inst_Date)
        Cur_I_Mon = Month(Curr_Inst_Date)
        If Instal_Freq = 2 Then Cur_I_Mon = Cur_I_Mon + 1
        If Instal_Freq = 3 Then Cur_I_Mon = Cur_I_Mon + 3
        If Instal_Freq = 6 Then Cur_I_Mon = Cur_I_Mon + 6
        If Instal_Freq = 7 Then Cur_I_Mon = Cur_I_Mon + 12
        If Cur_I_Mon > 12 Then
            Cur_I_Mon = Cur_I_Mon - 12
            Cur_I_Year = Cur_I_Year + 1
        End If
        Temp_Day = First_I_Day
        If Instal_Freq = 2 Then
            If Cur_I_Mon = 1 And First_I_Day = 31 Then Temp_Day = 31
            If Cur_I_Mon = 2 And First_I_Day = 31 Then Temp_Day = 28
            If Cur_I_Mon = 3 And First_I_Day = 28 Then Temp_Day = 31
            If Cur_I_Mon = 4 And First_I_Day = 31 Then Temp_Day = 30
            If Cur_I_Mon = 5 And First_I_Day = 30 Then Temp_Day = 31
            If Cur_I_Mon = 6 And First_I_Day = 31 Then Temp_Day = 30
            If Cur_I_Mon = 7 And First_I_Day = 30 Then Temp_Day = 31
            If Cur_I_Mon = 8 And First_I_Day = 31 Then Temp_Day = 31
            If Cur_I_Mon = 9 And First_I_Day = 31 Then Temp_Day = 30
            If Cur_I_Mon = 10 And First_I_Day = 30 Then Temp_Day = 31
            If Cur_I_Mon = 11 And First_I_Day = 31 Then Temp_Day = 30
            If Cur_I_Mon = 12 And First_I_Day = 30 Then Temp_Day = 31
        End If
        If Temp_Day > Days_In_Month(Cur_I_Mon, Cur_I_Year) Then Temp_Day = Days_In_Month(Cur_I_Mon, Cur_I_Year)
        Next_Inst_Date = CDate(CStr(Temp_Day) + "-" + Month_Name(Cur_I_Mon) + "-" + CStr(Cur_I_Year))
        Exit Sub
    End If
End Sub
Public Sub Find_Instalments(ByVal AcntType As Integer, ByVal Principal_amt As Currency, ByVal Uncap_Int_Amt As Currency, _
                            ByVal Int_Type As Byte, ByVal Base_Rate As Integer, _
                            ByVal Adnl_Int_Rate As Currency, ByVal Install_Freq As Byte, _
                            ByVal First_Inst_Date As Date, ByVal Disburse_Date As Date, _
                            ByVal Loan_Category As String, ByVal Query_Type As Byte, _
                            ByRef Instal_Amt As Currency, ByRef Num_Install As Integer, _
                            ByRef Last_Instal_amt As Currency, ByRef Err_Flag As Byte, _
                            ByRef Prin_Arr() As Currency, ByRef Int_Arr() As Currency)
                            
' Query Type 1 = Number of Instalments is Given & We have to Find Installment Amount
'            2 = Amount of Instalment Given & We have to Find Number of Instalments
'            3 = Amount of Instalment Given and No.of Installments given. We have to
'                   Schedule this loan. The last Installment has the balance amount.

' Installment Frequency 0 = Lumpsum; 1=Daily; 2=Weekly; 3=Half_Monthly; 4=Monthly;
'                       5 = Quarterly; 6=Half-yearly; 7=Yearly; 8 = Term Loans 9=Only From Salary

'Lump Sum Payment Case
Dim Temp_Principal As Currency, Interest_Amt As Currency
Dim Unrec_Int_Amt As Currency, Monthly_Ledger_Fee As Currency
Dim Date_From As Date, Date_Till As Date, Byte_Flag As Byte

Dim Cap_Interest As Currency, Cap_Bank_Charges As Currency, Next_Inst_Date As Date
Dim UnCap_Interest As Currency, Uncap_Bank_Charges As Currency, Month_End_Flag As Byte
Dim Temp_Temp_Principal As Currency, Inst_Date_Flag As Byte, Temp_Amt As Currency
Dim Left_Over_Amt As Currency, Amt_Adjusted As Currency, Temp_Date As Date
Dim Max_Instalments As Integer, Save_Num_Inst As Integer
Dim Low_inst As Currency, High_Inst As Currency, Low_Num_Inst As Integer, High_Num_Inst As Integer
Dim Ts_Num_Install As Integer, TS_Install_Amt As Currency, I As Integer
Dim Iteration_Counter As Long, Max_Iterations As Long, Multiply_Factor As Long, Dummy_Var As Currency
Dim Loop_Kount As Long, Cumulative_Ledger_Fee As Currency, I_From As Integer, I_Till As Integer
Dim Dummy_Principal As Currency, Dummy_Interest As Currency

    If Query_Type = 1 And (UBound(Prin_Arr()) < Num_Install Or UBound(Int_Arr()) < Num_Install) Then
        MsgBox "Stupid Function Caller"
        Exit Sub
    End If
    Loop_Kount = 0
    Call Open_Info_Schd
    Max_Instalments = 0
    If Query_Type = 1 Then Instal_Amt = 0
    If Query_Type = 2 Then Num_Install = 0
    If Query_Type = 3 Then
        Ts_Num_Install = Num_Install
        TS_Install_Amt = Instal_Amt
    End If
    Last_Instal_amt = 0
    Err_Flag = 0
    Unrec_Int_Amt = Uncap_Int_Amt
    
    ' Find Rounding Off Parameter for Installment Amount
    If Install_Rounding_Paise = 0 Then
        Call Get_Loan_Parameter("ROUND_INST", Install_Rounding_Paise)
        ' Default Rounding Off at 10 Shillings
        If Install_Rounding_Paise = 0 Then Install_Rounding_Paise = 1000
    End If
    
    ' Round Off user specified Instalment Amount
    If Query_Type = 2 Then Call round_off_amt(Instal_Amt, Install_Rounding_Paise, Instal_Amt)
    
    ' Get Monthly Ledger Fee Applicable; Dependent on Cust Category therefore
    ' has to be seen for each case
    Call Compute_Loan_Ledger_Fee(MyClass.Unit_Code, AcntType, Loan_Category, Principal_amt, Monthly_Ledger_Fee)
    
    If Query_Type = 3 Then GoSub Find_Num_Instalments

    If Install_Freq <> 0 Then GoTo Proper_Instalment_Cases
    
    ' Number of Instalments Provided must be 1 and Query Type
    ' Also should be 1 only in Lump Sum case
    If Query_Type <> 1 Or Num_Install <> 1 Then
        Err_Flag = 1
        GoTo Exit_Here
    End If

Lump_Sum_Case:

    ' Work Out Maturity Amount Here after Taking care of Interest & Ledger Fee
    Date_From = Disburse_Date
    Temp_Principal = Principal_amt
    Int_Arr(1) = 0
    
    ' In case of Flat Rated Interest, make sure we do not compound interest
     Cumulative_Ledger_Fee = 0
     
Int_Loop:

    Date_Till = Month_End_Date(Date_From)
    If Date_Till > First_Inst_Date - 1 Then Date_Till = First_Inst_Date - 1
    Call Compute_Loan_Interest(Int_Type, Base_Rate, Adnl_Int_Rate, _
                              Temp_Principal, Date_From, Date_Till, Interest_Amt, Byte_Flag)
    If Byte_Flag <> 0 Then
        Err_Flag = 2
        GoTo Exit_Here
    End If
    Int_Arr(1) = Int_Arr(1) + Interest_Amt + Unrec_Int_Amt
    If Int_Type = 0 Then Temp_Principal = Temp_Principal + Interest_Amt + Monthly_Ledger_Fee + Unrec_Int_Amt
    If Int_Type >= 1 Then Cumulative_Ledger_Fee = Cumulative_Ledger_Fee + Monthly_Ledger_Fee
    Unrec_Int_Amt = 0
    If Date_Till < First_Inst_Date - 1 Then
        Date_From = Date_Till + 1
        GoTo Int_Loop
    End If
    Instal_Amt = Temp_Principal
    If Month(Disburse_Date) <> Month(Date_Till) Or Year(Disburse_Date) <> Year(Date_Till) Then Instal_Amt = Instal_Amt + Monthly_Ledger_Fee
    ' In case of Flat Rated Interest add ALL Ledger Fee in Principal amt (including Last Additional Fee) and also ALL interest
    If Int_Type >= 1 Then
        Instal_Amt = Temp_Principal + Int_Arr(1) + Cumulative_Ledger_Fee
        If Month(Disburse_Date) <> Month(Date_Till) Or Year(Disburse_Date) <> Year(Date_Till) Then Instal_Amt = Instal_Amt + Monthly_Ledger_Fee
    End If
    Last_Instal_amt = Instal_Amt
    Prin_Arr(1) = Principal_amt
    GoTo Exit_Here


Exit_Here:

    Call Close_Info_schd
    Exit Sub
    
Proper_Instalment_Cases:

    'Instalment Frequency 9 is to be treated as MONTHLY for re-scheduling purposes
    If Install_Freq = 9 Then Install_Freq = 4
    
    ' Instalment Frequency 1-7 cases
    If Query_Type <> 1 Then GoTo Query_Type_2
    
Query_Type_1:

    ' Number of Instalment is given and We have to Find Amount of Each Instalment
    If Num_Install <= 0 Then
        Err_Flag = 3
        GoTo Exit_Here
    End If
    
    ' If number of Instalment Specified is 1 then treat it as Lump_Sum Case
    If Num_Install = 1 Then GoTo Lump_Sum_Case

    ' Save User spoecified Number of Instalments
    Save_Num_Inst = Num_Install
    
    ' Find Approx. Instalment Amount
    Date_From = First_Inst_Date
    Date_Till = Date_From
    If Install_Freq = 1 Then Date_Till = Date_Till + (Save_Num_Inst - 1)
    If Install_Freq = 2 Then Date_Till = Date_Till + (Save_Num_Inst - 1) * 7
    If Install_Freq = 3 Then Date_Till = Date_Till + (Save_Num_Inst - 1) * 15.25
    If Install_Freq = 4 Then Date_Till = Date_Till + (Save_Num_Inst - 1) * 30.5
    If Install_Freq = 5 Then Date_Till = Date_Till + (Save_Num_Inst - 1) * 91.25
    If Install_Freq = 6 Then Date_Till = Date_Till + (Save_Num_Inst - 1) * 182.5
    If Install_Freq = 7 Then Date_Till = Date_Till + (Save_Num_Inst - 1) * 365
    If Install_Freq = 8 Then Date_Till = Date_Till + (Save_Num_Inst - 1) * 120.5
    ' But Interest Will be applied from Disbursement date
    Date_From = Disburse_Date
    ' Work Out Approx Simple Interest on this Loan
    Call Compute_Loan_Interest(Int_Type, Base_Rate, Adnl_Int_Rate, Principal_amt, Date_From, Date_Till, Interest_Amt, Byte_Flag)
    
    ' In case of Flat Rated Interest Simply Divide Total amount by Number of Installments
    If Int_Type >= 1 Then
        ' Work Out Date Till Exactly in This case
        Date_Till = Date_From
        For I = 1 To Save_Num_Inst
            Call Get_Next_Due_Date(Install_Freq, Date_From, Date_Till, Date_Till)
        Next I
        Date_Till = Date_Till - 1
        Call Compute_Loan_Interest(Int_Type, Base_Rate, Adnl_Int_Rate, Principal_amt, Date_From, Date_Till, Interest_Amt, Byte_Flag)
        Cumulative_Ledger_Fee = 0
        I_From = Year(Date_From) * 12 + Month(Date_From)
        I_Till = Year(Date_Till) * 12 + Month(Date_Till)
        Cumulative_Ledger_Fee = Monthly_Ledger_Fee * (I_Till - I_From + 1)
        Instal_Amt = (Principal_amt + Interest_Amt + Cumulative_Ledger_Fee + Unrec_Int_Amt) \ Save_Num_Inst
        Call round_off_amt(Instal_Amt, Install_Rounding_Paise, Instal_Amt)
        Last_Instal_amt = (Principal_amt + Interest_Amt + Cumulative_Ledger_Fee + Unrec_Int_Amt) - Instal_Amt * (Save_Num_Inst - 1)
        Prin_Arr(Save_Num_Inst) = Principal_amt
        Int_Arr(Save_Num_Inst) = Interest_Amt + Unrec_Int_Amt
        'original statements
'        For I = 1 To Save_Num_Inst - 1
'            Prin_Arr(I) = Format(Principal_amt / Save_Num_Inst, "0.00")
'            Int_Arr(I) = Format((Interest_Amt + Unrec_Int_Amt) / Save_Num_Inst, "0.00")
'            If Prin_Arr(I) + Int_Arr(I) > Instal_Amt Then Int_Arr(I) = Instal_Amt - Prin_Arr(I)
'            Prin_Arr(Save_Num_Inst) = Prin_Arr(Save_Num_Inst) - Prin_Arr(I)
'            Int_Arr(Save_Num_Inst) = Int_Arr(Save_Num_Inst) - Int_Arr(I)
'        Next I
        For I = 1 To Save_Num_Inst - 1
            Int_Arr(I) = Format((Interest_Amt + Unrec_Int_Amt) / Save_Num_Inst, "0.00")
            If Install_Freq >= 4 And Install_Freq <= 8 Then
                If Install_Freq = 4 Then Prin_Arr(I) = Instal_Amt - Int_Arr(I) - Monthly_Ledger_Fee
                If Install_Freq = 5 Then Prin_Arr(I) = Instal_Amt - Int_Arr(I) - (3 * Monthly_Ledger_Fee)
                If Install_Freq = 6 Then Prin_Arr(I) = Instal_Amt - Int_Arr(I) - (6 * Monthly_Ledger_Fee)
                If Install_Freq = 7 Then Prin_Arr(I) = Instal_Amt - Int_Arr(I) - (12 * Monthly_Ledger_Fee)
                If Install_Freq = 8 Then Prin_Arr(I) = Instal_Amt - Int_Arr(I) - (4 * Monthly_Ledger_Fee)
            Else
                Prin_Arr(I) = Format(Principal_amt / Save_Num_Inst, "0.00")
            End If
            If Prin_Arr(I) + Int_Arr(I) > Instal_Amt Then Int_Arr(I) = Instal_Amt - Prin_Arr(I)
            Prin_Arr(Save_Num_Inst) = Prin_Arr(Save_Num_Inst) - Prin_Arr(I)
            Int_Arr(Save_Num_Inst) = Int_Arr(Save_Num_Inst) - Int_Arr(I)
        Next I
         
        GoTo Exit_Here
    End If
    
    Interest_Amt = Format(Interest_Amt * 2 / 3, "0.00")
    If Byte_Flag <> 0 Then
        Err_Flag = 2
        GoTo Exit_Here
    End If
    ' Add Ledger Fee to be charged in Loan Duration
    Interest_Amt = Interest_Amt + Format(Monthly_Ledger_Fee * (Date_Till - Date_From) / 30.5, "0.00") + Monthly_Ledger_Fee
    
    ' Now Approx Installment Amount
    Instal_Amt = (Principal_amt + Interest_Amt + Unrec_Int_Amt) / Save_Num_Inst
    Max_Instalments = Save_Num_Inst * 1.5
    Low_inst = Instal_Amt / 8
    High_Inst = Instal_Amt * 4
    Low_Num_Inst = 32000
    High_Num_Inst = 1
    Iteration_Counter = 0
    Max_Iterations = 0
    
Try_This_Install_Value:

    Loop_Kount = Loop_Kount + 1
    Call round_off_amt(Low_inst, Install_Rounding_Paise, Low_inst)
    Call round_off_amt(High_Inst, Install_Rounding_Paise, High_Inst)
    ' If New Instalment Value is the same as we tried in Earlier Iteration,
    ' then Treat it as Final value
    Call round_off_amt(Instal_Amt, Install_Rounding_Paise, Instal_Amt)
    If Instal_Amt = Low_inst And Instal_Amt = High_Inst Then
        If Num_Install <> Save_Num_Inst Then
            If Num_Install <> Save_Num_Inst + 1 Then GoTo Get_New_Inst_Value
            ' If an additional residual instalment is left, adjust it in Last Installment
            Last_Instal_amt = Instal_Amt + Prin_Arr(Num_Install)
            Prin_Arr(Save_Num_Inst) = Prin_Arr(Save_Num_Inst) + Prin_Arr(Num_Install)
            Prin_Arr(Num_Install) = 0
            Int_Arr(Num_Install) = 0
            Num_Install = Save_Num_Inst
        End If
        Err_Flag = 0
        GoTo Exit_Here
    End If
    If Format(High_Inst - Low_inst, "0.00") = Format(Install_Rounding_Paise / 100, "0.00") Then
        If (Save_Num_Inst - High_Num_Inst) <= (Low_Num_Inst - Save_Num_Inst) Then
            Instal_Amt = High_Inst
            Num_Install = High_Num_Inst
            GoSub Find_Num_Instalments
        Else
            Instal_Amt = Low_inst
            Num_Install = Low_Num_Inst
            GoSub Find_Num_Instalments
        End If
        Err_Flag = 0
        GoTo Exit_Here
    End If
    
    ' Work Out Number of Instalments on the basis of This Instal_Amt
    GoSub Find_Num_Instalments
    If Instal_Amt = Low_inst Then Low_Num_Inst = Num_Install
    If Instal_Amt = High_Inst Then High_Num_Inst = Num_Install
    
    ' If An Error is being Returned by That Routine
    ' Error Flag 2 is that Interest Rate Parameter Not Found
    If Err_Flag = 2 Then GoTo Exit_Here
    ' Error of TOO LOW Instalment
    If Err_Flag = 6 Or Err_Flag = 7 Then
        If Low_inst < Instal_Amt Then
            Low_inst = Instal_Amt
            Low_Num_Inst = Num_Install
            Instal_Amt = Format((High_Inst + Low_inst) / 2, "0.00")
            GoTo Try_This_Install_Value
        End If
        GoTo Get_New_Inst_Value
    End If
    
    If Num_Install = Save_Num_Inst Then
        If Max_Iterations = 0 Then
            Multiply_Factor = 1
            Max_Iterations = ((Abs(Instal_Amt - Last_Instal_amt) * 100) \ (Install_Rounding_Paise * Save_Num_Inst)) + 1
        End If
        If Abs(Instal_Amt - Last_Instal_amt) <= (Install_Rounding_Paise / 100) * Save_Num_Inst Or Iteration_Counter > Max_Iterations Then
            Err_Flag = 0
            GoTo Exit_Here
        End If
        Iteration_Counter = Iteration_Counter + 1
        If Instal_Amt > Last_Instal_amt Then
            Low_inst = Last_Instal_amt
            High_Inst = Instal_Amt
            Low_Num_Inst = Num_Install
            High_Num_Inst = Num_Install
            Instal_Amt = Format(Instal_Amt - (Install_Rounding_Paise / 100) * Multiply_Factor, "0.00")
            GoTo Try_This_Install_Value
        End If
        Low_inst = Instal_Amt
        High_Inst = Last_Instal_amt
        Low_Num_Inst = Num_Install
        High_Num_Inst = Num_Install
        Instal_Amt = Format(Instal_Amt + (Install_Rounding_Paise / 100) * Multiply_Factor, "0.00")
        GoTo Try_This_Install_Value
    End If

Get_New_Inst_Value:

    If Num_Install > Save_Num_Inst Then
        Low_inst = Instal_Amt
        Low_Num_Inst = Num_Install
        Instal_Amt = Format((Low_inst + High_Inst) / 2, "0.00")
        If Instal_Amt = 0 Then GoTo Exit_Here
        GoTo Try_This_Install_Value
    End If
    If Num_Install < Save_Num_Inst Then
        High_Inst = Instal_Amt
        High_Num_Inst = Num_Install
        Instal_Amt = Format((High_Inst + Low_inst) / 2, "0.00")
        If Instal_Amt = 0 Then GoTo Exit_Here
        GoTo Try_This_Install_Value
    End If
    
Query_Type_2:

    ' Amount of Instalment is given and We have to Find Number of Instalments
    If Instal_Amt = 0 Then
        Err_Flag = 4
        GoTo Exit_Here
    End If
    
    ' Make sure that the Instalment Amount is sufficient to Cover Interest & Bank Charges
    Date_Till = Disburse_Date - 1
    If Install_Freq = 1 Then Date_Till = Date_Till + 1
    If Install_Freq = 2 Then Date_Till = Date_Till + 7
    If Install_Freq = 3 Then Date_Till = Date_Till + 15
    If Install_Freq = 4 Then Date_Till = Date_Till + 30
    If Install_Freq = 5 Then Date_Till = Date_Till + 91
    If Install_Freq = 6 Then Date_Till = Date_Till + 182
    If Install_Freq = 7 Then Date_Till = Date_Till + 365
    If Install_Freq = 8 Then Date_Till = Date_Till + 120
    Call Compute_Loan_Interest(Int_Type, Base_Rate, Adnl_Int_Rate, Principal_amt, Disburse_Date, Date_Till, Interest_Amt, Byte_Flag)
    If Byte_Flag <> 0 Then
        Err_Flag = 2
        GoTo Exit_Here
    End If
    Temp_Amt = Monthly_Ledger_Fee
    If Install_Freq = 1 Then Temp_Amt = Temp_Amt / 30
    If Install_Freq = 2 Then Temp_Amt = Temp_Amt * 7 / 30
    If Install_Freq = 3 Then Temp_Amt = Temp_Amt / 2
    If Install_Freq = 5 Then Temp_Amt = Temp_Amt * 3
    If Install_Freq = 6 Then Temp_Amt = Temp_Amt * 6
    If Install_Freq = 7 Then Temp_Amt = Temp_Amt * 12
    If Install_Freq = 8 Then Temp_Amt = Temp_Amt * 4
    ' Is there enough Instalment Amount to cover Interest & Ledger Fee ?
    If Instal_Amt < Interest_Amt + Temp_Amt Then
        Call MyClass.Display_Message("Insufficient Installment.")
        Err_Flag = 5
        GoTo Exit_Here
    End If
    
    ' Now Find The Number of Instalments
    GoSub Find_Num_Instalments
    GoTo Exit_Here

'--------------------------------------------------------------------------------
' Internal Subroiutine To Find Number of Instalments from Given Instalment Amount
'--------------------------------------------------------------------------------

Find_Num_Instalments:

    Date_From = Disburse_Date
    Next_Inst_Date = First_Inst_Date
    Cap_Interest = 0
    Cap_Bank_Charges = 0
    UnCap_Interest = Unrec_Int_Amt
    Uncap_Bank_Charges = 0
    Num_Install = 0
    Temp_Principal = Principal_amt
    
    ' In case of Flat Rated Interest Simply Divide Total amount by Number of Installments
    If Int_Type = 1 Then
        ' Work Out Approximately Number of Installments in This case
        If Query_Type <> 3 Then Save_Num_Inst = (Principal_amt + Unrec_Int_Amt + Instal_Amt / 2) / Instal_Amt
        If Query_Type = 3 Then Save_Num_Inst = Ts_Num_Install
Loop_For_Num_Inst:

        Date_Till = Date_From
        If Query_Type <> 3 Then
            For I = 1 To Save_Num_Inst
                Call Get_Next_Due_Date(Install_Freq, Date_From, Date_Till, Date_Till)
            Next I
        End If
        If Query_Type = 3 Then
            For I = 1 To Ts_Num_Install
                Call Get_Next_Due_Date(Install_Freq, Date_From, Date_Till, Date_Till)
            Next I
        End If
        Date_Till = Date_Till - 1
        Call Compute_Loan_Interest(Int_Type, Base_Rate, Adnl_Int_Rate, Principal_amt, Date_From, Date_Till, Interest_Amt, Byte_Flag)
        Cumulative_Ledger_Fee = 0
        I_From = Year(Date_From) * 12 + Month(Date_From)
        I_Till = Year(Date_Till) * 12 + Month(Date_Till)
        Cumulative_Ledger_Fee = Monthly_Ledger_Fee * (I_Till - I_From + 1)
        
        If Query_Type <> 3 Then
            Num_Install = (Principal_amt + Interest_Amt + Cumulative_Ledger_Fee + Unrec_Int_Amt + (Instal_Amt * 2 \ 3)) \ Instal_Amt
            Last_Instal_amt = (Principal_amt + Interest_Amt + Cumulative_Ledger_Fee + Unrec_Int_Amt) - Instal_Amt * (Num_Install - 1)
        End If
        If Query_Type = 3 Then
            Num_Install = Ts_Num_Install
            Last_Instal_amt = (Principal_amt + Interest_Amt + Cumulative_Ledger_Fee + Unrec_Int_Amt) - Instal_Amt * (Num_Install - 1)
        End If
        
        If Last_Instal_amt = 0 Then Num_Install = Num_Install - 1
        If Num_Install <> Save_Num_Inst Then
            Save_Num_Inst = Num_Install
            GoTo Loop_For_Num_Inst
        End If
        
        Dummy_Interest = Format(Interest_Amt / Num_Install, "0.00")
        
        If Install_Freq >= 4 And Install_Freq <= 8 Then
            If Install_Freq = 4 Then Dummy_Principal = Instal_Amt - Dummy_Interest - Monthly_Ledger_Fee
            If Install_Freq = 5 Then Dummy_Principal = Instal_Amt - Dummy_Interest - (3 * Monthly_Ledger_Fee)
            If Install_Freq = 6 Then Dummy_Principal = Instal_Amt - Dummy_Interest - (6 * Monthly_Ledger_Fee)
            If Install_Freq = 7 Then Dummy_Principal = Instal_Amt - Dummy_Interest - (12 * Monthly_Ledger_Fee)
            If Install_Freq = 8 Then Dummy_Principal = Instal_Amt - Dummy_Interest - (4 * Monthly_Ledger_Fee)
        Else
            Dummy_Principal = Format(Principal_amt / Num_Install, "0.00")
        End If
        For I = 1 To Num_Install - 1
            Prin_Arr(I) = Dummy_Principal
            Int_Arr(I) = Dummy_Interest
        Next I
        Prin_Arr(Num_Install) = Principal_amt - (Num_Install - 1) * Dummy_Principal
        Int_Arr(Num_Install) = Interest_Amt - (Num_Install - 1) * Dummy_Interest
        
'        Prin_Arr(Num_Install) = Principal_amt
'        Int_Arr(Num_Install) = Interest_Amt + unrec_int_amt
'        If Query_Type = 3 Then GoTo Exit_Here
'
'        Dummy_Var = (Instal_Amt * 15) / (Instal_Amt * 15 + Last_Instal_amt)
'        For I = 1 To Num_Install - 1
'            Prin_Arr(I) = Format(Principal_amt * Dummy_Var / (Num_Install - 1), "0.00")
'            Int_Arr(I) = Format(((Interest_Amt + unrec_int_amt) * Dummy_Var) / (Num_Install - 1), "0.00")
'            Prin_Arr(Num_Install) = Prin_Arr(Num_Install) - Prin_Arr(I)
'            Int_Arr(Num_Install) = Int_Arr(Num_Install) - Int_Arr(I)
'        Next I
        Return
    End If
    
Int_Loop_2:

    Call Do_Events
    Month_End_Flag = 0
    Inst_Date_Flag = 0
    ' We have to compute Interest upto Month End or Instalment Date - 1
    Date_Till = Month_End_Date(Date_From)
    If Date_Till > Next_Inst_Date - 1 Then Date_Till = Next_Inst_Date - 1
    ' Switch on Flags for Month End & Instalment Date
    If Date_Till = Next_Inst_Date - 1 Then Inst_Date_Flag = 1
    If Date_Till = Month_End_Date(Date_From) Then Month_End_Flag = 1
    ' Interest is to be Computed omn ALL Capitalised Amounts
    Temp_Temp_Principal = Temp_Principal + Cap_Interest + Cap_Bank_Charges
    Call Compute_Loan_Interest(Int_Type, Base_Rate, Adnl_Int_Rate, Temp_Temp_Principal, Date_From, Date_Till, Interest_Amt, Byte_Flag)
    If Byte_Flag <> 0 Then
        Err_Flag = 2
        Return
    End If
    If Month_End_Flag = 0 Then UnCap_Interest = UnCap_Interest + Interest_Amt
    ' In case of Month End Capitalise Interest & Add Ledger Fee
    If Month_End_Flag >= 1 Then
        Cap_Interest = Cap_Interest + UnCap_Interest + Interest_Amt
        UnCap_Interest = 0
        Cap_Bank_Charges = Cap_Bank_Charges + Uncap_Bank_Charges + Monthly_Ledger_Fee
        Uncap_Bank_Charges = 0
    End If
    ' If Instalment Date Falls on This Date perform Recoveries
    If Inst_Date_Flag >= 1 Then
        Num_Install = Num_Install + 1
        If Query_Type = 3 Then
            If Ts_Num_Install = Num_Install Then
                Last_Instal_amt = Temp_Principal + Monthly_Ledger_Fee + UnCap_Interest + Uncap_Bank_Charges + Cap_Bank_Charges + Cap_Interest
                Prin_Arr(Num_Install) = Temp_Principal
                Int_Arr(Num_Install) = Cap_Interest + UnCap_Interest
                GoTo Exit_Here
            End If
        End If
        Left_Over_Amt = Instal_Amt
        
        ' Initialise Stupid Arrays
        If UBound(Prin_Arr()) < Num_Install Then ReDim Preserve Prin_Arr(Num_Install)
        If UBound(Int_Arr()) < Num_Install Then ReDim Preserve Int_Arr(Num_Install)
        Prin_Arr(Num_Install) = 0
        Int_Arr(Num_Install) = 0
        
        ' Adjust Uncap Bank Charges First
        Amt_Adjusted = Uncap_Bank_Charges
        If Amt_Adjusted > Left_Over_Amt Then Amt_Adjusted = Left_Over_Amt
        Uncap_Bank_Charges = Uncap_Bank_Charges - Amt_Adjusted
        Left_Over_Amt = Left_Over_Amt - Amt_Adjusted
        
        ' Adjust Capitalised Bank_charges Next
        If Left_Over_Amt > 0 Then
            Amt_Adjusted = Cap_Bank_Charges
            If Amt_Adjusted > Left_Over_Amt Then Amt_Adjusted = Left_Over_Amt
            Cap_Bank_Charges = Cap_Bank_Charges - Amt_Adjusted
            Left_Over_Amt = Left_Over_Amt - Amt_Adjusted
        End If
        
        ' Adjust Uncap Interest Next
        If Left_Over_Amt > 0 Then
            Amt_Adjusted = UnCap_Interest
            If Amt_Adjusted > Left_Over_Amt Then Amt_Adjusted = Left_Over_Amt
            Int_Arr(Num_Install) = Amt_Adjusted
            UnCap_Interest = UnCap_Interest - Amt_Adjusted
            Left_Over_Amt = Left_Over_Amt - Amt_Adjusted
        End If
        
        ' Adjust Capitalised Interest Next
        If Left_Over_Amt > 0 Then
            Amt_Adjusted = Cap_Interest
            If Amt_Adjusted > Left_Over_Amt Then Amt_Adjusted = Left_Over_Amt
            Int_Arr(Num_Install) = Int_Arr(Num_Install) + Amt_Adjusted
            Cap_Interest = Cap_Interest - Amt_Adjusted
            Left_Over_Amt = Left_Over_Amt - Amt_Adjusted
        End If
        
        ' Adjust Principal Next
        If Left_Over_Amt > 0 Then
            Amt_Adjusted = Temp_Principal
            If Amt_Adjusted > Left_Over_Amt Then Amt_Adjusted = Left_Over_Amt
            Prin_Arr(Num_Install) = Amt_Adjusted
            Temp_Principal = Temp_Principal - Amt_Adjusted
            Left_Over_Amt = Left_Over_Amt - Amt_Adjusted
        End If
        If Temp_Principal = 0 Then
            Last_Instal_amt = Instal_Amt - Left_Over_Amt
            ' We must have a provision of Ledger Fee in Last Instalment
            If Monthly_Ledger_Fee > 0 And Month_End_Flag = 0 Then Last_Instal_amt = Last_Instal_amt + Monthly_Ledger_Fee
            GoTo Money_recovered
        End If
        ' Work Out next_instalment date
        Temp_Date = Next_Inst_Date
        Call Get_Next_Due_Date(Install_Freq, First_Inst_Date, Temp_Date, Next_Inst_Date)
    End If
    
    Date_From = Date_Till + 1
    ' Make sure that the Instalments Do not go beyond 40 years
    If Date_From > First_Inst_Date + 146100 Then
        Call Close_Info_schd
        Err_Flag = 6
        Return
    End If
    ' If User has specified Maximum Number of Instalments, then we should give up after that many
    If Max_Instalments > 0 And Num_Install > Max_Instalments Then
        Err_Flag = 7
        Call Close_Info_schd
        Return
    End If
    GoTo Int_Loop_2
    
Money_recovered:

    Err_Flag = 0
    Return
   
IO_Error:
    Call MyClass.Display_Message("SQL I/O Error, Find_Instalments", 1)
    End
End Sub
Public Function Set_Connection(ByVal Branch_Code As Integer) As Byte
Dim Byte_Flag As Byte

    UseDbPrefix = MyClass.gUnifyDb
    Use_Connection = MyClass.Connection_No
    If Branch_Code <> MyClass.Unit_Code Then
        Call MyClass.Open_WAN_Branch(Branch_Code, Byte_Flag)
        If Byte_Flag = 0 Then
            Set_Connection = 1
            Exit Function
        End If
        UseDbPrefix = MyClass.ForeignDb
        Use_Connection = MyClass.Foreign_Connection
    End If
    Set_Connection = 0
    Exit Function
End Function

Public Sub Get_Loan_Balance(ByVal Branch_Code As Integer, ByVal Account_Type As Integer, _
                            ByVal Loan_Ac_No As Long, ByVal Balance_Date As Date, _
                            ByRef Balance_with_Latest_Interest As Currency, _
                            ByRef Unrec_Int_Amt As Currency, ByRef Error_Flag As Byte, Optional Not_Include_Latest_Interest As Byte)

'This Procedure Returns Loan Balance,UnRecovered Interest Amount and Error Flag
Dim Sqlstr As String, Closing_Balance(5) As Currency, Last_Int_Date As Date, I As Integer
Dim Principal_For_Interest As Currency, Prev_Uncapitalized_Amt As Currency
Dim Mast_Base_Int_Code As Integer
Dim Mast_Adnl_Int_Rate As Currency, Mast_Loan_Status As Byte, Mast_Loan_Close_Date As Date
Dim Int_Start_Date As Date, Interest_Amount As Currency
Dim Recset As New ADODB.Recordset
Dim Int_Type As Byte, Categ_Code As String

On Error GoTo IO_Error
    
    For I = 0 To 5
        Closing_Balance(I) = 0
    Next I
    Last_Int_Date = #1/1/1900#
    Balance_with_Latest_Interest = 0
    
    If Set_Connection(Branch_Code) <> 0 Then Exit Sub
    
    Call Bank_Loan_Open(Branch_Code, Account_Type, Loan_Ac_No, Balance_Date + 1, Balance_Date + 1, Closing_Balance(), Last_Int_Date, Error_Flag)
    If Error_Flag <> 0 Then Exit Sub
    
    ' Now work out Interest Till Today to Give Upto Date Balance Figure
    Principal_For_Interest = Closing_Balance(1) + Closing_Balance(2) + Closing_Balance(3)
    Prev_Uncapitalized_Amt = Closing_Balance(4) + Closing_Balance(5)
    
    ' Now Compute Interest from Int_Start_date to Balance Date on principal_for_interest; Both Dates included
    Sqlstr = "select lm_category, lm_ac_status, lm_close_date, lm_addnl_int_rate From " & UseDbPrefix & "laccounts " & _
             " where lm_hbr_cd = " & Branch_Code & " and " & _
                   " lm_type_code = " & Account_Type & " and lm_ac_srno = " & Loan_Ac_No
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    If Recset.EOF = True Then
        Error_Flag = 2
        Exit Sub
    End If
    Categ_Code = Trim$(IIf(IsNull(Recset!lm_category), "", Recset!lm_category))
    Call Find_Loan_Int_Rate(Categ_Code, 0, 0, Int_Type, Mast_Base_Int_Code)
    Mast_Adnl_Int_Rate = IIf(IsNull(Recset!lm_addnl_int_rate), 0, Recset!lm_addnl_int_rate)
    Mast_Loan_Status = IIf(IsNull(Recset!lm_ac_status), 0, Recset!lm_ac_status)
    Mast_Loan_Close_Date = IIf(IsNull(Recset!lm_close_date), "31-12-2099", Recset!lm_close_date)
    Int_Start_Date = Last_Int_Date + 1
    Interest_Amount = 0
    If Mast_Loan_Status > 0 And Mast_Loan_Close_Date <= Balance_Date Then GoTo Add_Here
    If Not_Include_Latest_Interest = 0 Then
        If Account_Type < Loan_Type_For_SalAdv And Int_Type = 0 Then Call Debit_Interest(Branch_Code, Account_Type, Loan_Ac_No, Int_Type, Mast_Base_Int_Code, Mast_Adnl_Int_Rate, Principal_For_Interest, Int_Start_Date, Balance_Date, 0, Interest_Amount)
    End If
    
Add_Here:

    Balance_with_Latest_Interest = Principal_For_Interest + Prev_Uncapitalized_Amt + Interest_Amount
    Unrec_Int_Amt = Prev_Uncapitalized_Amt + Interest_Amount
    Exit Sub
    
IO_Error:
    MsgBox "SQL Execution Failed Get_Loan_Balance/MyLibClass"
    End
End Sub

Public Sub Bank_Loan_Read(ByRef SuccFlag As Byte, ByRef Branch_Code As Integer, ByRef Tran_Date As Date, _
                        ByRef Tran_Number As Long, ByRef Effec_Date As Date, _
                        ByRef Rec_Type As Byte, ByRef DbCr_Code As Byte, ByRef Tran_Amt As Currency, _
                        ByRef Tran_Code As String, ByRef Principal_amt As Currency, _
                        ByRef Cap_Interest As Currency, ByRef Cap_Bank_Charges As Currency, _
                        ByRef UnCap_Interest As Currency, ByRef Uncap_Bank_Charges As Currency, _
                        ByRef Narration As String, ByRef Balance() As Currency, Optional ByRef Int_From_Date As Date, _
                        Optional ByRef Int_Till_Date As Date, Optional ByRef Amt_For_Interest As Currency)
Dim I As Integer

On Error GoTo Proc_Error

    'Initialize User Variables
    Branch_Code = 0
    Tran_Date = #1/1/1900#
    Tran_Number = 0
    Effec_Date = #1/1/1900#
    Rec_Type = 0
    DbCr_Code = 0
    Tran_Amt = 0
    Tran_Code = ""
    Principal_amt = 0
    Cap_Interest = 0
    Cap_Bank_Charges = 0
    UnCap_Interest = 0
    Uncap_Bank_Charges = 0
    Narration = ""
    Int_From_Date = #1/1/1900#
    Int_Till_Date = #1/1/1900#
    Amt_For_Interest = 0

    If Rs_LTran.EOF = True Then
        SuccFlag = 1
        Exit Sub
    End If
    SuccFlag = 0

    Branch_Code = Rs_LTran!ltxn_br_cd
    Tran_Date = IIf(IsNull(Rs_LTran!ltxn_txn_date), #1/1/1900#, Rs_LTran!ltxn_txn_date)
    Tran_Number = IIf(IsNull(Rs_LTran!ltxn_txn_no), 0, Rs_LTran!ltxn_txn_no)
    Effec_Date = IIf(IsNull(Rs_LTran!ltxn_effective_date), Tran_Date, Rs_LTran!ltxn_effective_date)
    Rec_Type = Rs_LTran!ltxn_rec_type
    DbCr_Code = IIf(IsNull(Rs_LTran!ltxn_dr_cd), 0, Rs_LTran!ltxn_dr_cd)
    If DbCr_Code < 1 Then DbCr_Code = 1
    If DbCr_Code > 2 Then DbCr_Code = 2
    
    Tran_Amt = IIf(IsNull(Rs_LTran!ltxn_amount), 0, Rs_LTran!ltxn_amount)
    Tran_Code = IIf(IsNull(Rs_LTran!ltxn_txn_code), "", Rs_LTran!ltxn_txn_code)
    Tran_Code = Left$(UCase(Trim$(Tran_Code) + "   "), 3)
    Narration = IIf(IsNull(Rs_LTran!ltxn_narration), "", Rs_LTran!ltxn_narration)
    Narration = Trim$(Narration)
    
    ' In case of Disbursement (RecType = 1) Total Amount is PRINCIPAL Amount
    If Rec_Type = 1 Then
        If DbCr_Code <= 1 Then
            Principal_amt = Tran_Amt
            CloseBal(1) = CloseBal(1) + Tran_Amt
        End If
        If DbCr_Code >= 2 Then
            Principal_amt = 0 - Tran_Amt
            CloseBal(1) = CloseBal(1) - Tran_Amt
        End If
    End If
    
    ' In case of Interest Debit (RecType = 2) Total Amount is Interest Amount,
    ' but we do not know whether it has to go against Cap.Interest or Uncap.Interest
    If Rec_Type = 2 Then
        If Effec_Date <= Ledger_Last_Month_Close_date And Save_Int_Type = 0 Then
            If DbCr_Code <= 1 Then
                Cap_Interest = Tran_Amt
                CloseBal(2) = CloseBal(2) + Tran_Amt
            End If
            If DbCr_Code >= 2 Then
                Cap_Interest = 0 - Tran_Amt
                CloseBal(2) = CloseBal(2) - Tran_Amt
            End If
        Else
            If DbCr_Code <= 1 Then
                UnCap_Interest = Tran_Amt
                CloseBal(4) = CloseBal(4) + Tran_Amt
            End If
            If DbCr_Code >= 2 Then
                UnCap_Interest = 0 - Tran_Amt
                CloseBal(4) = CloseBal(4) - Tran_Amt
            End If
        End If
    End If
    
    ' In case of Bank Charges Debit (RecType = 3) Total Amount is bank Charges,
    ' but we do not know whether it has to go against Cap.Bank Charges or Uncap.Bank Charges
    If Rec_Type = 3 Then
        If Effec_Date <= Ledger_Last_Month_Close_date And Save_Int_Type = 0 Then
            If DbCr_Code <= 1 Then
                Cap_Bank_Charges = Tran_Amt
                CloseBal(3) = CloseBal(3) + Tran_Amt
            End If
            If DbCr_Code >= 2 Then
                Cap_Bank_Charges = 0 - Tran_Amt
                CloseBal(3) = CloseBal(3) - Tran_Amt
            End If
        Else
            If DbCr_Code <= 1 Then
                Uncap_Bank_Charges = Tran_Amt
                CloseBal(5) = CloseBal(5) + Tran_Amt
            End If
            If DbCr_Code >= 2 Then
                Uncap_Bank_Charges = 0 - Tran_Amt
                CloseBal(5) = CloseBal(5) - Tran_Amt
            End If
        End If
    End If
    
    ' In case of Recoveries Break-up is already available in Table
    If Rec_Type >= 11 Then
        Principal_amt = IIf(IsNull(Rs_LTran!ltxn_princ_amt), 0, Rs_LTran!ltxn_princ_amt)
        Cap_Interest = IIf(IsNull(Rs_LTran!ltxn_cap_interest_rec), 0, Rs_LTran!ltxn_cap_interest_rec)
        Cap_Bank_Charges = IIf(IsNull(Rs_LTran!ltxn_cap_bank_chg), 0, Rs_LTran!ltxn_cap_bank_chg)
        UnCap_Interest = IIf(IsNull(Rs_LTran!ltxn_interest_amt), 0, Rs_LTran!ltxn_interest_amt)
        Uncap_Bank_Charges = IIf(IsNull(Rs_LTran!ltxn_uncap_bank_chg), 0, Rs_LTran!ltxn_uncap_bank_chg)
        If DbCr_Code >= 2 Then
            CloseBal(1) = CloseBal(1) - Principal_amt
            CloseBal(2) = CloseBal(2) - Cap_Interest
            CloseBal(3) = CloseBal(3) - Cap_Bank_Charges
            If Effec_Date <= Ledger_Last_Month_Close_date And Save_Int_Type = 0 Then
                CloseBal(2) = CloseBal(4) - UnCap_Interest
                CloseBal(3) = CloseBal(5) - Uncap_Bank_Charges
            Else
                CloseBal(4) = CloseBal(4) - UnCap_Interest
                CloseBal(5) = CloseBal(5) - Uncap_Bank_Charges
            End If
        End If
        If DbCr_Code <= 1 Then
            CloseBal(1) = CloseBal(1) + Principal_amt
            CloseBal(2) = CloseBal(2) + Cap_Interest
            CloseBal(3) = CloseBal(3) + Cap_Bank_Charges
            If Effec_Date <= Ledger_Last_Month_Close_date And Save_Int_Type = 0 Then
                CloseBal(2) = CloseBal(4) + UnCap_Interest
                CloseBal(3) = CloseBal(5) + Uncap_Bank_Charges
            Else
                CloseBal(4) = CloseBal(4) + UnCap_Interest
                CloseBal(5) = CloseBal(5) + Uncap_Bank_Charges
            End If
        End If
    End If
    
    If Rec_Type = 2 Then
        Int_From_Date = IIf(IsNull(Rs_LTran!ltxn_int_date_from), #1/1/1900#, Rs_LTran!ltxn_int_date_from)
        Int_Till_Date = IIf(IsNull(Rs_LTran!ltxn_int_date_till), #1/1/1900#, Rs_LTran!ltxn_int_date_till)
        Amt_For_Interest = IIf(IsNull(Rs_LTran!ltxn_int_cal_on), #1/1/1900#, Rs_LTran!ltxn_int_cal_on)
    End If
    
    ' Return The Balances to User after This Transaction
    CloseBal(0) = 0
    For I = 1 To 5
        Balance(I) = CloseBal(I)
        CloseBal(0) = CloseBal(0) + CloseBal(I)
    Next I
    Balance(0) = CloseBal(0)
    Rs_LTran.MoveNext
    Exit Sub

Proc_Error:
    Call errHandler("LibClass/BankLoan_Read")
    Exit Sub
End Sub
Public Sub Post_Loan_Disbursements(ByVal BranchCode As Integer, ByVal AcntType As Integer, _
                        ByVal AcntNumber As Long, ByVal Loan_Caqtegory As String, ByVal Debit_Amt As Currency, _
                        ByVal Narration As String, ByVal TranCode As String, _
                        ByVal Txn_BrCode As Integer, ByVal Txn_Effective_Date As Date, _
                        ByVal Saving_Credit_Flag As Byte, ByVal Saving_Commission_Debit_Amt As Currency, ByRef Err_Flag As Byte)

' saving_credit_Flag >= 1 implies this Disbursement Amount is to be credited to his savings account
' Saving Commission Debit Amount is the Bank Charges which are to be Debited to his savings account

Dim Sqlstr As String, Upd_Recset As New ADODB.Recordset
Dim Sav_Acnt_Type As Integer, Sav_Acnt_Number As Long, Sav_CustId As Long
Dim Txn_Time As Integer, Trans_Date As Date
Dim Sav_Acnt_Categ As String, Integer_Flag As Integer, Sav_Narrat As String, Txn_No As Long
Dim Clear_bal As Currency, UnClear_bal As Currency, Block_Amt As Currency

        'This function can be used for Posting of Disbursements, Other Debits as well as
        'Disbursement Reversals and other Debit Reversals
        If (Debit_Amt > 0 And Saving_Commission_Debit_Amt < 0) Or (Debit_Amt < 0 And Saving_Commission_Debit_Amt > 0) Then
            Call MyClass.Display_Message("Invalid Call to Post_Loan_Disbursements.", 1)
            End
        End If
        
        'This function will post debits to Loan A/c excluding Interest Debits for which
        'Separate Function is provided. It will also post the corresponding entries in
        'savings A/c, if Saving_Credit_Flag >=1
        Err_Flag = 0
        
        ' Make sure Valid Saving Account is specified in his Loan Master
        If Saving_Credit_Flag >= 1 Or Saving_Commission_Debit_Amt <> 0 Then Call Get_Savings_Bal_Of_Loan_Customer(BranchCode, AcntType, AcntNumber, Clear_bal, UnClear_bal, Block_Amt, Sav_CustId, Sav_Acnt_Type, Sav_Acnt_Number, Sav_Acnt_Categ)
        
        ' Post This Amout In Capital in Loans
        Call Post_Loan_Debits(BranchCode, AcntType, AcntNumber, Debit_Amt, Narration, TranCode, Txn_BrCode, Txn_Effective_Date, Err_Flag)
        
        Trans_Date = MyClass.Branch_Working_Date
        Txn_Time = Format(Now(), "HHMM")
        
        'we have to post (credit) this amount in Savings Account
        If Saving_Credit_Flag >= 1 Then
            Sav_Narrat = "Loan Disbursement"
            If Debit_Amt < 0 Then Sav_Narrat = "Reversal of Loan Disb."
            Txn_No = 0
            Call Post_Transaction(Txn_BrCode, Trans_Date, Txn_Time, Txn_No, BranchCode, _
                        Sav_CustId, Sav_Acnt_Type, Sav_Acnt_Number, TC_Saving_CR_From_Loan_Disb, _
                        Debit_Amt, 0, Sav_Narrat, Txn_Effective_Date, System_Transactions_User_ID, _
                        0, #1/1/1900#, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, _
                        Sav_Acnt_Categ, , 0, Integer_Flag)
            If Integer_Flag <> 0 Then
                Call MyClass.Display_Message("Unable to Post in Savings A/c.", 1)
                Err_Flag = 3
                Exit Sub
            End If
        End If
        
        ' Also Debit Disbursement Charges (Bank Commission) to Savings Account
        If Saving_Commission_Debit_Amt <> 0 Then
            Sav_Narrat = "Loan Processing Fee"
            If Debit_Amt < 0 Then Sav_Narrat = "Processing Fee Reversal"
            Txn_No = 0
            'Instead of COM as transaction code Post transaction as PRS in Savings
            Call Post_Transaction(Txn_BrCode, Trans_Date, Txn_Time, Txn_No, BranchCode, _
                        Sav_CustId, Sav_Acnt_Type, Sav_Acnt_Number, TC_Loan_Processing_Fees, _
                        0 - Saving_Commission_Debit_Amt, 0, Sav_Narrat, Txn_Effective_Date, System_Transactions_User_ID, _
                        0, #1/1/1900#, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, _
                        Sav_Acnt_Categ, , 0, Integer_Flag)
            
            If Integer_Flag <> 0 Then
                Call MyClass.Display_Message("Unable to Post in Savings A/c.", 1)
                Err_Flag = 4
                Exit Sub
            End If
        End If
        
        Err_Flag = 0
        Exit Sub
End Sub


Public Sub Post_Loan_Insurance_Charges(ByVal BranchCode As Integer, ByVal AcntType As Integer, _
                        ByVal AcntNumber As Long, ByVal Reversal_Flag As Byte, _
                        ByRef Insurance_Amt As Currency, ByRef Err_Flag As Byte)

'Saving Commission Debit Amount is the Bank Charges which are to be Debited to his ssavings account
'This function will be called only once when first disbursement is done
'Premium charges will be applicable on sanctioned amount but not on disburse amount

Dim Sqlstr As String, Recset As New ADODB.Recordset
Dim Sav_Acnt_Type As Integer, Sav_Acnt_Number As Long, Sav_CustId As Long, Insurance_Flag As Byte
Dim Txn_Time As Integer, Trans_Date As Date
Dim Sav_Acnt_Categ As String, Integer_Flag As Integer, Sav_Narrat As String, Txn_No As Long
Dim I As Integer, Insurance_Rate(4) As Currency, Loan_Category As String
Dim Clear_bal As Currency, UnClear_bal As Currency, Block_Amt As Currency
Dim Sanction_Amt As Currency, Loan_Period As Byte, Loan_Int_Rate As Currency, Int_Type As Byte, Int_Rate_Code As Integer, Int_Rate As Currency
Dim Loan_Date As Date, Upto_Date As Date, Adnl_Int_Rate As Currency, Loan_Days As Long, Temp_Amt As Currency
Dim Install_Freq As Byte, First_Install_Date As Date, Num_Install As Integer, Maturity_Date As Date

        'This function can be used for Posting of Insurance Premium in Savings Account
        Insurance_Amt = 0
        Err_Flag = 0
        If Set_Connection(BranchCode) <> 0 Then Exit Sub
        
        ' Make sure Valid Saving Account is specified in his Loan Master
        Call Get_Savings_Bal_Of_Loan_Customer(BranchCode, AcntType, AcntNumber, Clear_bal, UnClear_bal, Block_Amt, Sav_CustId, Sav_Acnt_Type, Sav_Acnt_Number, Sav_Acnt_Categ)
        
        Sqlstr = "select lm_first_disb_date, lm_maturity_date,lm_no_of_installments,lm_install_freq,lm_first_install_date,lm_sanctioned_amt,lm_addnl_int_rate,lm_category from " & _
                 UseDbPrefix & "laccounts where lm_hbr_cd = " & BranchCode & " and lm_type_code = " & AcntType & " and lm_ac_srno = " & AcntNumber & " "
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Post_Loan_Insurance_Charges_2")
        If Recset.EOF = True Then
            Err_Flag = 1
            Exit Sub
        End If
        Loan_Category = Trim$(IIf(IsNull(Recset!lm_category), "", Recset!lm_category))
        Sanction_Amt = IIf(IsNull(Recset!lm_sanctioned_amt), 0, Recset!lm_sanctioned_amt)
        Loan_Date = IIf(IsNull(Recset!lm_first_disb_date), #1/1/1900#, Recset!lm_first_disb_date)
        If Loan_Date = #1/1/1900# Then Loan_Date = MyClass.Branch_Working_Date
        Adnl_Int_Rate = IIf(IsNull(Recset!lm_addnl_int_rate), 0, Recset!lm_addnl_int_rate)
        
        ' Work Out Loan Maturity Date
        Upto_Date = IIf(IsNull(Recset!lm_maturity_date), #1/1/1900#, Recset!lm_maturity_date)
        If Upto_Date >= #1/1/2000# Then
            Maturity_Date = Upto_Date
        Else
            Install_Freq = IIf(IsNull(Recset!lm_install_freq), 0, Recset!lm_install_freq)
            First_Install_Date = IIf(IsNull(Recset!lm_first_install_date), Loan_Date, Recset!lm_first_install_date)
            Num_Install = IIf(IsNull(Recset!lm_no_of_installments), 0, Recset!lm_no_of_installments)
            Upto_Date = Loan_Date
            For I = 1 To Num_Install
                Call Get_Next_Due_Date(Install_Freq, First_Install_Date, Upto_Date, Upto_Date)
            Next I
            Maturity_Date = Upto_Date
        End If
        
        ' Whether Insurance Charges are applicable for This Loan Category ?
        Sqlstr = "select insurance_premium_appl from " & UseDbPrefix & "loan_ac_categ where loan_categ = '" & Loan_Category & "'"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Post_Loan_Insurance_Charges_1")
        Insurance_Flag = 0
        If Recset.EOF = False Then Insurance_Flag = IIf(IsNull(Recset!Insurance_Premium_Appl), 0, Recset!Insurance_Premium_Appl)
        If Insurance_Flag <= 0 Then Exit Sub
        
        ' Work Out Loan Amount, Period & Interest Rate
        ' Find Interest Rate Code
        Call Find_Loan_Int_Rate(Loan_Category, 0, 0, Int_Type, Int_Rate_Code)
        ' Find Actual Interest Rate as on Disbursement Date
        Call Get_Loan_Int_Rate(Int_Rate_Code, Loan_Date, Int_Rate)
        
        ' Add Additional Interest Rate
        Loan_Int_Rate = Int_Rate + Adnl_Int_Rate

Get_Ins_Rate:

        Loan_Period = Year(Maturity_Date) - Year(Loan_Date)
        If Month(Maturity_Date) > Month(Loan_Date) Or (Month(Maturity_Date) = Month(Loan_Date) And Day(Maturity_Date) > Day(Loan_Date)) Then
            Loan_Period = Loan_Period + 1
        End If
        
        Sqlstr = "select * from " & UseDbPrefix & "insurance_rate where irate_term = " & Loan_Period
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Post_Loan_Insurance_Charges_3")
        For I = 1 To 4
            Insurance_Rate(I) = 0
        Next I
        If Not Recset.EOF Then
            Insurance_Rate(1) = IIf(IsNull(Recset!irate_int_rate1), 0, Recset!irate_int_rate1)
            Insurance_Rate(2) = IIf(IsNull(Recset!irate_int_rate2), 0, Recset!irate_int_rate2)
            Insurance_Rate(3) = IIf(IsNull(Recset!irate_int_rate3), 0, Recset!irate_int_rate3)
            Insurance_Rate(4) = IIf(IsNull(Recset!irate_int_rate4), 0, Recset!irate_int_rate4)
        End If
        Insurance_Rate(0) = Insurance_Rate(1)
        If Loan_Int_Rate > 15 Then Insurance_Rate(0) = Insurance_Rate(2)
        If Loan_Int_Rate > 20 Then Insurance_Rate(0) = Insurance_Rate(3)
        If Loan_Int_Rate > 25 Then Insurance_Rate(0) = Insurance_Rate(4)

        ' Work Out Insurance Premium Amount
        Insurance_Amt = 0
        Temp_Amt = Sanction_Amt

Loop_Para:
        
        Insurance_Amt = Insurance_Amt + Insurance_Rate(0)
        Temp_Amt = Temp_Amt - 1000#
        If Temp_Amt > 0 Then GoTo Loop_Para
        
        ' In case of Reversal, we have to Post Negative Amount
        If Reversal_Flag >= 1 Then Insurance_Amt = 0 - Insurance_Amt
        
        ' Debit Loan Insurance Charges to Savings Account
        Trans_Date = MyClass.Branch_Working_Date
        Txn_Time = Format(Now(), "HHMM")
        Sav_Narrat = "Loan Insurance Charges"
        
        If Insurance_Amt <> 0 Then
            Txn_No = 0
            Call Post_Transaction(BranchCode, Trans_Date, Txn_Time, Txn_No, BranchCode, _
                        Sav_CustId, Sav_Acnt_Type, Sav_Acnt_Number, TC_Loan_Insurance_Charges, _
                        0 - Insurance_Amt, 0, Sav_Narrat, Trans_Date, System_Transactions_User_ID, _
                        0, #1/1/1900#, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, _
                        Sav_Acnt_Categ, , 0, Integer_Flag)
            If Integer_Flag <> 0 Then
                Call MyClass.Display_Message("Unable to Post in Savings A/c.", 1)
                Err_Flag = 4
                Exit Sub
            End If
        End If
        Err_Flag = 0
        Exit Sub
End Sub



Private Sub Post_Loan_Debits(ByVal BranchCode As Integer, ByVal AcntType As Integer, _
                        ByVal AcntNumber As Long, ByVal Debit_Amt As Currency, _
                        ByVal Narration As String, ByVal TranCode As String, _
                        ByVal Txn_BrCode As Integer, ByVal Txn_Effective_Date As Date, _
                        ByRef Err_Flag As Byte)

Dim Sqlstr As String, Trans_Date As Date, Last_Debit_date As Date
Dim Existing_Disb_Amt As Currency
Dim Txn_No As Long, Upd_Recset As New ADODB.Recordset
Dim Txn_Time As Integer
Dim DrCr_Code As Byte


        Err_Flag = 0
        If Set_Connection(BranchCode) <> 0 Then Exit Sub
        
        Sqlstr = "select lm_disb_amt,lm_last_dr_date from " & UseDbPrefix & "laccounts "
        Sqlstr = Sqlstr + " where lm_hbr_cd = " & BranchCode & " and lm_type_code = " & AcntType & " " & _
                            " and lm_ac_srno = " & AcntNumber
        Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        Existing_Disb_Amt = 0
        Last_Debit_date = #1/1/1900#
        If Not Upd_Recset.EOF Then
            Last_Debit_date = IIf(IsNull(Upd_Recset!lm_last_dr_date), #1/1/1900#, Upd_Recset!lm_last_dr_date)
            Existing_Disb_Amt = IIf(IsNull(Upd_Recset!lm_disb_amt), 0, Upd_Recset!lm_disb_amt)
        End If
                   
        Call Get_Transaction_No(BranchCode, MyClass.Branch_Working_Date, Txn_No)
        Trans_Date = MyClass.Branch_Working_Date
        Txn_Time = Format(Now(), "HHMM")
        DrCr_Code = 1
        If Debit_Amt < 0 Then DrCr_Code = 2
        Debit_Amt = Abs(Debit_Amt)
        ' Append This Record in Loan Transaction
        Sqlstr = "insert into " & UseDbPrefix & "ltrans(ltxn_br_cd,ltxn_acnt_year,ltxn_txn_no," & _
                "ltxn_txn_date,ltxn_ac_hbr_cd,ltxn_ac_type_code,ltxn_ac_srno,ltxn_txn_time, " & _
                "ltxn_txn_code,ltxn_dr_cd,ltxn_effective_date,ltxn_amount,ltxn_princ_amt," & _
                "ltxn_interest_amt,ltxn_cap_interest_rec,ltxn_narration,ltxn_chq_no,ltxn_bank_drawn," & _
                "ltxn_chq_date,ltxn_operator,ltxn_post_status,ltxn_cross_ac_hbr_cd,ltxn_cross_ac_type_code," & _
                "ltxn_cross_ac_srno,ltxn_rec_type,ltxn_uncap_bank_chg,ltxn_cap_bank_chg," & _
                "ltxn_int_date_from,ltxn_int_date_till,ltxn_int_rate,ltxn_int_cal_on," & _
                "ltxn_src_prg) values(" & Txn_BrCode & "," & Year(Trans_Date) & "," & Txn_No & "," & _
                "'" & Format(Trans_Date, "dd-mmm-yyyy") & "'," & BranchCode & "," & AcntType & "," & AcntNumber & "," & Txn_Time & "," & _
                "'" & TranCode & "'," & DrCr_Code & ",'" & Format(Txn_Effective_Date, "dd-mmm-yyyy") & "'," & Debit_Amt & ",0," & _
                "0,0,'" & Narration & "',0,''," & _
                "'01-JAN-1900','" & Left$(gsUser_Login, 3) & "',0,0,0," & _
                "0,1,0,0,'01-JAN-1900','01-JAN-1900',0,0,0)"
        Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        
        ' Also update this debit amount in Loan Master
        If DrCr_Code = 1 Then
            Sqlstr = "Update " & UseDbPrefix & "laccounts set lm_disb_amt = lm_disb_amt + " & Format(Debit_Amt, "0.00")
            If Txn_Effective_Date > Last_Debit_date And Debit_Amt > 0 Then Sqlstr = Sqlstr + " ,lm_last_dr_date = '" & Format(Txn_Effective_Date, "dd-mmm-yyyy") & "'"
            If Existing_Disb_Amt = 0 And Debit_Amt > 0 Then Sqlstr = Sqlstr + " ,lm_first_disb_date = '" & Format(Txn_Effective_Date, "dd-mmm-yyyy") & "'"
            Sqlstr = Sqlstr + " where lm_hbr_cd = " & BranchCode & " and lm_type_code = " & AcntType & " " & _
                " and lm_ac_srno = " & AcntNumber
            Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, Use_Connection, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
        End If
        Err_Flag = 0
        
        Call Update_Cbk_Flag(0)
        Exit Sub

IO_Error:
    Call MyClass.Display_Message("SQL I/O Error in MyLibClass/Post_Loan_Debits", 1)
    End
End Sub


Public Sub ReSchedule_Loan(ByVal BranchCode As Integer, ByVal AcntType As Integer, ByVal AcntNumber As Long, _
                            ByVal First_Inst_Date As Date, ByVal p_Inst_Freq As Byte, _
                            ByVal p_Resched_Type As Byte, ByVal Instal_Amt As Currency, _
                            ByVal Num_Install As Integer, ByRef Err_Flag As Byte)
                            
' Reschedule_Type = 1 if Number of Instalments Specified (Inst_Amt to be worked Out)
'                 = 2 if Instalment Amount Specified (Number of Inst to be Worked Out)
'                 = 3 if AUTO Rescheduling (then we have to take Reschedule Type from
'                     Loan Master i.e if Number of Instalments > 0 then Query Type 1
'                                     if Latest Installment Amount > 0 then Query Type 2
'                                     if loan cateogry ="TS" then Query type 3)

'                     In case of Auto Rescheduling, Number of Instalments/Instalment Amt
'                     and Installment Frequency will NOT be specified as Parameter
'                     and have to be taken from Loan Master Table.

'                     Further, if number of instalments is there in Loan Master
'                     Then we have to REDUCE already paid instalments from this value
'                     Even The First Instalment date will not Be Sent and we have to compute that

' This function will Reschedule Existing or New Loan
' Loan Category and Additional Rate will be Taken from Loan Master
' Base Interest Code will be taken from Loan Category Master

' It will automatically work out Balances as on Today from existing tables
' Therefore Disbursement date will be assumed as TODAY
' It will update Loan Master for Loan Maturity Date
' It will update Loan Payment Schedule File

Dim Sqlstr As String, MRecset As New ADODB.Recordset, PayRecset As New ADODB.Recordset
Dim Mast_Num_Inst As Integer, Mast_Lastest_Inst_Amt As Currency
Dim Auto_Reschedule As Byte, Reschedule_Type As Byte, Inst_Freq As Byte
Dim Mast_Disb_Amt As Currency, Mast_Loan_Status As Byte
Dim Opening_Balance(5) As Currency, Byte_Flag As Byte
Dim Date_From As Date, Date_Till As Date, Last_Int_Date As Date
Dim Opening_Principal As Currency, Opening_Unrec_Interest As Currency
Dim Base_Code As Integer, Adnl_Rate As Currency
Dim Last_Install_Amt As Currency, Interest_Amt As Currency, I As Integer
Dim Inst_Due_Date As Date, Inst_Amount As Currency, Last_Instal_No As Integer
Dim Prin_Arr(600) As Currency, Int_Arr(600) As Currency
Dim Loan_Category As String * 2, New_Maturity_Date As Date
Dim Query_Type As Byte, Int_Type As Byte, Mast_Disb_Date As Date
Dim Mast_Total_Int_Recovered As Currency
Dim Tot_Interest As Currency, Tot_Ledger_Fee As Currency, Trans_Date As Date
Dim Int_From_Date As Date, Int_Till_Date As Date

    Err_Flag = 0
    Reschedule_Type = p_Resched_Type
    Query_Type = Reschedule_Type
    If Reschedule_Type < 3 Then Query_Type = Reschedule_Type
    Inst_Freq = p_Inst_Freq
    Mast_Total_Int_Recovered = 0

    If Set_Connection(BranchCode) <> 0 Then Exit Sub
    
    If First_Inst_Date <= #1/1/1920# Then
        Err_Flag = 1
        MsgBox "Function Calling Mistake From Program."
        Exit Sub
    End If
    
    ' Read Loan Master
    Sqlstr = "select lm_first_disb_date,lm_ac_status,lm_disb_amt,lm_category,lm_addnl_int_rate,lm_maturity_date," & _
                " lm_no_of_installments,lm_latest_install_amt,lm_install_freq,lm_tot_int_rec from " & UseDbPrefix & "laccounts " & _
                " where lm_hbr_cd = " & BranchCode & _
                " and lm_type_code = " & AcntType & " and lm_ac_srno = " & AcntNumber
    Call Fire_Sql(Sqlstr, MRecset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Reschedule_loan_1")
    
    ' If Loan Master Not Found then Return Error 1
    If MRecset.EOF = True Then
        Err_Flag = 1
        Exit Sub
    End If
    
    Mast_Total_Int_Recovered = IIf(IsNull(MRecset!lm_tot_int_rec), 0#, MRecset!lm_tot_int_rec)
    Mast_Disb_Date = IIf(IsNull(MRecset!lm_first_disb_date), #1/1/1900#, MRecset!lm_first_disb_date)
    If Mast_Disb_Date = #1/1/1900# Then Mast_Disb_Date = MyClass.Branch_Working_Date
    Mast_Loan_Status = IIf(IsNull(MRecset!lm_ac_status), 0, MRecset!lm_ac_status)
    Mast_Disb_Amt = IIf(IsNull(MRecset!lm_disb_amt), 0, MRecset!lm_disb_amt)
    Loan_Category = Trim$(IIf(IsNull(MRecset!lm_category), "", MRecset!lm_category))
    Call Find_Loan_Int_Rate(Loan_Category, 0, 0, Int_Type, Base_Code)
    Adnl_Rate = IIf(IsNull(MRecset!lm_addnl_int_rate), 0, MRecset!lm_addnl_int_rate)
    If Loan_Category = "TS" Or Loan_Category = "TF" Then Query_Type = 3
    
    ' Was Loan Disbursed as yet ?
    If Mast_Disb_Amt <= 0 Then
        Err_Flag = 1
        Exit Sub
    End If
    
    'Is the Loan already closed do nothing
    If Mast_Loan_Status > 0 Then
        Err_Flag = 1
        Exit Sub
    End If
    
    ' Set values in case of AUTO Rescheduling
    Auto_Reschedule = 0
    If Reschedule_Type = 3 Then
        Auto_Reschedule = 1
        Mast_Num_Inst = IIf(IsNull(MRecset!lm_no_of_installments), 0, MRecset!lm_no_of_installments)
        Mast_Lastest_Inst_Amt = IIf(IsNull(MRecset!lm_latest_install_amt), 0, MRecset!lm_latest_install_amt)
        
        ' If not able to determine Reschedule Type from Master, return Error
        If Mast_Num_Inst = 0 And Mast_Lastest_Inst_Amt = 0 Then
            Err_Flag = 2
            Exit Sub
        End If
        
        If Loan_Category <> "TS" And Loan_Category <> "TF" Then
            Query_Type = 2
            If Mast_Num_Inst > 0 Then Query_Type = 1
        End If
        
        ' No AUTO Rescheduling for Flat Interest Loans
'        If Int_Type >= 1 Then Exit Sub
        
        Inst_Freq = IIf(IsNull(MRecset!lm_install_freq), 4, MRecset!lm_install_freq)
        If Inst_Freq = 9 Then Inst_Freq = 4
        If Query_Type = 3 Then Inst_Freq = 4
        If Inst_Freq < 0 Or Inst_Freq > 7 Then
            Err_Flag = 2
            Exit Sub
        End If
        
        If Query_Type = 1 Or Query_Type = 3 Then
            ' Subtract paid Installments in case of AUTO Rescheduling
            Sqlstr = "select count(*) from " & UseDbPrefix & "lrepay where pay_hbr_cd = " & BranchCode & " and " & _
                     " pay_type_code = " & AcntType & " and pay_ac_srno = " & AcntNumber & " "
            Call Fire_Sql(Sqlstr, PayRecset, Sql_Error, Use_Connection, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Reschedule_loan_2")
            Mast_Num_Inst = Mast_Num_Inst - PayRecset.Fields(0).value
            If Mast_Num_Inst <= 0 Then
                Err_Flag = 0
                Exit Sub
            End If
            Num_Install = Mast_Num_Inst
        End If
        If Query_Type = 3 Then
            If PayRecset.Fields(0).value > 0 Then
                If Int_Type >= 1 Then Exit Sub
                If Loan_Category = "TS" Then Exit Sub
            End If
        Else
            If Int_Type >= 1 Then Exit Sub
            If Loan_Category = "TS" Then Exit Sub
        End If
        
        If Query_Type = 2 Or Query_Type = 3 Then Instal_Amt = Mast_Lastest_Inst_Amt
        
        ' Now Find The First Instalment date
        Last_Instal_No = 0
        Sqlstr = "select pay_install_due_date,pay_install_no from " & UseDbPrefix & "lrepay " & _
                 " where pay_hbr_cd = " & BranchCode & " and " & _
                " pay_type_code = " & AcntType & " and pay_ac_srno = " & AcntNumber & " and " & _
                " pay_status = 0 order by pay_install_due_date asc "
        Call Fire_Sql(Sqlstr, PayRecset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Reschedule_loan_3")
        If PayRecset.EOF = False Then
            First_Inst_Date = IIf(IsNull(PayRecset!pay_install_due_date), MyClass.Branch_Working_Date, PayRecset!pay_install_due_date)
            PayRecset.MoveLast
            Last_Instal_No = PayRecset!Pay_Install_No
        End If
    End If

    ' Now AUTO rescheduling conditions have been taken care of There Common Logic Now
    ' Now Compute Principal Amount etc
    Date_From = MyClass.Branch_Working_Date + 1
    Date_Till = Date_From
    Call Bank_Loan_Open(BranchCode, AcntType, AcntNumber, Date_From, Date_Till, Opening_Balance(), Last_Int_Date, Byte_Flag)
    If Byte_Flag <> 0 Then
        Err_Flag = 11
        Exit Sub
    End If

    ' Now Work out Installment Schedule
    Opening_Principal = Opening_Balance(1) + Opening_Balance(2) + Opening_Balance(3)
    Opening_Unrec_Interest = Opening_Balance(4) + Opening_Balance(5)
    If Opening_Principal + Opening_Unrec_Interest <= 0 Then Exit Sub
    
    ' Compute interest upto Yesterday & Add in Unrecovered Interest
    If Last_Int_Date < MyClass.Branch_Working_Date - 1 Then
        ' We have to use routine Debit_Interest to Find Interest Amount INSTEAD of Compute_LOan_Interest.
        ' But we call it with update flag = 0
        Call Debit_Interest(BranchCode, AcntType, AcntNumber, Int_Type, Base_Code, Adnl_Rate, Opening_Principal, _
                                    Last_Int_Date + 1, MyClass.Branch_Working_Date - 1, 0, Interest_Amt)
        Opening_Unrec_Interest = Opening_Unrec_Interest + Interest_Amt
    End If
    
    ' In case of Flat Interest Loans, we have to follow a different Logic if It is NOT First Time scheduling
    If Int_Type >= 1 Then
        ' Presently no rescheduling allowed for Flat Rated Interest
        If Opening_Principal <> Mast_Disb_Amt Or Opening_Unrec_Interest <> 0 Then Exit Sub
        ''''' This is only for Flat Interest Rate Case and User is doing Re-schedule in Same Date
        '''' Without any receiving payment
        If Last_Int_Date = MyClass.Branch_Working_Date - 1 And Mast_Total_Int_Recovered = 0 Then
            GoTo Do_Reschedule_Para
        Else
            Exit Sub
        End If
    Else

Do_Reschedule_Para:

        Call Find_Instalments(AcntType, Opening_Principal, Opening_Unrec_Interest, Int_Type, Base_Code, _
                                Adnl_Rate, Inst_Freq, First_Inst_Date, MyClass.Branch_Working_Date, _
                                Loan_Category, Query_Type, Instal_Amt, Num_Install, _
                                Last_Install_Amt, Byte_Flag, Prin_Arr(), Int_Arr())
        If Byte_Flag <> 0 Then
            If Byte_Flag = 5 Then Call MyClass.Display_Message("Loan Account No. " + CStr(AcntNumber))
            Exit Sub
        End If
    End If
    
    Call Tag_Payment_In_Repay_Schedule(BranchCode, AcntType, AcntNumber)
    
    ' Delete All Unpaid Records from Schedule Table
    Sqlstr = "delete from " & UseDbPrefix & "lrepay where pay_hbr_cd = " & BranchCode & _
                        " and pay_type_code = " & AcntType & " and pay_ac_srno = " & AcntNumber & _
                        " and pay_status = 0 "
    'If Auto_Reschedule >= 1 Then SQLstr = SQLstr + " and pay_install_due_date >= '" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "'"
    Call Fire_Sql(Sqlstr, PayRecset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Reschedule_loan_4")
    
    ' Assign Existing Maturity Date to New Maturity Date; we will change it later
    New_Maturity_Date = IIf(IsNull(MRecset!lm_maturity_date), MyClass.Branch_Working_Date, MRecset!lm_maturity_date)
    
    ' Now Insert Fresh Schedule Records
    If Num_Install > 0 Then
        Last_Instal_No = 0
        Sqlstr = "select max(pay_install_no) from " & UseDbPrefix & "lrepay where pay_hbr_cd = " & BranchCode & _
                " and pay_type_code = " & AcntType & " and pay_ac_srno = " & AcntNumber & " "
        Call Fire_Sql(Sqlstr, PayRecset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Reschedule_loan_5")
        If Not PayRecset.EOF Then Last_Instal_No = IIf(IsNull(PayRecset.Fields(0).value), 0, PayRecset.Fields(0).value)
        For I = 1 To Num_Install
            If I = 1 Then Inst_Due_Date = First_Inst_Date
            If I > 1 Then Call Get_Next_Due_Date(Inst_Freq, First_Inst_Date, Inst_Due_Date, Inst_Due_Date)
            Inst_Amount = Instal_Amt
            If I = Num_Install Then Inst_Amount = Last_Install_Amt
            Last_Instal_No = Last_Instal_No + 1
            ' Now Insert This Record in Payment Schedule File
            Sqlstr = "insert into " + UseDbPrefix + "lrepay (pay_hbr_cd,pay_type_code,pay_ac_srno," & _
                     " pay_install_no,pay_install_due_date,pay_install_amt,pay_principal_amt, " & _
                     " pay_interest_amt,pay_status,pay_reschedule_date,pay_recovery_date, " & _
                     " pay_operator,pay_operator_date,pay_operator_time) values( " & _
                     " " & BranchCode & "," & AcntType & "," & AcntNumber & "," & _
                     " " & Last_Instal_No & ",'" & Format(Inst_Due_Date, "dd-mmm-yyyy") & "'," & Inst_Amount & "," & Prin_Arr(I) & "," & _
                     " " & Int_Arr(I) & ",0,'" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "','" & "01-jan-1900" & "', " & _
                     " '" & Left$(gsUser_Login, 3) & "','" & Format(gdRunDate, "dd-mmm-yyyy") & "'," & Format(Now(), "HHMM") & ")"
            Call Fire_Sql(Sqlstr, PayRecset, Sql_Error, Use_Connection, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Reschedule_loan_6")
            New_Maturity_Date = Inst_Due_Date
        Next I
    End If
    
    'Update Last Reschdule Date and Loan Maturity Date in Loan Master
    Sqlstr = "update " & UseDbPrefix & "laccounts set lm_last_reschedue_date= '" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "',"
    If Query_Type = 1 Then Sqlstr = Sqlstr + "lm_no_of_installments = " & Num_Install & " ,lm_latest_install_amt = " & Instal_Amt & ","
    If Query_Type = 2 Then Sqlstr = Sqlstr + "lm_no_of_installments = 0 ,lm_latest_install_amt = " & Instal_Amt & ","
    If Query_Type = 3 Then Sqlstr = Sqlstr + "lm_no_of_installments = " & Num_Install & " ,lm_latest_install_amt =" & Instal_Amt & ","
    Sqlstr = Sqlstr + "lm_maturity_date= '" & Format(New_Maturity_Date, "dd-mmm-yyyy") & "' "
    Sqlstr = Sqlstr + "where lm_hbr_cd = " & BranchCode & " and lm_type_code = " & AcntType & " and lm_ac_srno = " & AcntNumber
    Call Fire_Sql(Sqlstr, PayRecset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Reschedule_loan_9")
    
    ' In case of Flat Rated Interest Loans, DEBIT Total Interest & Ledger Fee in the very beginning
    If Int_Type >= 1 Then
        Tot_Interest = 0
        Tot_Ledger_Fee = 0
        For I = 1 To Num_Install
            Tot_Interest = Tot_Interest + Int_Arr(I)
            If I <> Num_Install Then Tot_Ledger_Fee = Tot_Ledger_Fee + Instal_Amt - Int_Arr(I) - Prin_Arr(I)
            ' However Last Instalment may be of Different Amount
            If I = Num_Install Then Tot_Ledger_Fee = Tot_Ledger_Fee + Last_Install_Amt - Int_Arr(I) - Prin_Arr(I)
        Next I
        
        ' DEBIT Interest Here
        Int_From_Date = MyClass.Branch_Working_Date
        Int_Till_Date = New_Maturity_Date - 1
        Call Post_Loan_Interest(BranchCode, AcntType, AcntNumber, Tot_Interest, Int_From_Date, Int_Till_Date, Opening_Principal, "Total INT. Debited")
        
       ' DEBIT Ledger Fee
        Call Debit_Loan_Ledger_Fee(BranchCode, AcntType, AcntNumber, Tot_Ledger_Fee)
    End If
    Err_Flag = 0
    Exit Sub
End Sub


Public Sub Saving_GL_Post_New(ByVal Working_Date As Date, ByRef Error_Flag As Byte)
Dim Sqlstr As String, Temp_Narr_Cr As String, Temp_Narr_Dr As String
Dim Select_Clause As String, Branch_Clause As String, Where_Clause As String, Update_Clause As String
Dim Link_Recset As New ADODB.Recordset, TxnType_Recset As New ADODB.Recordset
Dim NSav_Recset As New ADODB.Recordset, Foreign_Recset As New ADODB.Recordset, UpdateTxn_Recset As New ADODB.Recordset

Dim Txn_Amt As Currency, Bnk_Chg As Currency
Dim Txn_Time As String
Dim Link_Type_Code As Integer, Branch_Code As Integer
Dim Link_Txn_Code As String, Link_Ac_Categ As String, Ls_DrCr_Type As String

Dim GL_Sect_Dr As Integer, GL_Type_Code_Dr As Integer, GL_Dept_Dr As Integer
Dim GL_Narration_Dr As String, GL_Txn_Code_Dr As String
Dim GL_Sect_Dr_2 As Integer, GL_Type_Code_Dr_2 As Integer, GL_Dept_Dr_2 As Integer
Dim GL_Narration_Dr_2 As String, GL_Txn_Code_Dr_2 As String

Dim GL_Sect_Cr As Integer, GL_Type_Code_Cr As Integer, GL_Dept_Cr As Integer
Dim GL_Sect_Cr_2 As Integer, GL_Type_Code_Cr_2 As Integer, GL_Dept_Cr_2 As Integer
Dim GL_Narration_Cr As String, GL_Txn_Code_Cr As String
Dim GL_Narration_Cr_2 As String, GL_Txn_Code_Cr_2 As String, GL_Consol_Ind As String, GL_Consol_Ind_2 As String
Dim Err_Msg As String, NewCateg As String, Err_Flag As Byte

Dim Debit_Amount As Currency, Credit_Amount As Currency
Dim TxnSummary_Flag As Byte, BnkSummary_Flag As Byte
Dim TotalTxn_Amount As Currency, TotalBnk_Amount As Currency
Dim Phase As Byte, I As Integer
Dim RsChartOfAcct As New ADODB.Recordset, GlName As String, DbAmt As Currency
Dim CrAmt As Currency, GL_Voucher As String, Update_TableName As String
Dim Nos_Of_Rec As Long, Nos_Of_Rec_Nsav As Long, Nos_Of_Rec_Foreign As Long

Dim Entry_Accode(5000) As String, Entry_DbCr(5000) As Byte
Dim Entry_Amt(5000) As String, Entry_Narr(5000) As String
Dim Num_New_Gl_Entries As Integer
Dim TEntry_AcCode(200) As String, TEntry_DbCr(200) As Byte
Dim TEntry_Amt(200) As Currency, TEntry_Narr(200) As String, TNum_Entries As Integer

Dim Byte_Flag As Byte


    Gl_Num_Codes = 0
    ' Intialize the variables for Total GLDebit & GLCredit
    Total_GlCredit = 0
    Total_GlDebit = 0
    Error_Flag = 0
    
    'Select all Records from Link Table
    Sqlstr = "Select * from " & MyClass.gUnifyDb & "ac_txn_type"
    Call Fire_Sql(Sqlstr, Link_Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(Me, "Saving_Gl_Post_New_1")
    If Link_Recset.EOF Then
        Call MyClass.Display_Message("No Records found in Gl Link Table :- ac_txn_type!", 1)
        Error_Flag = 1
        Exit Sub
    End If
    Num_New_Gl_Entries = 0
    Phase = 1
    Call AKS_BeginTrans(MyClass.Connection_No)
    
Next_Phase:
    
    Do While Not Link_Recset.EOF
        Link_Txn_Code = IIf(IsNull(Link_Recset!Txn_Code), "", Trim$(Link_Recset!Txn_Code))
        
        Sqlstr = "Select * From " & MyClass.gUnifyDb & "txn_type where txn_code = '" & Link_Txn_Code & "'"
        Call Fire_Sql(Sqlstr, TxnType_Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(Me, "Saving_Gl_Post_New_2")
        If TxnType_Recset.EOF = True Then GoTo Next_LinkRecord

        Ls_DrCr_Type = TxnType_Recset!DRCR_IND
        Link_Type_Code = IIf(IsNull(Link_Recset!Type_Code), 0, Link_Recset!Type_Code)
        Link_Ac_Categ = Left$(IIf(IsNull(Link_Recset!Ac_Categ), "N", Link_Recset!Ac_Categ), 1)
        
        'In Phase 1 we will look at Own Branch Slots
        If Phase = 1 Then
            Branch_Clause = " txn_br_code = " & MyClass.Unit_Code
            ' Main Transaction Amount Slots
            GL_Sect_Dr = IIf(IsNull(Link_Recset!dr_sect), 0, Link_Recset!dr_sect)
            GL_Type_Code_Dr = IIf(IsNull(Link_Recset!dr_type_code), 0, Link_Recset!dr_type_code)
            GL_Dept_Dr = IIf(IsNull(Link_Recset!dr_dept), 0, Link_Recset!dr_dept)
            GL_Narration_Dr = Trim$(IIf(IsNull(Link_Recset!dr_narration), "", Link_Recset!dr_narration))
            GL_Txn_Code_Dr = Trim$(IIf(IsNull(Link_Recset!dr_txn_code), "", Link_Recset!dr_txn_code))
            
            GL_Sect_Cr = IIf(IsNull(Link_Recset!Cr_Sect), 0, Link_Recset!Cr_Sect)
            GL_Type_Code_Cr = IIf(IsNull(Link_Recset!cr_type_code), 0, Link_Recset!cr_type_code)
            GL_Dept_Cr = IIf(IsNull(Link_Recset!Cr_Dept), 0, Link_Recset!Cr_Dept)
            GL_Narration_Cr = Trim(IIf(IsNull(Link_Recset!cr_narration), "", Link_Recset!cr_narration))
            GL_Txn_Code_Cr = Trim(IIf(IsNull(Link_Recset!cr_txn_code), "", Link_Recset!cr_txn_code))
            GL_Consol_Ind = IIf(IsNull(Link_Recset!consol_ind), "Y", Link_Recset!consol_ind)
        
            ' Bank Charges Slots
            GL_Sect_Dr_2 = IIf(IsNull(Link_Recset!dr_sect_2), 0, Link_Recset!dr_sect_2)
            GL_Type_Code_Dr_2 = IIf(IsNull(Link_Recset!dr_type_code_2), 0, Link_Recset!dr_type_code_2)
            GL_Dept_Dr_2 = IIf(IsNull(Link_Recset!dr_dept_2), 0, Link_Recset!dr_dept_2)
            GL_Narration_Dr_2 = Trim(IIf(IsNull(Link_Recset!dr_narration_2), "", Link_Recset!dr_narration_2))
            GL_Txn_Code_Dr_2 = Trim(IIf(IsNull(Link_Recset!dr_txn_code_2), "", Link_Recset!dr_txn_code_2))
           
            GL_Sect_Cr_2 = IIf(IsNull(Link_Recset!Cr_Sect_2), 0, Link_Recset!Cr_Sect_2)
            GL_Type_Code_Cr_2 = IIf(IsNull(Link_Recset!cr_type_code_2), 0, Link_Recset!cr_type_code_2)
            GL_Dept_Cr_2 = IIf(IsNull(Link_Recset!Cr_Dept_2), 0, Link_Recset!Cr_Dept_2)
            GL_Narration_Cr_2 = Trim(IIf(IsNull(Link_Recset!cr_narration_2), "", Link_Recset!cr_narration_2))
            GL_Txn_Code_Cr_2 = Trim(IIf(IsNull(Link_Recset!cr_txn_code_2), "", Link_Recset!cr_txn_code_2))
            GL_Consol_Ind_2 = IIf(IsNull(Link_Recset!consol_ind_2), "Y", Link_Recset!consol_ind_2)
        End If
        
        ' In Phase 2 we will look at Other Branch Slots
        If Phase = 2 Then
            Branch_Clause = " txn_br_code <> " & MyClass.Unit_Code
            ' Main Transaction Amount Slots
            GL_Sect_Dr = IIf(IsNull(Link_Recset!dr_sect_hr), 0, Link_Recset!dr_sect_hr)
            GL_Type_Code_Dr = IIf(IsNull(Link_Recset!dr_type_code_hr), 0, Link_Recset!dr_type_code_hr)
            GL_Dept_Dr = IIf(IsNull(Link_Recset!dr_dept_hr), 0, Link_Recset!dr_dept_hr)
            GL_Narration_Dr = Trim(IIf(IsNull(Link_Recset!dr_narration_hr), "", Link_Recset!dr_narration_hr))
            GL_Txn_Code_Dr = Trim(IIf(IsNull(Link_Recset!dr_txn_code_hr), "", Link_Recset!dr_txn_code_hr))
            
            GL_Sect_Cr = IIf(IsNull(Link_Recset!Cr_Sect_hr), 0, Link_Recset!Cr_Sect_hr)
            GL_Type_Code_Cr = IIf(IsNull(Link_Recset!cr_type_code_hr), 0, Link_Recset!cr_type_code_hr)
            GL_Dept_Cr = IIf(IsNull(Link_Recset!Cr_Dept_hr), 0, Link_Recset!Cr_Dept_hr)
            GL_Narration_Cr = Trim(IIf(IsNull(Link_Recset!cr_narration_hr), "", Link_Recset!cr_narration_hr))
            GL_Txn_Code_Cr = Trim(IIf(IsNull(Link_Recset!cr_txn_code_hr), "", Link_Recset!cr_txn_code_hr))
            GL_Consol_Ind = IIf(IsNull(Link_Recset!consol_ind_hr), "Y", Link_Recset!consol_ind_hr)
        
            ' Bank Charges Slots
            GL_Sect_Dr_2 = IIf(IsNull(Link_Recset!dr_sect_2_hr), 0, Link_Recset!dr_sect_2_hr)
            GL_Type_Code_Dr_2 = IIf(IsNull(Link_Recset!dr_type_code_2_hr), 0, Link_Recset!dr_type_code_2_hr)
            GL_Dept_Dr_2 = IIf(IsNull(Link_Recset!dr_dept_2_hr), 0, Link_Recset!dr_dept_2_hr)
            GL_Narration_Dr_2 = Trim(IIf(IsNull(Link_Recset!dr_narration_2_hr), "", Link_Recset!dr_narration_2_hr))
            GL_Txn_Code_Dr_2 = Trim(IIf(IsNull(Link_Recset!dr_txn_code_2_hr), "", Link_Recset!dr_txn_code_2_hr))
            
            GL_Sect_Cr_2 = IIf(IsNull(Link_Recset!Cr_Sect_2_hr), 0, Link_Recset!Cr_Sect_2_hr)
            GL_Type_Code_Cr_2 = IIf(IsNull(Link_Recset!cr_type_code_2_hr), 0, Link_Recset!cr_type_code_2_hr)
            GL_Dept_Cr_2 = IIf(IsNull(Link_Recset!Cr_Dept_2_hr), 0, Link_Recset!Cr_Dept_2_hr)
            GL_Narration_Cr_2 = Trim(IIf(IsNull(Link_Recset!cr_narration_2_hr), "", Link_Recset!cr_narration_2_hr))
            GL_Txn_Code_Cr_2 = Trim(IIf(IsNull(Link_Recset!cr_txn_code_2_hr), "", Link_Recset!cr_txn_code_2_hr))
            GL_Consol_Ind_2 = IIf(IsNull(Link_Recset!consol_ind_2_hr), "Y", Link_Recset!consol_ind_2_hr)
        End If
        
        ' In Phase 3 we will look at Alien Slots
        If Phase = 3 Then
            ' Main Transaction Amount Slots
            GL_Sect_Dr = IIf(IsNull(Link_Recset!dr_sect_al), 0, Link_Recset!dr_sect_al)
            GL_Type_Code_Dr = IIf(IsNull(Link_Recset!dr_type_code_al), 0, Link_Recset!dr_type_code_al)
            GL_Dept_Dr = IIf(IsNull(Link_Recset!dr_dept_al), 0, Link_Recset!dr_dept_al)
            GL_Narration_Dr = Trim(IIf(IsNull(Link_Recset!dr_narration_al), "", Link_Recset!dr_narration_al))
            GL_Txn_Code_Dr = Trim(IIf(IsNull(Link_Recset!dr_txn_code_al), "", Link_Recset!dr_txn_code_al))
            
            GL_Sect_Cr = IIf(IsNull(Link_Recset!Cr_Sect_al), 0, Link_Recset!Cr_Sect_al)
            GL_Type_Code_Cr = IIf(IsNull(Link_Recset!cr_type_code_al), 0, Link_Recset!cr_type_code_al)
            GL_Dept_Cr = IIf(IsNull(Link_Recset!Cr_Dept_al), 0, Link_Recset!Cr_Dept_al)
            GL_Narration_Cr = Trim(IIf(IsNull(Link_Recset!cr_narration_al), "", Link_Recset!cr_narration_al))
            GL_Txn_Code_Cr = Trim(IIf(IsNull(Link_Recset!cr_txn_code_al), "", Link_Recset!cr_txn_code_al))
            GL_Consol_Ind = IIf(IsNull(Link_Recset!consol_ind_al), "Y", Link_Recset!consol_ind_al)
        
            ' Bank Charges Slots
            GL_Sect_Dr_2 = IIf(IsNull(Link_Recset!dr_sect_2_al), 0, Link_Recset!dr_sect_2_al)
            GL_Type_Code_Dr_2 = IIf(IsNull(Link_Recset!dr_type_code_2_al), 0, Link_Recset!dr_type_code_2_al)
            GL_Dept_Dr_2 = IIf(IsNull(Link_Recset!dr_dept_2_al), 0, Link_Recset!dr_dept_2_al)
            GL_Narration_Dr_2 = Trim(IIf(IsNull(Link_Recset!dr_narration_2_al), "", Link_Recset!dr_narration_2_al))
            GL_Txn_Code_Dr_2 = Trim(IIf(IsNull(Link_Recset!dr_txn_code_2_al), "", Link_Recset!dr_txn_code_2_al))
            
            GL_Sect_Cr_2 = IIf(IsNull(Link_Recset!Cr_Sect_2_al), 0, Link_Recset!Cr_Sect_2_al)
            GL_Type_Code_Cr_2 = IIf(IsNull(Link_Recset!cr_type_code_2_al), 0, Link_Recset!cr_type_code_2_al)
            GL_Dept_Cr_2 = IIf(IsNull(Link_Recset!Cr_Dept_2_al), 0, Link_Recset!Cr_Dept_2_al)
            GL_Narration_Cr_2 = Trim(IIf(IsNull(Link_Recset!cr_narration_2_al), "", Link_Recset!cr_narration_2_al))
            GL_Txn_Code_Cr_2 = Trim(IIf(IsNull(Link_Recset!cr_txn_code_2_al), "", Link_Recset!cr_txn_code_2_al))
            GL_Consol_Ind_2 = IIf(IsNull(Link_Recset!consol_ind_2_al), "Y", Link_Recset!consol_ind_2_al)
        End If
        
        If GL_Consol_Ind = "" Then GL_Consol_Ind = "Y"
        TxnSummary_Flag = 0
        If GL_Consol_Ind = "Y" Then TxnSummary_Flag = 1

        If GL_Consol_Ind_2 = "" Then GL_Consol_Ind_2 = "Y"
        BnkSummary_Flag = 0
        If GL_Consol_Ind_2 = "Y" Then BnkSummary_Flag = 1

        ' Check if any one of the posting codes is not defined, skip the type
        If GL_Sect_Dr = 0 Or GL_Type_Code_Dr = 0 Or GL_Dept_Dr = 0 Then GoTo Next_LinkRecord
        If GL_Sect_Cr = 0 Or GL_Type_Code_Cr = 0 Or GL_Dept_Cr = 0 Then GoTo Next_LinkRecord
        If GL_Sect_Dr_2 = 0 Or GL_Type_Code_Dr_2 = 0 Or GL_Dept_Dr_2 = 0 Then GoTo Next_LinkRecord
        If GL_Sect_Cr_2 = 0 Or GL_Type_Code_Cr_2 = 0 Or GL_Dept_Cr_2 = 0 Then GoTo Next_LinkRecord

        'Select all Unposted Transactions; Read Ac_category also from Acct. Master
        TotalTxn_Amount = 0
        TotalBnk_Amount = 0
        
        Select_Clause = " select nsav_txn.txn_hbr_cd,nsav_txn.cust_idno,nsav_txn.type_code,nsav_txn.ac_srno,txn_amt, " & _
                        " txn_bnk_chg,card_txn_flag,txn_br_code,txn_code,txn_date, txn_no " & _
                        " From  " & MyClass.gUnifyDb & "nsav_txn," & MyClass.gUnifyDb & "nsav_account " & _
                        " where "
        Where_Clause = " And post_ind = 0 " & _
                    " and nsav_txn.type_code = " & Link_Type_Code & _
                    " and nsav_txn.txn_code = '" & Link_Txn_Code & "'" & _
                    " and nsav_account.ac_categ = '" & Link_Ac_Categ & "'" & _
                    " and nsav_txn.txn_hbr_cd = nsav_account.br_code" & _
                    " And nsav_txn.cust_idno  = nsav_account.cust_idno" & _
                    " And nsav_txn.type_code  = nsav_account.type_code" & _
                    " And nsav_txn.ac_srno    = nsav_account.ac_srno" & _
                    " And txn_delete_flag = 0"
        Sqlstr = Select_Clause & Branch_Clause & Where_Clause
        If Phase = 3 Then
            Sqlstr = " SELECT txn_hbr_cd,cust_idno,type_code,ac_srno,txn_amt, " & _
                    "txn_bnk_chg,ac_categ,card_txn_flag,txn_br_code,txn_code, " & _
                     "txn_date, txn_no From " & MyClass.gUnifyDb & "foreign_sav_txn " & _
                     " Where type_code = " & Link_Type_Code & " and txn_code = '" & Link_Txn_Code & "'" & _
                     " and ac_categ = '" & Link_Ac_Categ & "' and post_ind=0 And txn_delete_flag=0"
        End If
        Call Fire_Sql(Sqlstr, NSav_Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        
        ' Post each of these unposted Transactions
        Do While Not NSav_Recset.EOF
             Txn_Amt = NSav_Recset!Txn_Amt
             Bnk_Chg = NSav_Recset!Txn_Bnk_Chg
             GL_Voucher = ""
             If NSav_Recset!card_txn_flag >= 1 Then GL_Voucher = "CARD"
             Txn_Time = Format(Now(), "HH:MM")
            
             If TxnSummary_Flag = 1 Then TotalTxn_Amount = TotalTxn_Amount + Txn_Amt
             If BnkSummary_Flag = 1 Then TotalBnk_Amount = TotalBnk_Amount + Bnk_Chg
             
             Debit_Amount = Txn_Amt
             Credit_Amount = 0 - Txn_Amt
             ' If Transaction code is of Credit Type then
             If Ls_DrCr_Type = "CR" Then
                Credit_Amount = Txn_Amt
                Debit_Amount = 0 - Txn_Amt
             End If
             
             NewCateg = Link_Ac_Categ & "1"
             If TxnSummary_Flag <> 1 And Debit_Amount <> 0 Then
                If Trim$(GL_Narration_Dr) = "" Then GL_Narration_Dr = "POST - " & CStr(Link_Type_Code) & "/" & Link_Txn_Code & "/" & NewCateg
                If Trim$(GL_Narration_Cr) = "" Then GL_Narration_Dr = "POST - " & CStr(Link_Type_Code) & "/" & Link_Txn_Code & "/" & NewCateg
                ''added by manoj in kenya to change the gl narration in case of Card Txn
                Temp_Narr_Dr = GL_Narration_Dr
                Temp_Narr_Cr = GL_Narration_Cr
                If GL_Voucher = "CARD" Then
                    Temp_Narr_Dr = NSav_Recset!Txn_Code & " " & Format(NSav_Recset.Fields(0), "000") & "-" & Format(NSav_Recset.Fields(1), "000000") & "-" & Format(NSav_Recset.Fields(2), "000") & "-" & _
                                        Format(NSav_Recset.Fields(3), "00000") & " AT " & Format(NSav_Recset!Txn_Br_Code, "000")
                    Temp_Narr_Cr = Temp_Narr_Dr
                End If
                If Trim$(GL_Txn_Code_Dr) = "" Then GL_Txn_Code_Dr = "JV"
                If Trim$(GL_Txn_Code_Cr) = "" Then GL_Txn_Code_Cr = "JV"
                
                Call Insert_GL_New(Working_Date, Txn_Time, GL_Txn_Code_Dr, Temp_Narr_Dr, GL_Sect_Dr, _
                                    GL_Type_Code_Dr, GL_Dept_Dr, Debit_Amount, "DR", _
                                    Link_Type_Code, Link_Txn_Code, NewCateg, GL_Voucher, Err_Flag)
                If Err_Flag <> 0 Then GoTo IO_Error
                
                Num_New_Gl_Entries = Num_New_Gl_Entries + 1
                Entry_Accode(Num_New_Gl_Entries) = "G" + Right$("000" + CStr(GL_Type_Code_Dr), 3) + Right$("000" + CStr(GL_Dept_Dr), 3) + Right$("000" + CStr(GL_Sect_Dr), 3)
                Entry_Amt(Num_New_Gl_Entries) = Abs(Debit_Amount)
                Entry_DbCr(Num_New_Gl_Entries) = 2
                Entry_Narr(Num_New_Gl_Entries) = Temp_Narr_Dr
                
                Call Insert_GL_New(Working_Date, Txn_Time, GL_Txn_Code_Cr, Temp_Narr_Cr, GL_Sect_Cr, _
                                    GL_Type_Code_Cr, GL_Dept_Cr, Credit_Amount, "CR", _
                                    Link_Type_Code, Link_Txn_Code, NewCateg, GL_Voucher, Err_Flag)
                If Err_Flag <> 0 Then GoTo IO_Error
                
                Num_New_Gl_Entries = Num_New_Gl_Entries + 1
                Entry_Accode(Num_New_Gl_Entries) = "G" + Right$("000" + CStr(GL_Type_Code_Cr), 3) + Right$("000" + CStr(GL_Dept_Cr), 3) + Right$("000" + CStr(GL_Sect_Cr), 3)
                Entry_Amt(Num_New_Gl_Entries) = Abs(Credit_Amount)
                Entry_DbCr(Num_New_Gl_Entries) = 1
                Entry_Narr(Num_New_Gl_Entries) = Temp_Narr_Cr
             End If
        
             Debit_Amount = Bnk_Chg
             Credit_Amount = 0 - Bnk_Chg
             If BnkSummary_Flag <> 1 And Debit_Amount <> 0 Then
                If Trim$(GL_Narration_Dr_2) = "" Then GL_Narration_Dr = "Post - " & CStr(Link_Type_Code) & "/" & Link_Txn_Code & "/" & NewCateg
                If Trim$(GL_Narration_Cr_2) = "" Then GL_Narration_Dr = "Post - " & CStr(Link_Type_Code) & "/" & Link_Txn_Code & "/" & NewCateg
                If Trim$(GL_Txn_Code_Dr_2) = "" Then GL_Txn_Code_Dr_2 = "JV"
                If Trim$(GL_Txn_Code_Cr_2) = "" Then GL_Txn_Code_Cr_2 = "JV"
                Temp_Narr_Dr = GL_Narration_Dr_2
                Temp_Narr_Cr = GL_Narration_Cr_2
                If GL_Voucher = "CARD" Then
                    Temp_Narr_Dr = NSav_Recset!Txn_Code & " " & Format(NSav_Recset.Fields(0), "000") & "-" & Format(NSav_Recset.Fields(1), "000000") & "-" & Format(NSav_Recset.Fields(2), "000") & "-" & _
                                        Format(NSav_Recset.Fields(3), "00000") & " AT " & Format(NSav_Recset!Txn_Br_Code, "000")
                    Temp_Narr_Cr = Temp_Narr_Dr
                End If
                Call Insert_GL_New(Working_Date, Txn_Time, GL_Txn_Code_Dr_2, Temp_Narr_Dr, GL_Sect_Dr_2, _
                                    GL_Type_Code_Dr_2, GL_Dept_Dr_2, Debit_Amount, "DR", _
                                    Link_Type_Code, Link_Txn_Code, NewCateg, GL_Voucher, Err_Flag)
                If Err_Flag <> 0 Then GoTo IO_Error
                
                Num_New_Gl_Entries = Num_New_Gl_Entries + 1
                Entry_Accode(Num_New_Gl_Entries) = "G" + Right$("000" + CStr(GL_Type_Code_Dr_2), 3) + Right$("000" + CStr(GL_Dept_Dr_2), 3) + Right$("000" + CStr(GL_Sect_Dr_2), 3)
                Entry_Amt(Num_New_Gl_Entries) = Abs(Debit_Amount)
                Entry_DbCr(Num_New_Gl_Entries) = 2
                Entry_Narr(Num_New_Gl_Entries) = Temp_Narr_Dr
                
                Call Insert_GL_New(Working_Date, Txn_Time, GL_Txn_Code_Cr_2, Temp_Narr_Cr, GL_Sect_Cr_2, _
                                    GL_Type_Code_Cr_2, GL_Dept_Cr_2, Credit_Amount, "CR", _
                                    Link_Type_Code, Link_Txn_Code, NewCateg, GL_Voucher, Err_Flag)
                If Err_Flag <> 0 Then GoTo IO_Error
                Num_New_Gl_Entries = Num_New_Gl_Entries + 1
                Entry_Accode(Num_New_Gl_Entries) = "G" + Right$("000" + CStr(GL_Type_Code_Cr_2), 3) + Right$("000" + CStr(GL_Dept_Cr_2), 3) + Right$("000" + CStr(GL_Sect_Cr_2), 3)
                Entry_Amt(Num_New_Gl_Entries) = Abs(Credit_Amount)
                Entry_DbCr(Num_New_Gl_Entries) = 1
                Entry_Narr(Num_New_Gl_Entries) = Temp_Narr_Cr
             End If
            NSav_Recset.MoveNext
        Loop
        
        GL_Voucher = ""
        ' End of This Record_Set Now Post Summaries if applicable
         Debit_Amount = TotalTxn_Amount
         Credit_Amount = 0 - TotalTxn_Amount
         ' If Transaction code is of Credit Type then
         If Ls_DrCr_Type = "CR" Then
            Credit_Amount = TotalTxn_Amount
            Debit_Amount = 0 - TotalTxn_Amount
         End If
         
         If TxnSummary_Flag = 1 And Debit_Amount <> 0 Then
            If Trim$(GL_Narration_Dr) = "" Then GL_Narration_Dr = "SUMMARY - " & CStr(Link_Type_Code) & "/" & Link_Txn_Code & "/" & NewCateg
            If Trim$(GL_Narration_Cr) = "" Then GL_Narration_Dr = "SUMMARY - " & CStr(Link_Type_Code) & "/" & Link_Txn_Code & "/" & NewCateg
            If Trim$(GL_Txn_Code_Dr) = "" Then GL_Txn_Code_Dr = "JV"
            If Trim$(GL_Txn_Code_Cr) = "" Then GL_Txn_Code_Cr = "JV"
            Call Insert_GL_New(Working_Date, Txn_Time, GL_Txn_Code_Dr, GL_Narration_Dr, GL_Sect_Dr, _
                                GL_Type_Code_Dr, GL_Dept_Dr, Debit_Amount, "DR", _
                                Link_Type_Code, Link_Txn_Code, NewCateg, GL_Voucher, Err_Flag)
            If Err_Flag <> 0 Then GoTo IO_Error
                
            Num_New_Gl_Entries = Num_New_Gl_Entries + 1
            Entry_Accode(Num_New_Gl_Entries) = "G" + Right$("000" + CStr(GL_Type_Code_Dr), 3) + Right$("000" + CStr(GL_Dept_Dr), 3) + Right$("000" + CStr(GL_Sect_Dr), 3)
            Entry_Amt(Num_New_Gl_Entries) = Abs(Debit_Amount)
            Entry_DbCr(Num_New_Gl_Entries) = 2
            Entry_Narr(Num_New_Gl_Entries) = GL_Narration_Dr
            
            Call Insert_GL_New(Working_Date, Txn_Time, GL_Txn_Code_Cr, GL_Narration_Cr, GL_Sect_Cr, _
                                GL_Type_Code_Cr, GL_Dept_Cr, Credit_Amount, "CR", _
                                Link_Type_Code, Link_Txn_Code, NewCateg, GL_Voucher, Err_Flag)
            If Err_Flag <> 0 Then GoTo IO_Error
            
            Num_New_Gl_Entries = Num_New_Gl_Entries + 1
            Entry_Accode(Num_New_Gl_Entries) = "G" + Right$("000" + CStr(GL_Type_Code_Cr), 3) + Right$("000" + CStr(GL_Dept_Cr), 3) + Right$("000" + CStr(GL_Sect_Cr), 3)
            Entry_Amt(Num_New_Gl_Entries) = Abs(Credit_Amount)
            Entry_DbCr(Num_New_Gl_Entries) = 1
            Entry_Narr(Num_New_Gl_Entries) = GL_Narration_Cr
         End If
    
         Debit_Amount = TotalBnk_Amount
         Credit_Amount = 0 - TotalBnk_Amount
         If BnkSummary_Flag = 1 And Debit_Amount <> 0 Then
            If Trim$(GL_Narration_Dr_2) = "" Then GL_Narration_Dr = "SUMMARY - " & CStr(Link_Type_Code) & "/" & Link_Txn_Code & "/" & NewCateg
            If Trim$(GL_Narration_Cr_2) = "" Then GL_Narration_Dr = "SUMMARY - " & CStr(Link_Type_Code) & "/" & Link_Txn_Code & "/" & NewCateg
            If Trim$(GL_Txn_Code_Dr_2) = "" Then GL_Txn_Code_Dr_2 = "JV"
            If Trim$(GL_Txn_Code_Cr_2) = "" Then GL_Txn_Code_Cr_2 = "JV"
            Call Insert_GL_New(Working_Date, Txn_Time, GL_Txn_Code_Dr_2, GL_Narration_Dr_2, GL_Sect_Dr_2, _
                                GL_Type_Code_Dr_2, GL_Dept_Dr_2, Debit_Amount, "DR", _
                                Link_Type_Code, Link_Txn_Code, NewCateg, GL_Voucher, Err_Flag)
            If Err_Flag <> 0 Then GoTo IO_Error
            Num_New_Gl_Entries = Num_New_Gl_Entries + 1
            Entry_Accode(Num_New_Gl_Entries) = "G" + Right$("000" + CStr(GL_Type_Code_Dr_2), 3) + Right$("000" + CStr(GL_Dept_Dr_2), 3) + Right$("000" + CStr(GL_Sect_Dr_2), 3)
            Entry_Amt(Num_New_Gl_Entries) = Abs(Debit_Amount)
            Entry_DbCr(Num_New_Gl_Entries) = 2
            Entry_Narr(Num_New_Gl_Entries) = GL_Narration_Dr_2
            
            Call Insert_GL_New(Working_Date, Txn_Time, GL_Txn_Code_Cr_2, GL_Narration_Cr_2, GL_Sect_Cr_2, _
                                GL_Type_Code_Cr_2, GL_Dept_Cr_2, Credit_Amount, "CR", _
                                Link_Type_Code, Link_Txn_Code, NewCateg, GL_Voucher, Err_Flag)
            If Err_Flag <> 0 Then GoTo IO_Error
            Num_New_Gl_Entries = Num_New_Gl_Entries + 1
            Entry_Accode(Num_New_Gl_Entries) = "G" + Right$("000" + CStr(GL_Type_Code_Cr_2), 3) + Right$("000" + CStr(GL_Dept_Cr_2), 3) + Right$("000" + CStr(GL_Sect_Cr_2), 3)
            Entry_Amt(Num_New_Gl_Entries) = Abs(Credit_Amount)
            Entry_DbCr(Num_New_Gl_Entries) = 1
            Entry_Narr(Num_New_Gl_Entries) = GL_Narration_Cr_2
       End If
            
        'Update the posting status flag to 1 in Nsav_txn in all the above records
        Update_Clause = " Update " & MyClass.gUnifyDb & "nsav_txn set post_ind=1, " & _
                        " glpost_date = '" & Format(Working_Date, "dd-mmm-yyyy") & "'" & _
                        " where " & Branch_Clause & _
                        " and nsav_txn.type_code = " & Link_Type_Code & _
                        " and nsav_txn.txn_code = '" & Link_Txn_Code & "' And post_ind   = 0 " & _
                        " And txn_delete_flag = 0" & _
                        " and exists (select 1 from " & MyClass.gUnifyDb & "nsav_account " & _
                        " where nsav_txn.txn_hbr_cd = nsav_account.br_code" & _
                       " And nsav_txn.cust_idno  = nsav_account.cust_idno" & _
                       " And nsav_txn.type_code  = nsav_account.type_code" & _
                       " And nsav_txn.ac_srno    = nsav_account.ac_srno" & _
                       " and nsav_account.ac_categ = '" & Link_Ac_Categ & "')"
        Sqlstr = Update_Clause
        If Phase = 3 Then
            Sqlstr = " Update " & MyClass.gUnifyDb & "foreign_sav_txn set post_ind=1, " & _
                         " glpost_date = '" & Format(Working_Date, "dd-mmm-yyyy") & "'" & _
                         " Where type_code = " & Link_Type_Code & " and txn_code = '" & Link_Txn_Code & "' and " & _
                         " ac_categ = '" & Link_Ac_Categ & "' and post_ind= 0 and txn_delete_flag = 0"
        End If
        Call Fire_Sql(Sqlstr, UpdateTxn_Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error

Next_LinkRecord:
    Link_Recset.MoveNext
Loop

    Phase = Phase + 1
    If Phase >= 4 Then GoTo Job_Over
    Link_Recset.MoveFirst
    GoTo Next_Phase

Job_Over:
    
    'If Summary Transaction has to be posted then commit trans
    Call AKS_EndTrans(MyClass.Connection_No)
    If Num_New_Gl_Entries > 0 Then
        Call Close_DB_Connection(MyClass.Connection_No)
        Call MyClass.ReOpen_Main_Connection(MyClass.Connection_No, Byte_Flag)
    End If
    Call Open_Info_WIndow("Posting in New GL For Savings")
    TNum_Entries = 0
    If Num_New_Gl_Entries > 0 Then
        For I = 1 To Num_New_Gl_Entries
            TNum_Entries = TNum_Entries + 1
            If TNum_Entries > 200 Then
                TNum_Entries = 200
                GoSub Perform_New_Gl_Posting
                TNum_Entries = 1
            End If
            TEntry_AcCode(TNum_Entries) = Entry_Accode(I)
            TEntry_Amt(TNum_Entries) = Entry_Amt(I)
            TEntry_DbCr(TNum_Entries) = Entry_DbCr(I)
            TEntry_Narr(TNum_Entries) = Entry_Narr(I)
        Next I
        If TNum_Entries > 1 Then
            GoSub Perform_New_Gl_Posting
        End If
    End If
    Call Close_Info_Window
    
    ' Check if Total Debit & Credit are tallying
    If Total_GlCredit <> 0 - Total_GlDebit Then Call MyClass.Display_Message(" Total Debit & Total Credit posted in Gl Transactions are NOT Tallying!" & vbCrLf & _
               " Please contact Amity Software / IT Manager ", 1)
    
    '======================================================================================
    '''' Check if any Transactions have been left unposted
    Sqlstr = " Select count(*),txn_code,nsav_txn.type_code,ac_categ " & _
                " from " & MyClass.gUnifyDb & "nsav_txn, " & MyClass.gUnifyDb & "nsav_account " & _
                 " where post_ind = 0 And txn_delete_flag = 0" & _
                 " and nsav_txn.txn_hbr_cd = nsav_account.br_code" & _
                " And nsav_txn.cust_idno  = nsav_account.cust_idno" & _
                " And nsav_txn.type_code  = nsav_account.type_code" & _
                " And nsav_txn.ac_srno    = nsav_account.ac_srno" & _
                " group by txn_code,nsav_txn.type_code,ac_categ "
    Call Fire_Sql(Sqlstr, NSav_Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    
    Nos_Of_Rec = 0
    Call file_create("unpostgl.dat", 0)
    Do While Not NSav_Recset.EOF
        Call put_data(MyClass.Unit_Code, 2, 0, 3, 0, 1)
        Call put_data(MyClass.gs_BranchName, 0, 0, 15, 0, 1)
        Call put_data(CStr(Working_Date), 0, 0, 10, 0, 1)
        I = 0
        Call put_data(I, 1, 0, 1, 0, 1)
        Nos_Of_Rec = NSav_Recset.Fields(0)
        Call put_data(Nos_Of_Rec, 3, 0, 6, 0, 1)
        Nos_Of_Rec_Nsav = Nos_Of_Rec_Nsav + Nos_Of_Rec
        Sqlstr = NSav_Recset!Txn_Code
        Call put_data(Sqlstr, 0, 0, 3, 0, 1)
        I = NSav_Recset.Fields(2)
        Call put_data(I, 2, 0, 3, 0, 1)
        Sqlstr = NSav_Recset!Ac_Categ
        Call put_data(Sqlstr, 0, 0, 1, 0, 0)
        Call Flush
        NSav_Recset.MoveNext
    Loop
    If Nos_Of_Rec_Nsav > 0 Then Call MyClass.Display_Message(" Some Transactions have NOT Been Posted for Home Customers as Their Posting Codes Have NOT been defined in The Link Table " & vbCrLf & _
                " Please check & define the Posting Codes. Then re-run this option " & vbCrLf & _
                " No. of Transactions NOT posted = " & CStr(Nos_Of_Rec_Nsav), 1)
    
    ' Check if any Transactions have been left unposted
    Sqlstr = " Select count(*),txn_code,type_code,ac_categ from " & MyClass.gUnifyDb & "foreign_sav_txn " & _
                 " where post_ind = 0 And txn_delete_flag = 0" & _
                 " group by txn_code,type_code,ac_categ "
    Call Fire_Sql(Sqlstr, NSav_Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    Nos_Of_Rec = 0
    Do While Not NSav_Recset.EOF
        Call put_data(MyClass.Unit_Code, 2, 0, 3, 0, 1)
        Call put_data(MyClass.gs_BranchName, 0, 0, 15, 0, 1)
        Call put_data(CStr(Working_Date), 0, 0, 10, 0, 1)
        I = 1
        Call put_data(I, 1, 0, 1, 0, 1)
        Nos_Of_Rec = NSav_Recset.Fields(0)
        Call put_data(Nos_Of_Rec, 3, 0, 6, 0, 1)
        Nos_Of_Rec_Foreign = Nos_Of_Rec_Foreign + Nos_Of_Rec
        Sqlstr = NSav_Recset!Txn_Code
        Call put_data(Sqlstr, 0, 0, 3, 0, 1)
        I = NSav_Recset!Type_Code
        Call put_data(I, 2, 0, 3, 0, 1)
        Sqlstr = NSav_Recset!Ac_Categ
        Call put_data(Sqlstr, 0, 0, 1, 0, 0)
        Call Flush
        NSav_Recset.MoveNext
    Loop
    Call file_close
    If Nos_Of_Rec_Foreign > 0 Then Call MyClass.Display_Message(" Some Transactions have NOT Been Posted for Alien Customers as Their Posting Codes Have NOT been defined in the Link Table " & vbCrLf & _
                " Please check & define the Posting Codes. Then re-run this option " & vbCrLf & _
                " No. of Transactions NOT posted = " & CStr(Nos_Of_Rec_Foreign), 1)
    If (Nos_Of_Rec_Foreign + Nos_Of_Rec_Nsav) > 0 Then
        Error_Flag = 99
        Sqlstr = "prtmfr.bat unpostgl unpostgl unpostgl"
        Sql_Error = Xecute(Sqlstr)
        If Sql_Error = 0 Then
             Call PutInFile("unpostgl.txt")
        End If
    End If
        
    'Printing GL Posting report 17/04/2003
    
    Call file_create("glpost.dat", 0)
    For I = 1 To Gl_Num_Codes
        Call put_data(MyClass.Unit_Code, 2, 0, 3, 0, 1)
        Call put_data(MyClass.gs_BranchName, 0, 0, 15, 0, 1)
        Call put_data(CStr(Working_Date), 0, 0, 10, 0, 1)
        Call put_data(Gl_Type_Arr(I), 2, 0, 3, 0, 1)
        Call put_data(Gl_Sect_Arr(I), 2, 0, 3, 0, 1)
        Call put_data(Gl_Dept_Arr(I), 2, 0, 3, 0, 1)
        Sqlstr = "select gl_name from " & MyClass.gUnifyDb & "chart_of_acct" & _
                " where gl_type_code = " & Gl_Type_Arr(I) & " and gl_sect = " & Gl_Sect_Arr(I) & " and gl_dept = " & Gl_Dept_Arr(I)
        Call Fire_Sql(Sqlstr, RsChartOfAcct, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        GlName = ""
        If RsChartOfAcct.EOF = False Then GlName = Trim$(RsChartOfAcct!GL_Name)
        Call put_data(GlName, 0, 0, 40, 0, 1)
        Txn_Amt = Gl_CodeAmt_Arr(I)
        If Txn_Amt < 0 Then
            DbAmt = Txn_Amt
            CrAmt = 0
        Else
            CrAmt = Txn_Amt
            DbAmt = 0
        End If
        Call put_data(DbAmt, 4, 0, 12, 0, 1)
        Call put_data(CrAmt, 4, 0, 12, 0, 0)
        Call Flush
    Next I
    Call file_close
    Sqlstr = "prtmfr.bat glpost glpost glpost"
    Sql_Error = Xecute(Sqlstr)
    If Sql_Error <> 0 Then Exit Sub
    Call PutInFile("glpost.txt")
    Exit Sub
IO_Error:
    Call AKS_RollBackTrans(MyClass.Connection_No)
    Call MyClass.Display_Message("SQL I/O Error in Saving_GL_Post_New", 1)
    Error_Flag = 1
    Exit Sub
    
Perform_New_Gl_Posting:
    Call Post_FFBSGL(TNum_Entries, 60, 1, TEntry_AcCode(), TEntry_DbCr(), TEntry_Amt(), TEntry_Narr())
    Return
End Sub

Public Sub Insert_GL_New(ByVal Txn_Date As Date, ByVal Txn_Time As String, ByVal Txn_Code As String, ByVal Narration As String, _
                        ByVal Gl_Sect As Integer, ByVal Gl_Type_Code As Integer, ByVal GL_Dept As Integer, ByVal Txn_Amt As Currency, _
                        ByVal DRCR_IND As String, ByVal Acnt_Type As Integer, ByVal Acnt_Txn_Code As String, ByVal Acnt_Categ As String, _
                        ByVal GL_Voucher As String, ByRef Err_Flag As Byte)
'Description : This function inserts record into gl_txn and updates gen_ledger
                      
Dim Recset As New ADODB.Recordset, Per_Id As Byte, Per_Year As Integer
Dim GL_TxnNo As Long, tRecSet As New ADODB.Recordset
Dim I As Integer

    Err_Flag = 0
    Per_Id = Month(Txn_Date)
    Per_Year = Year(Txn_Date)
    
    
Read_GL_Txn:
    
    If Gl_Num_Codes = 0 Then GoTo Insert_New_Code
    For I = 1 To Gl_Num_Codes
        If Gl_Type_Arr(I) = Gl_Type_Code And Gl_Sect_Arr(I) = Gl_Sect And Gl_Dept_Arr(I) = GL_Dept Then
            Gl_CodeAmt_Arr(I) = Gl_CodeAmt_Arr(I) + Txn_Amt
            GoTo Summary_Over
        End If
    Next I

Insert_New_Code:
    If Gl_Num_Codes >= 200 Then
       Call MyClass.Display_Message("Number of GL code is exceeding 200, so that your GL Summary Report will not tally, please contact Amity Software ", 1)
       GoTo Summary_Over
    End If
    Gl_Num_Codes = Gl_Num_Codes + 1
    Gl_Type_Arr(Gl_Num_Codes) = Gl_Type_Code
    Gl_Sect_Arr(Gl_Num_Codes) = Gl_Sect
    Gl_Dept_Arr(Gl_Num_Codes) = GL_Dept
    Gl_CodeAmt_Arr(Gl_Num_Codes) = 0
    Gl_CodeAmt_Arr(Gl_Num_Codes) = Gl_CodeAmt_Arr(Gl_Num_Codes) + Txn_Amt
Summary_Over:
    
    If Txn_Amt < 0 Then Total_GlDebit = Total_GlDebit + Txn_Amt
    If Txn_Amt > 0 Then Total_GlCredit = Total_GlCredit + Txn_Amt
    Exit Sub
    
IO_Error:
    Call MyClass.Display_Message("SQL I/O Error in Insert_GL_New", 1)
    Err_Flag = 1
    Exit Sub
End Sub

Public Sub Post_GL_New(ByVal Txn_Date As Date, ByVal Txn_Time As String, ByVal Txn_Code As String, ByVal Narration As String, _
                        ByVal Gl_Sect As Integer, ByVal Gl_Type_Code As Integer, ByVal GL_Dept As Integer, ByVal Txn_Amt As Currency, _
                        ByVal DRCR_IND As String, ByVal Acnt_Type As Integer, ByVal Acnt_Txn_Code As String, ByVal Acnt_Categ As String, _
                        ByVal GL_Voucher As String, ByRef Err_Flag As Byte)
'Description : This function inserts record into gl_txn and updates gen_ledger
                      
Dim Sqlstr As String, Recset As New ADODB.Recordset, Per_Id As Byte, Per_Year As Integer
Dim GL_TxnNo As Long, tRecSet As New ADODB.Recordset
Dim I As Integer

    Err_Flag = 0
    Per_Id = Month(Txn_Date)
    Per_Year = Year(Txn_Date)
    
    
    'select if the gl code exist in the gen ledger table or not. if it does not then INSERT it
    Sqlstr = "Select * from " & MyClass.gUnifyDb & "gen_ledger Where gl_sect =" & Gl_Sect & _
          " and   gl_type_code =" & Gl_Type_Code & " and  gl_dept =" & GL_Dept & _
          " and   gl_per_year =" & Per_Year & " and gl_per_id =" & Per_Id
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    If Recset.EOF Then
        'Now see that sectorcode,type code and department in chart_of_acct
        Sqlstr = "Select * from " & MyClass.gUnifyDb & "chart_of_acct " & _
              " Where gl_sect =" & Gl_Sect & _
              " and   gl_type_code =" & Gl_Type_Code & " and gl_dept =" & GL_Dept
        Call Fire_Sql(Sqlstr, tRecSet, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then GoTo IO_Error
        If tRecSet.EOF = True Then Exit Sub
        
        Sqlstr = "Insert into " & MyClass.gUnifyDb & "gen_ledger " & _
            " (gl_sect,gl_type_code , gl_dept, gl_per_year, gl_per_id,gl_prev_day,gl_cum_act,gl_cum_bgt,gl_open_bal," & _
            " gl_bal,gl_close_bal,gl_last_bgt,gl_curr_bgt,gl_fore_bgt,gl_txns,gl_txns_todate,gl_last_txn,gl_log_date,per_close_ind)" & _
            " values (" & Gl_Sect & "," & Gl_Type_Code & "," & GL_Dept & "," & Per_Year & "," & Per_Id & _
            ",0,0,0,0,0,0,0,0,0,0,0," & _
            "0, ' " & Format("01/01/1900", "dd-mmm-yyyy") & "'" & " ,'N')"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then GoTo IO_Error
    End If
    'Select Last Transaction no and increment it by 1
    Sqlstr = " Select par_no From " & MyClass.gUnifyDb & "parameter Where par_key = 'GL_TXN_NO'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    If Recset.EOF Then
        Call MyClass.Display_Message("Transaction No not found for par_key=GL_TXN_NO !", 1)
        Err_Flag = 1
        Exit Sub
    End If
    GL_TxnNo = Recset!Par_No + 1
    
Read_GL_Txn:
    
    'Search GL_TXN for the transaction number received from the parameter table
    Sqlstr = "Select gl_txn_no From " & MyClass.gUnifyDb & "gl_txn " & _
             " Where gl_txn_date='" & Format(Txn_Date, "dd-mmm-yyyy") & "' and gl_txn_no=" & GL_TxnNo
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    If Not Recset.EOF Then
        GL_TxnNo = GL_TxnNo + 1
        GoTo Read_GL_Txn
    End If
    
    'Update the parameter table with the increased transaction no
    Sqlstr = " Update " & MyClass.gUnifyDb & "parameter Set par_no =" & GL_TxnNo & " Where par_key = 'GL_TXN_NO'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    
    '===========Insert record into the gl_txn table
    Sqlstr = " Insert into " & MyClass.gUnifyDb & "gl_txn (gl_txn_no, gl_txn_date, gl_txn_time," & _
          " gl_txn_code, gl_narration, gl_sect,gl_type_code, gl_dept, gl_txn_amt," & _
          " drcr_ind, per_id, per_year,audit_ind,acnt_type, acnt_txn_code," & _
          " acnt_txn_categ,gl_voucher) VALUES (" & GL_TxnNo & ",'" & Format(Txn_Date, "dd-mmm-yyyy") & "'" & _
            "," & Format(Txn_Time, "HHMM") & "," & _
            "'" & Txn_Code & "'," & "'" & Narration & "'" & _
            "," & Gl_Sect & "," & Gl_Type_Code & "," & GL_Dept & "," & Txn_Amt & _
            "," & "'" & DRCR_IND & "'," & Per_Id & "," & Per_Year & "," & "'N'" & _
            "," & Acnt_Type & "," & "'" & Acnt_Txn_Code & "'" & ",'" & Acnt_Categ & "','" & GL_Voucher & "')"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    
    '=====================Now update the General Ledger Table
    Sqlstr = " Update " & MyClass.gUnifyDb & "gen_ledger Set gl_bal = gl_bal +" & Txn_Amt & _
          ",gl_close_bal = gl_close_bal +" & Txn_Amt & ",gl_cum_act = gl_cum_act +" & Txn_Amt & _
          ",gl_txns = gl_txns +" & 1 & _
          ",gl_last_txn =" & GL_TxnNo & ",gl_log_date ='" & Format(Txn_Date, "dd-mmm-yyyy") & "'" & _
          ",gl_txns_todate = gl_txns_todate +" & 1 & _
          " Where gl_sect =" & Gl_Sect & " and   gl_type_code =" & Gl_Type_Code & _
          " and   gl_dept =" & GL_Dept & " and   gl_per_year =" & Per_Year & " and   gl_per_id =" & Per_Id
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    
    Exit Sub
IO_Error:
    Call MyClass.Display_Message("SQL I/O Error in POST_GL_New", 1)
    Err_Flag = 1
    Exit Sub
End Sub
Public Sub Get_Next_Prev_Work_Dates(ByVal Cur_Work_Date As Date, ByRef Prev_Work_Date As Date, ByRef Next_Work_Date As Date)
Dim Sqlstr As String, Recset As New ADODB.Recordset
    
    Prev_Work_Date = Cur_Work_Date - 1
    Next_Work_Date = Cur_Work_Date + 1
    Sqlstr = "select hol_date from " & MyClass.gUnifyDb & "holiday " & _
             " where hol_date < '" & Format(Cur_Work_Date, "dd-mmm-yyyy") & "' and " & _
             " hol_date > '" & Format(Cur_Work_Date - 15, "dd-mmm-yyyy") & "' " & _
             " order by hol_date desc"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    Do While Not Recset.EOF
        If Recset!hol_date <> Prev_Work_Date Then GoTo Find_Next_Work_Date
        Prev_Work_Date = Prev_Work_Date - 1
        Recset.MoveNext
    Loop

Find_Next_Work_Date:

    Sqlstr = "select hol_date from " & MyClass.gUnifyDb & "holiday " & _
             " where hol_date > '" & Format(Cur_Work_Date, "dd-mmm-yyyy") & "' and " & _
             " hol_date < '" & Format(Cur_Work_Date + 15, "dd-mmm-yyyy") & "' " & _
             " order by hol_date "
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    Do While Not Recset.EOF
        If Recset!hol_date <> Next_Work_Date Then Exit Sub
        Next_Work_Date = Next_Work_Date + 1
        Recset.MoveNext
    Loop
    
    Exit Sub
IO_Error:
    End
End Sub

Public Sub Get_Loan_Arrear(ByVal Branch_Code As Integer, ByVal AcntType As Integer, _
                        ByVal AcntNumber As Long, ByVal Arrear_Date As Date, _
                        ByRef Arrear_Amt As Currency, ByRef Due_Date As Date)
Dim Sqlstr As String, Tmp_RecSet As New ADODB.Recordset
Dim Ac_Status As Byte, Close_Date As Date
Dim Paid_Amt As Currency, Flag As Byte
Dim Unrec_Int_Amt As Currency, Byte_Flag As Byte
Dim Loan_Maturity_Date As Date, Rec_Install_Amt As Currency, Rec_Due_Date As Date, New_Flag As Byte

    Arrear_Amt = 0
    Due_Date = #1/1/1900#
    AKS_Save_Next_Date = #1/1/1900#
    
    If Set_Connection(Branch_Code) <> 0 Then Exit Sub
    
    'If Loan is already closed then no arrears
'    SQLStr = "Select lm_ac_status,lm_close_date,lm_maturity_date from " & UseDbPrefix & "laccounts where lm_hbr_cd = " & Branch_Code & _
'            " and lm_type_code = " & AcntType & " and lm_ac_srno = " & AcntNumber

    Paid_Amt = 0
    Close_Date = #1/1/1900#
    Ac_Status = 0
    Loan_Maturity_Date = MyClass.Branch_Working_Date
    
    Sqlstr = "Select sum(ltxn_amount),ltxn_rec_type,lm_ac_status,lm_close_date,lm_maturity_date from " & UseDbPrefix & "laccounts," & _
            UseDbPrefix & "ltrans where lm_hbr_cd = " & Branch_Code & _
            " and lm_type_code = " & AcntType & " and lm_ac_srno = " & AcntNumber & " and lm_hbr_cd = ltxn_ac_hbr_cd " & _
            " and lm_type_code = ltxn_ac_type_code and lm_ac_srno = ltxn_ac_srno " & _
            " and ltxn_effective_date <= '" & Format(Arrear_Date, "dd-mmm-yyyy") & "' group by ltxn_rec_type,lm_ac_status,lm_close_date,lm_maturity_date"
    Call Fire_Sql(Sqlstr, Tmp_RecSet, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    'If Tmp_RecSet.EOF Then Exit Sub
    If Tmp_RecSet.EOF = False Then
        Do While Tmp_RecSet.EOF = False
            Ac_Status = IIf(IsNull(Tmp_RecSet!lm_ac_status), 0, Tmp_RecSet!lm_ac_status)
            Close_Date = IIf(IsNull(Tmp_RecSet!lm_close_date), CDate("01/01/1900"), Tmp_RecSet!lm_close_date)
            Loan_Maturity_Date = IIf(IsNull(Tmp_RecSet!lm_maturity_date), MyClass.Branch_Working_Date, Tmp_RecSet!lm_maturity_date)
            If IIf(IsNull(Tmp_RecSet!ltxn_rec_type), 0, Tmp_RecSet!ltxn_rec_type) < 11 Then GoTo Next_Rec
            Paid_Amt = Paid_Amt + IIf(IsNull(Tmp_RecSet.Fields(0)), 0, Tmp_RecSet.Fields(0))
Next_Rec:
           Tmp_RecSet.MoveNext
        Loop
        If Ac_Status > 0 And Close_Date <= Arrear_Date Then Exit Sub
        'if arrear date >= Maturity date then complete loan balance is arrear
        If Arrear_Date >= Loan_Maturity_Date Then
            Call Get_Loan_Balance(Branch_Code, AcntType, AcntNumber, Arrear_Date - 1, Arrear_Amt, Unrec_Int_Amt, Byte_Flag)
            Due_Date = Loan_Maturity_Date
            Exit Sub
        End If
    End If
    'Find total Payment received against this loan upto arrear date
'    SQLStr = "select sum(ltxn_amount) from " & UseDbPrefix & "ltrans where ltxn_ac_hbr_cd = " & Branch_Code & _
'        " and ltxn_ac_type_code = " & AcntType & " and ltxn_ac_srno = " & AcntNumber & " and ltxn_rec_type >= 11" & _
'        " and ltxn_effective_date <= '" & Format(Arrear_Date, "dd-mmm-yyyy") & "'"
'    Call Fire_Sql(SQLStr, Tmp_RecSet, SQL_Error, Use_Connection, Recs_Read)
'    If SQL_Error <> 0 Then GoTo IO_Error
'    Paid_Amt = IIf(IsNull(Tmp_RecSet.Fields(0)), 0, Tmp_RecSet.Fields(0))
   
    'Now find loan instalments whose due date is <= arrear date
    Sqlstr = "select pay_install_due_date,pay_install_amt,pay_status from " & UseDbPrefix & "lrepay where pay_hbr_cd = " & Branch_Code & _
            " and pay_type_code = " & AcntType & " and pay_ac_srno = " & AcntNumber & _
            " order by pay_install_due_date "
    Call Fire_Sql(Sqlstr, Tmp_RecSet, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    Flag = 0
    New_Flag = 0
    Do While Not Tmp_RecSet.EOF
        Rec_Due_Date = IIf(IsNull(Tmp_RecSet!pay_install_due_date), CDate("01/01/1900"), Tmp_RecSet!pay_install_due_date)
        Rec_Install_Amt = IIf(IsNull(Tmp_RecSet!Pay_Install_Amt), 0, Tmp_RecSet!Pay_Install_Amt)
        If New_Flag = 0 And Tmp_RecSet!Pay_Status <= 0 Then
            AKS_Save_Next_Date = IIf(IsNull(Tmp_RecSet!pay_install_due_date), #1/1/1920#, Tmp_RecSet!pay_install_due_date)
            New_Flag = 1
        End If
        If Rec_Due_Date <= Arrear_Date Then
            Paid_Amt = Paid_Amt - Rec_Install_Amt
            If Paid_Amt < 0 And Flag = 0 Then
                Due_Date = Rec_Due_Date
                Flag = 1
            End If
        End If
        Tmp_RecSet.MoveNext
    Loop
                
    If Paid_Amt < 0 Then Arrear_Amt = 0 - Paid_Amt
    Exit Sub
                
IO_Error:
    End
            
End Sub


Public Function Get_Savings_Drawing_Power(ByVal BranchCode As Integer, ByVal CustId As Long, ByVal AcntType As Integer, _
                    ByVal AcntNumber As Long, ByVal Clear_Balance As Currency, ByVal Block_Amt As Currency) As Currency

Dim Sqlstr As String, Od_Limit As Currency, OD_Validity As Date, ADNL_Limit As Currency, ADNL_Validity As Date
Dim Withdrawable_Balance As Currency
Dim Recset As New ADODB.Recordset

    If Set_Connection(BranchCode) <> 0 Then
        Get_Savings_Drawing_Power = 0
        Exit Function
    End If
    
    Sqlstr = "Select * from " & UseDbPrefix & "fluctuating_loans where br_code = " & BranchCode & _
              " and cust_idno = " & CustId & " and type_code = " & AcntType & " and ac_srno = " & AcntNumber
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo IO_Error
    Od_Limit = 0
    OD_Validity = #1/1/1920#
    ADNL_Limit = 0
    ADNL_Validity = #1/1/1920#
    If Not Recset.EOF Then
        Od_Limit = Recset!Od_Limit
        OD_Validity = Recset!od_valid_date
        ADNL_Limit = Recset!Addnl_Od_Limit
        ADNL_Validity = Recset!addnl_od_valid_date
    End If
    Withdrawable_Balance = Clear_Balance - Block_Amt
    ' Add Overdraft Limits in Withdrawable Balance
    If Od_Limit > 0 And OD_Validity >= MyClass.Branch_Working_Date Then Withdrawable_Balance = Withdrawable_Balance + Od_Limit
    If ADNL_Limit > 0 And ADNL_Validity >= MyClass.Branch_Working_Date Then Withdrawable_Balance = Withdrawable_Balance + ADNL_Limit
    Get_Savings_Drawing_Power = Withdrawable_Balance
    ' Should we take care of Unposted Card Transactions also here ?
    Exit Function
IO_Error:
    End
End Function

Public Sub Issue_NewCard(ByVal Branch_Code As Integer, ByVal Cust_Id As Long, ByVal Acct_Type As Integer, ByVal Acct_No As Long, _
                        ByVal Card_No As Long, ByVal IssueType As Byte, ByRef Err_Flag As Integer)

Dim My_Account As UnPacked_AccountRecord
Dim My_LoanData(9) As UnPacked_LoanRecord, Num_LoanRecs As Byte
Dim My_SignatoryData(4) As UnPacked_SignatoryRecord, SignFile_Array(4) As String, Num_Signatories As Byte
Dim My_Tran(500) As UnPacked_TranRecord
Dim Byt_ErrFlag As Byte, Card_Flag As Byte, Size_Tran As Byte, Size_Signature As Integer
Dim Rs_Set As New ADODB.Recordset
Dim Sqlstr As String

    Err_Flag = 0
    If Set_Connection(Branch_Code) <> 0 Then Exit Sub
    
Check_Card:

    Call Check_Card(Card_Flag)
    If Card_Flag <> 1 Then
        If MsgBox("Card Not Detected ! Please Ensure that the Card is Inserted properly ! ", vbRetryCancel) <> vbRetry Then
            Err_Flag = 1
            Exit Sub
        End If
        GoTo Check_Card
    End If
    
    'Get Signature Info from DB
    Call GET_SignatureInfo(Branch_Code, Cust_Id, SignFile_Array(), Err_Flag)
    If Err_Flag <> 0 Then Exit Sub
    
    'Read Account Data from Card
    Call Read_MDB_Account(My_Account)
    
    My_Account.Card_Status = 0
    My_Account.Card_No = Card_No
    My_Account.Sync_TillDate = CDate("01/01/1920")
    My_Account.Sync_TillTime = 0
    My_Account.Sync_Date = CDate("01/01/1920")
    My_Account.Sync_Time = 0
    
   'Get account info from DB
    Call GetAccountInfo(Branch_Code, Cust_Id, Acct_Type, Acct_No, My_Account, Byt_ErrFlag)
    If Byt_ErrFlag <> 0 Then
        Err_Flag = 1
        Exit Sub
    End If
    
    'read loan info from DB
    Call Get_LoanInfo(Branch_Code, Cust_Id, Acct_Type, Acct_No, My_LoanData(), Num_LoanRecs, Byt_ErrFlag)
    If Byt_ErrFlag <> 0 Then
        Err_Flag = 1
        Exit Sub
    End If

    'read signatory info from d/b
    Call GET_AccountSignatoryinfo(Branch_Code, Cust_Id, My_SignatoryData(), Num_Signatories)
    If Num_Signatories <= 0 Then
        MsgBox "No Signatories defined for this account!"
        Err_Flag = 1
        Exit Sub
    End If
    
    '''' Delete Existing Records from MDB before Inserting
    Call Clear_CardInfo_From_Memory
    Call Revise_Account_Pool(My_Account)
    Call Revise_Loan_Pool(Num_LoanRecs, My_LoanData)
    Call Revise_Signatory_Pool(My_SignatoryData)

    If IssueType = 1 Then
        ' Fresh Issuance Case
        Call Issue_FFBS_Card(0, Card_No, Size_Tran, Size_Signature, My_Account, Num_LoanRecs, My_LoanData(), My_SignatoryData(), Err_Flag)
    Else
        ' Reissuance Case
        Call Issue_FFBS_Card(1, Card_No, Size_Tran, Size_Signature, My_Account, Num_LoanRecs, My_LoanData(), My_SignatoryData(), Err_Flag)
    End If
    If Err_Flag <> 0 Then
        MsgBox "Card was Removed During the Operation. " & vbCrLf & " This Card is now being Spoiled. " & vbCrLf & " In future NEVER remove the card from the drive, till the operation is over.", vbCritical + vbOKOnly
        Exit Sub
    End If
    
    Call Read_MDB_Account(My_Account)
    Call Sync_At_Home(My_Account, Err_Flag)
    If Err_Flag <> 0 Then Exit Sub
    
    'Update Card No in Account Master
     Sqlstr = "update " & UseDbPrefix & "nsav_account set f_card_no=" & Card_No & " " & _
                " where br_code=" & MyClass.Unit_Code & _
                " and cust_idno=" & Cust_Id & " and type_code=" & Acct_Type & " and ac_srno=" & Acct_No
     Call Fire_Sql(Sqlstr, Rs_Set, Sql_Error, Use_Connection, recs_read)
     If Sql_Error <> 0 Then GoTo Proc_Error
    
    ''' Update Card_Mst Table - the Status as 2 (Issued); Issue/Re-Issue date, Last Update date, Initilaize ReissueAllow date
    Sqlstr = " update " & UseDbPrefix & "card_mst set crd_status = 2," & _
                " crd_issdate='" & Format(My_Account.Card_IssueDate, "dd-mmm-yyyy") & "'" & _
                ",crd_expirydate = '" & Format(My_Account.Card_ExpiryDate, "dd-mmm-yyyy") & "'" & _
                ",crd_lastupddate = '" & Format(Date, "dd-mmm-yyyy") & "'" & _
                ",crd_reissallow_date = '" & Format(#1/1/1920#, "dd-mmm-yyyy") & "'" & _
                " where crd_card_no=" & Card_No
    Call Fire_Sql(Sqlstr, Rs_Set, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then GoTo Proc_Error
    Exit Sub

Proc_Error:
    Err_Flag = 1
    Call errHandler("MyLibClass/Issue_NewCard")
    Exit Sub
End Sub
'Public Sub GetAccountInfo(ByVal Pn_BrCode As Integer, ByVal Customer_Code As Long, ByVal Pn_AcType As Integer, _
'                          ByVal Pn_AcNo As Long, ByRef Ps_AccountMst As UnPacked_AccountRecord, ByRef Pn_ErrFlag As Byte)
'
'Dim Sqlstr As String, Rs_Account As New ADODB.Recordset, Rs_FluctLoan As New ADODB.Recordset, Rs_Customer As New ADODB.Recordset
'Dim rs_Card As New ADODB.Recordset, rs_Param As New ADODB.Recordset
'Dim Cust_FstName As String, Cust_MidName As String, Cust_SurName As String
'Dim ln_Month As Byte, ln_Year As Integer, ln_Time As Integer, ld_ExpiryDate As Date, ls_str As String
'Dim ln_ClearBal As Currency, ln_UnClearBal As Currency, Current_Date As Date, Current_Time As String
'Dim Current_Year As Integer, Current_Month As Integer
'
'    Pn_ErrFlag = 0
'    Call GetServerDateTime(Current_Date, Current_Time)
'    If Set_Connection(Pn_BrCode) <> 0 Then Exit Sub
'
'    ''' Select Account Details
'    Sqlstr = "select * from " & UseDbPrefix & "nsav_account where br_code=" & Pn_BrCode & _
'            " and cust_idno = " & Customer_Code & " and type_code=" & Pn_AcType & " and ac_srno=" & Pn_AcNo
'    Call Fire_Sql(Sqlstr, Rs_Account, Sql_Error, Use_Connection, recs_read)
'    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/GetAccountInfo_1")
'    If Rs_Account.EOF Then
'        MsgBox "Record not Found in Account Master for Account No. " & Pn_AcNo, vbInformation
'        Pn_ErrFlag = 1
'        Exit Sub
'    End If
'
'    Ps_AccountMst.Home_Branch = Pn_BrCode
'    Ps_AccountMst.Cust_Id = Customer_Code
'    Ps_AccountMst.Account_Type = Pn_AcType
'    Ps_AccountMst.Account_No = Pn_AcNo
'    Ps_AccountMst.Account_OpenDate = IIf(IsNull(Rs_Account!Open_Date), CDate("01/01/1920"), Rs_Account!Open_Date)
'    If Ps_AccountMst.Account_OpenDate > Current_Date Then
'        MsgBox "Account Opeing Date > Todays' Date. Card can not Be Issued ! ", vbInformation
'        Pn_ErrFlag = 1
'        Exit Sub
'    End If
'
'    Call GetLedgerMonthYear(ln_Year, ln_Month, Pn_ErrFlag)
'    Current_Year = Year(Current_Date)
'    Current_Month = Month(Current_Date)
'    If ln_Year > Current_Year Or (ln_Year = Current_Year And ln_Month > Current_Month) Then
'        MsgBox "Ledger Fee Paid Upto  > Current Year and Month. Card can not Be Issued ! ", vbInformation
'        Pn_ErrFlag = 1
'        Exit Sub
'    End If
'
'    Ps_AccountMst.LedgerFee_UptoYear = ln_Year
'    Ps_AccountMst.LedgerFee_UptoMonth = ln_Month
'    Ps_AccountMst.Block_Amount = IIf(IsNull(Rs_Account!Block_Amt), 0, Rs_Account!Block_Amt)
'    If Ps_AccountMst.Block_Amount < 0 Then
'        MsgBox "No Block Amount Defined for this Account. Card can not Be Issued ! ", vbInformation
'        Pn_ErrFlag = 1
'        Exit Sub
'    End If
'    Ps_AccountMst.ChequeBook_Flag = IIf(IsNull(Rs_Account!ChqBook_IssFlag), 0, Rs_Account!ChqBook_IssFlag)
'    If Ps_AccountMst.ChequeBook_Flag < 0 Or Ps_AccountMst.ChequeBook_Flag > 1 Then
'        MsgBox "Invalid Cheque Book Flag defined in Account Master. Card can not Be Issued ! ", vbInformation
'        Pn_ErrFlag = 1
'        Exit Sub
'    End If
'    Ps_AccountMst.Cust_Category = IIf(IsNull(Rs_Account!Ac_Categ), " ", Rs_Account!Ac_Categ)
'    If UCase(Ps_AccountMst.Cust_Category) <> "N" And UCase(Ps_AccountMst.Cust_Category) <> "S" Then
'        MsgBox "Customer Category defined is invalid. Card can not be Issued ! ", vbInformation
'        Pn_ErrFlag = 1
'        Exit Sub
'    End If
'
'    Call Get_Customer_Balance(Pn_BrCode, Customer_Code, Pn_AcType, Pn_AcNo, Current_Date, ln_ClearBal, ln_UnClearBal)
'    Ps_AccountMst.SyncBal = ln_ClearBal
'
'    Ps_AccountMst.Od_Limit = 0
'    Ps_AccountMst.OD_Validity = CDate("01/01/1920")
'    Ps_AccountMst.Interest_Rate = 0
'    Ps_AccountMst.AddOD_Limit = 0
'    Ps_AccountMst.AddOD_Validity = CDate("01/01/1920")
'    Ps_AccountMst.AddOD_InterestRate = 0
'
'    '''' Read Fluctuating Loans Table for required Information
'    Sqlstr = "select * from " & UseDbPrefix & "fluctuating_loans" & _
'            " where br_code=" & Pn_BrCode & " and cust_idno =" & Customer_Code & _
'            " and type_code=" & Pn_AcType & " and ac_srno=" & Pn_AcNo
'    Call Fire_Sql(Sqlstr, Rs_FluctLoan, Sql_Error, Use_Connection, recs_read)
'    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/GetAccountInfo_2")
'    If Not Rs_FluctLoan.EOF Then
'        Ps_AccountMst.OD_Validity = IIf(IsNull(Rs_FluctLoan!od_valid_date), CDate("01/01/1920"), Rs_FluctLoan!od_valid_date)
'        If Rs_FluctLoan!Od_Limit > 0 And Ps_AccountMst.OD_Validity >= Current_Date Then
'            Ps_AccountMst.Od_Limit = IIf(IsNull(Rs_FluctLoan!Od_Limit), 0, Rs_FluctLoan!Od_Limit)
'            Ps_AccountMst.Interest_Rate = IIf(IsNull(Rs_FluctLoan!OD_Int_Rate), 0, Rs_FluctLoan!OD_Int_Rate)
'        End If
'        Ps_AccountMst.AddOD_Validity = IIf(IsNull(Rs_FluctLoan!addnl_od_valid_date), CDate("01/01/1920"), Rs_FluctLoan!addnl_od_valid_date)
'        If Rs_FluctLoan!Addnl_Od_Limit > 0 And Ps_AccountMst.AddOD_Validity >= Current_Date Then
'            Ps_AccountMst.AddOD_Limit = IIf(IsNull(Rs_FluctLoan!Addnl_Od_Limit), 0, Rs_FluctLoan!Addnl_Od_Limit)
'            Ps_AccountMst.AddOD_InterestRate = IIf(IsNull(Rs_FluctLoan!addnl_od_int_rate), 0, Rs_FluctLoan!addnl_od_int_rate)
'        End If
'    End If
'
'    '''' Read Customer Master to Get Name
'    Sqlstr = "select cust_fstname,cust_midname,cust_surname,cust_card_name,sign_auth_flag,sign_auth_instruc from " & UseDbPrefix & "customer" & _
'                " where br_code=" & Pn_BrCode & " and cust_idno=" & Rs_Account!Cust_IdNo
'    Call Fire_Sql(Sqlstr, Rs_Customer, Sql_Error, Use_Connection, recs_read)
'    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/GetAccountInfo_3")
'    If Rs_Customer.EOF Then
'        MsgBox "Record Not Found In Customer Master For Customer ID " & Rs_Account!Cust_IdNo, vbInformation
'        Pn_ErrFlag = 1
'        Exit Sub
'    End If
'
'    '''' Use Card_name if available, else customer name has to be built from the 3 names
'    Ps_AccountMst.Cust_Name = Trim$(IIf(IsNull(Rs_Customer!cust_card_name), "", Rs_Customer!cust_card_name))
'    If Ps_AccountMst.Cust_Name = "" Then
'        Cust_FstName = IIf(IsNull(Rs_Customer!Cust_FstName), "", Rs_Customer!Cust_FstName)
'        Cust_MidName = IIf(IsNull(Rs_Customer!Cust_MidName), "", Rs_Customer!Cust_MidName)
'        Cust_SurName = IIf(IsNull(Rs_Customer!Cust_SurName), "", Rs_Customer!Cust_SurName)
'        Ps_AccountMst.Cust_Name = Get_Conv_CustName(Cust_FstName, Cust_MidName, Cust_SurName)
'    End If
'
'    Ps_AccountMst.Cust_Name = Mid$(Ps_AccountMst.Cust_Name, 1, 35)
'    Ps_AccountMst.Signing_AuthFlag = IIf(IsNull(Rs_Customer!Sign_Auth_Flag), 0, Rs_Customer!Sign_Auth_Flag)
'    If Ps_AccountMst.Signing_AuthFlag < 0 Or Ps_AccountMst.Signing_AuthFlag > 1 Then
'        MsgBox "Invalid Signing Authority Flag defined in Customer Master. Card can not Be Issued ! ", vbInformation
'        Pn_ErrFlag = 1
'        Exit Sub
'    End If
'    Ps_AccountMst.Signing_Instructions = IIf(IsNull(Rs_Customer!sign_auth_instruc), " ", Rs_Customer!sign_auth_instruc)
'    Ps_AccountMst.Sync_TillDate = IIf(IsNull(Rs_Account!Sync_Data_Date), CDate("01/01/1920"), Rs_Account!Sync_Data_Date)
'    ls_str = IIf(IsNull(Rs_Account!Sync_Data_Time), 0, Rs_Account!Sync_Data_Time)
'    'ls_str = Format(ls_str, "HH:MM")
'    ls_str = get_Formated_Time(Val(ls_str))
'    Call Move_T2I(ls_str, ln_Time)
'    Ps_AccountMst.Sync_TillTime = ln_Time
'    Ps_AccountMst.Sync_Date = IIf(IsNull(Rs_Account!Sync_Done_Date), CDate("01/01/1920"), Rs_Account!Sync_Done_Date)
'    ls_str = IIf(IsNull(Rs_Account!Sync_Done_Time), 0, Rs_Account!Sync_Done_Time)
'    'ls_str = Format(ls_str, "HH:MM")
'    ls_str = get_Formated_Time(Val(ls_str))
'
'    Call Move_T2I(ls_str, ln_Time)
'    Ps_AccountMst.Sync_Time = ln_Time
'    Ps_AccountMst.Sync_Branch = Pn_BrCode
'    Ps_AccountMst.Card_IssueDate = Format(Current_Date, "dd-mmm-yyyy")
'
'    '' Read Parameter File & Calculate Expiry date
'    Sqlstr = " select expiry_months from " & UseDbPrefix & "nsav_sysparam where home_branch = " & Pn_BrCode
'    Call Fire_Sql(Sqlstr, rs_Param, Sql_Error, Use_Connection, recs_read)
'    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/GetAccountInfo_4")
'
'    ''' 24 months default for Card validity
'    ln_Month = 24
'    If Not rs_Param.EOF Then ln_Month = IIf(IsNull(rs_Param!expiry_months), 24, rs_Param!expiry_months)
'    ld_ExpiryDate = DateAdd("m", ln_Month, Date)
'    Ps_AccountMst.Card_ExpiryDate = ld_ExpiryDate
'    Ps_AccountMst.Card_Status = 0       ''''' Set the card status to Live
'    Pn_ErrFlag = 0
'    Exit Sub
'End Sub

'Private Sub Purge_Loan(ByRef User_Array() As UnPacked_LoanRecord, ByRef User_Rec_Knt As Byte, ByVal RecNo_To_Remove As Integer)
'Dim I As Integer
'    If RecNo_To_Remove <= 0 Or RecNo_To_Remove > User_Rec_Knt Then Exit Sub
'    If RecNo_To_Remove = User_Rec_Knt Then
'        User_Rec_Knt = User_Rec_Knt - 1
'        Exit Sub
'    End If
'    For I = RecNo_To_Remove To User_Rec_Knt - 1
'        User_Array(I) = User_Array(I + 1)
'    Next I
'    User_Rec_Knt = User_Rec_Knt - 1
'    Exit Sub
'End Sub

'Public Sub Sync_At_Home(ByRef Account_Info As UnPacked_AccountRecord, ByRef Pn_ErrFlag As Integer)
'
'Dim Sqlstr As String, Server_Date As Date, Server_Time As String, Int_Server_Time As Integer, ls_Time As String
'Dim Byt_ErrFlag As Byte
'
'Dim Rs_Set As New ADODB.Recordset, Rs_FluctLoan As New ADODB.Recordset
'Dim Rs_Account As New ADODB.Recordset, rs_Trans As New ADODB.Recordset
'Dim Rs_Loans As New ADODB.Recordset, Rs_NsavTxn As New ADODB.Recordset
'Dim Rs_Unposted As New ADODB.Recordset, TmpRecset As New ADODB.Recordset
'
'Dim Tran_Time As Integer, OD_Validity As Date, OD_Adnl_Validity As Date
'Dim ln_ChqBookFlag As Byte, ln_LedFeeDbYY As Integer, ln_LedFeeDbMM As Byte
'Dim ln_MinBalReqd As Currency, ln_AddnlODLimit As Currency
'Dim ln_ODLimit As Currency, ln_ODIntRate As Currency, ln_AddnlODIntRate As Currency
'
'Dim New_CardBalance As Currency, UnClear_bal As Currency
'Dim ln_TxnBrCode As Integer, ld_TxnDate As Date, ld_ClearDate As Date
'Dim ln_TxnNo As Long, ln_ChqNo As Long
'Dim ls_TxnTime As String, ls_TxnCode As String
'Dim ln_TxnAmt As Currency, ln_BankChg As Currency, Net_TxnAmt As Currency, ln_TransferLoan As Byte
'
'Dim Loan_Data_In_DB(7) As UnPacked_LoanRecord, Num_Loans_in_DB As Byte
'Dim Int_Err_Flag As Integer, Num_FutureTxn As Integer
'Dim Txn_Narration As String, Net_FutureAmt As Currency
'
'' Variables Introduced by AKS
'Dim Tran_Pool(500) As UnPacked_TranRecord, Tran_Pool_Knt As Integer, Int_Var As Integer, Byte_Var As Byte
'Dim Loan_Pool(9) As UnPacked_LoanRecord, Loan_Pool_Knt As Byte, I As Integer, J As Integer
'
'On Error GoTo Err_Exit
'
'    Pn_ErrFlag = 0
'    Call GetServerDateTime(Server_Date, Server_Time)
'
'    If Account_Info.Card_No = 0 Then Exit Sub
'
'    ' ================================================================
'    ' Grab All Card Transactions, which we do not have in our Database
'    ' ================================================================
'
'    Call Read_MDB_Tran(Tran_Pool_Knt, Tran_Pool)
'
'    ' ----------------------------------------------------------------------------------------------------
'    ' Copy Card Transactions not in our D/B in Any Table UnPosted Card TransTable
'    ' ----------------------------------------------------------------------------------------------------
'    For I = 1 To Tran_Pool_Knt
'        If Tran_Pool(I).History_Flag >= 1 Then GoTo Next_Tran_Loop
'        'This Statement is add by murty on 01/05/2006 as per steve
'        If Tran_Pool(I).Transacting_Branch = Account_Info.Home_Branch Then GoTo Next_Tran_Loop
'        ' Following Statement Commented by Anil K  Saxena on 6th Feb 2005
'        'If Tran_Pool(I).Transacting_Branch = Account_Info.Home_Branch Then GoTo Next_Tran_Loop
'
'        ' Check if this record exists in D/B transaction table
'        Sqlstr = "select txn_no  from " & MyClass.gUnifyDb & "nsav_txn" & _
'                    " where txn_br_code=" & Tran_Pool(I).Transacting_Branch & _
'                    " and txn_date ='" & Format(Tran_Pool(I).Transaction_Date, "dd-mmm-yyyy") & "'" & _
'                    " and txn_no =" & Tran_Pool(I).Transaction_No
'        Call Fire_Sql(Sqlstr, Rs_NsavTxn, Sql_Error, MyClass.Connection_No, recs_read)
'        If Sql_Error <> 0 Then GoTo Err_Exit
'        'If Record found in D/B Transaction Table Very Good else try in Unposted Card Transactions Table
'        If Rs_NsavTxn.EOF = True Then
'            'Record not found in D/B, Check if it already exists in Unposted_Card_Txn of this Card holder.
'             Sqlstr = "select txn_no from " & MyClass.gUnifyDb & "unposted_card_txn" & _
'                           " where txn_br_code=" & Tran_Pool(I).Transacting_Branch & _
'                           " and txn_date ='" & Format(Tran_Pool(I).Transaction_Date, "dd-mmm-yyyy") & "'" & _
'                           " and txn_no =" & Tran_Pool(I).Transaction_No
'             Call Fire_Sql(Sqlstr, Rs_Unposted, Sql_Error, MyClass.Connection_No, recs_read)
'             If Sql_Error <> 0 Then GoTo Err_Exit
'             If Rs_Unposted.EOF = True Then
'                '''' Record not Found. Insert In UnPosted Card Transactions; WE will post when we get comm. from Transacting Branch
'                Call Move_I2T(Tran_Pool(I).Transaction_Time, ls_Time)
'                Sqlstr = "insert into " & MyClass.gUnifyDb & "unposted_card_txn (txn_br_code,txn_date,txn_no,txn_time,txn_clear_date,txn_amt,txn_bnk_chg," & _
'                           "txn_code,chq_no,trans_loan_flag,txn_hbr_cd,cust_idno,type_code,ac_srno) values (" & _
'                           Tran_Pool(I).Transacting_Branch & ",'" & _
'                           Format(Tran_Pool(I).Transaction_Date, "dd-mmm-yyyy") & "'," & _
'                           Tran_Pool(I).Transaction_No & "," & _
'                           Tran_Pool(I).Transaction_Time & ",'" & _
'                           Format(Tran_Pool(I).Effective_Date, "dd-mmm-yyyy") & "'," & _
'                           Tran_Pool(I).Tr_Amount1 & "," & Tran_Pool(I).Tr_Amount2 & ",'" & _
'                           Tran_Pool(I).Transaction_Code & "'," & Tran_Pool(I).Cheque_Number & "," & _
'                           Tran_Pool(I).Loan_TransferFlag & "," & _
'                           Account_Info.Home_Branch & "," & Account_Info.Cust_Id & "," & _
'                           Account_Info.Account_Type & "," & _
'                           Account_Info.Account_No & ")"
'                Call Fire_Sql(Sqlstr, Rs_Set, Sql_Error, MyClass.Connection_No, recs_read)
'                If Sql_Error <> 0 Then GoTo Err_Exit
'            End If
'        End If
'Next_Tran_Loop:
'
'    Next I
'
'    '--------------------------------------------------------------------------------------------------------------------
'    ' All Unposted Card TXN are to be POSTED in D/B except with non zero loan transfer flag and also all ALR transactions
'    '--------------------------------------------------------------------------------------------------------------------
'    Sqlstr = "select * from " & MyClass.gUnifyDb & "unposted_card_txn" & _
'                " where txn_hbr_cd=" & Account_Info.Home_Branch & " and cust_idno =" & Account_Info.Cust_Id & _
'                " and type_code=" & Account_Info.Account_Type & " and ac_srno=" & Account_Info.Account_No & _
'                " and trans_loan_flag = 0 " & " and txn_code <> '" & TC_Transfer_To_Loan & "'"
'    Call Fire_Sql(Sqlstr, Rs_Unposted, Sql_Error, MyClass.Connection_No, recs_read)
'    If Sql_Error <> 0 Then GoTo Err_Exit
'    ' Process These in a Loop
'    Do While Not Rs_Unposted.EOF
'        ln_TxnBrCode = IIf(IsNull(Rs_Unposted!Txn_Br_Code), 0, Rs_Unposted!Txn_Br_Code)
'        ld_TxnDate = IIf(IsNull(Rs_Unposted!Txn_Date), CDate("01-01-1920"), Rs_Unposted!Txn_Date)
'        ln_TxnNo = IIf(IsNull(Rs_Unposted!Txn_No), 0, Rs_Unposted!Txn_No)
'        '*ls_TxnTime = IIf(IsNull(Rs_Unposted!Txn_Time), "00:00", Rs_Unposted!Txn_Time)
'        Tran_Time = IIf(IsNull(Rs_Unposted!Txn_Time), 0, Val(Rs_Unposted!Txn_Time))
'        ld_ClearDate = IIf(IsNull(Rs_Unposted!Txn_Clear_Date), CDate("01-01-1920"), Rs_Unposted!Txn_Clear_Date)
'        ln_TxnAmt = IIf(IsNull(Rs_Unposted!Txn_Amt), 0, Rs_Unposted!Txn_Amt)
'        ln_BankChg = IIf(IsNull(Rs_Unposted!Txn_Bnk_Chg), 0, Rs_Unposted!Txn_Bnk_Chg)
'        ls_TxnCode = IIf(IsNull(Rs_Unposted!Txn_Code), "", Rs_Unposted!Txn_Code)
'        ln_ChqNo = IIf(IsNull(Rs_Unposted!Chq_No), 0, Rs_Unposted!Chq_No)
'        ln_TransferLoan = IIf(IsNull(Rs_Unposted!Trans_Loan_Flag), 0, Rs_Unposted!Trans_Loan_Flag)
'        Int_Err_Flag = 0
'        '*Call Move_T2I(Format(ls_TxnTime, "HH:MM"), Tran_Time)
'
'        Txn_Narration = "Trans. From Branch " & ln_TxnBrCode
'
'        'Check whether this transaction is posted or not
'        Sqlstr = "select txn_no from " & MyClass.gUnifyDb & "nsav_txn where txn_br_code = " & ln_TxnBrCode & " and " & _
'                " txn_date = '" & Format(ld_TxnDate, "dd-mmm-yyyy") & "' and txn_no = " & ln_TxnNo
'        Call Fire_Sql(Sqlstr, TmpRecset, Sql_Error, MyClass.Connection_No, recs_read)
'        If Sql_Error <> 0 Then GoTo Err_Exit
'        If TmpRecset.EOF = False Then
'            ' In case it is already posted then Delete from Unposted_card_txn
'            Sqlstr = "delete from " & MyClass.gUnifyDb & "unposted_card_txn where txn_br_code = " & ln_TxnBrCode & " and " & _
'                 "txn_date = '" & Format(ld_TxnDate, "dd-mmm-yyyy") & "' and txn_no = " & ln_TxnNo
'            Call Fire_Sql(Sqlstr, TmpRecset, Sql_Error, MyClass.Connection_No, recs_read)
'            If Sql_Error <> 0 Then GoTo Err_Exit
'        Else
'            ' else Post it now. Post routine will automatically Delete it
'            Call Post_Transaction(ln_TxnBrCode, ld_TxnDate, Tran_Time, ln_TxnNo, Account_Info.Home_Branch, Account_Info.Cust_Id, Account_Info.Account_Type, Account_Info.Account_No, ls_TxnCode, _
'                                ln_TxnAmt, ln_BankChg, Txn_Narration, ld_ClearDate, System_Transactions_User_ID, ln_ChqNo, "01-JAN-1920", " ", 0, 0, _
'                                0, 0, 0, 0, 1, 0, Account_Info.Card_No, Account_Info.Cust_Category, , 1, Int_Err_Flag)
'            ' Delete from MDB, if successfully posted. Post_Transaction function will automatically Delete from Unposted Table
'            If Int_Err_Flag <> 0 Then GoTo Err_Exit
'        End If
'        Rs_Unposted.MoveNext
'    Loop
'
'    '===================================================================
'    ' Revise Loan Information, if the Need Be
'    ' ==================================================================
'    ''''' Get Loan Information of This Account
'    Call Get_LoanInfo(Account_Info.Home_Branch, Account_Info.Cust_Id, Account_Info.Account_Type, Account_Info.Account_No, Loan_Data_In_DB(), Num_Loans_in_DB, Byt_ErrFlag)
'    If Byt_ErrFlag <> 0 Then GoTo Err_Exit
'
'    Call Read_MDB_Loans(Loan_Pool_Knt, Loan_Pool)
'
'    ' Find if Loan Information has changed
'    If Num_Loans_in_DB <> Loan_Pool_Knt Then GoTo Perform_Loan_Sync
'
'    ' Number of Loans is same, but is all info of each loan is same ?
'    ' Please Sort Both the Arrays before Trying to
'    If Loan_Pool_Knt >= 2 Then
'        For I = 1 To Loan_Pool_Knt - 1
'            For J = I + 1 To Loan_Pool_Knt
'                If Loan_Pool(I).Account_Type < Loan_Pool(J).Account_Type Then GoTo No_Swap
'                If Loan_Pool(I).Account_Type > Loan_Pool(J).Account_Type Then GoTo Swap_Here
'                If Loan_Pool(I).Account_No <= Loan_Pool(J).Account_No Then GoTo No_Swap
'Swap_Here:
'                Loan_Pool(0) = Loan_Pool(I)
'                Loan_Pool(I) = Loan_Pool(J)
'                Loan_Pool(J) = Loan_Pool(0)
'No_Swap:
'            Next J
'        Next I
'
'        For I = 1 To Num_Loans_in_DB - 1
'            For J = I + 1 To Num_Loans_in_DB
'                If Loan_Data_In_DB(I).Account_Type < Loan_Data_In_DB(J).Account_Type Then GoTo No_Swap_2
'                If Loan_Data_In_DB(I).Account_Type > Loan_Data_In_DB(J).Account_Type Then GoTo Swap_Here_2
'                If Loan_Data_In_DB(I).Account_No <= Loan_Data_In_DB(J).Account_No Then GoTo No_Swap_2
'Swap_Here_2:
'                Loan_Data_In_DB(0) = Loan_Data_In_DB(I)
'                Loan_Data_In_DB(I) = Loan_Data_In_DB(J)
'                Loan_Data_In_DB(J) = Loan_Data_In_DB(0)
'No_Swap_2:
'            Next J
'        Next I
'   End If
'
'    For I = 1 To Loan_Pool_Knt
'        If Loan_Data_In_DB(I).Account_Type <> Loan_Pool(I).Account_Type Or _
'           Loan_Data_In_DB(I).Account_No <> Loan_Pool(I).Account_No Or _
'           Loan_Data_In_DB(I).Next_InstDate <> Loan_Pool(I).Next_InstDate Or _
'           Loan_Data_In_DB(I).Arrears_Amount <> Loan_Pool(I).Arrears_Amount Or _
'           Loan_Data_In_DB(I).Inst_Frequency <> Loan_Pool(I).Inst_Frequency Or _
'           Loan_Data_In_DB(I).Installment_Amount <> Loan_Pool(I).Installment_Amount Or _
'           Loan_Data_In_DB(I).Maturity_Date <> Loan_Pool(I).Maturity_Date Then GoTo Perform_Loan_Sync
'    Next I
'    GoTo Loan_Sync_Over
'
'Perform_Loan_Sync:
'
'    Call Revise_Loan_Pool(Num_Loans_in_DB, Loan_Data_In_DB)
'
'Loan_Sync_Over:
'
'    ' =======================================================================
'    ' Sync Account Information, if it has changed
'    ' =======================================================================
'
'    '''' Read Account Master File from Data Base
'    Sqlstr = "select block_amt,chqbook_issflag from " & MyClass.gUnifyDb & "nsav_account" & _
'                " where br_code=" & Account_Info.Home_Branch & " and cust_idno =" & Account_Info.Cust_Id & _
'                " and type_code=" & Account_Info.Account_Type & " and ac_srno=" & Account_Info.Account_No
'    Call Fire_Sql(Sqlstr, Rs_Account, Sql_Error, MyClass.Connection_No, recs_read)
'    If Sql_Error <> 0 Then GoTo Err_Exit
'    If Rs_Account.EOF Then
'        MsgBox " Data of This Card Holder NOT Found in Account Master. Please Contact IT Manager! ", vbCritical
'        GoTo Err_Exit
'    End If
'    ln_MinBalReqd = IIf(IsNull(Rs_Account!Block_Amt), 0, Rs_Account!Block_Amt)
'    ln_ChqBookFlag = IIf(IsNull(Rs_Account!ChqBook_IssFlag), 0, Rs_Account!ChqBook_IssFlag)
'
'    ' Get Clear & Un Clear Balance at this moment
'    Call Get_Customer_Balance(Account_Info.Home_Branch, Account_Info.Cust_Id, Account_Info.Account_Type, Account_Info.Account_No, MyClass.Branch_Working_Date, New_CardBalance, UnClear_bal)
'
'    'Read Fluctuating Loan Table to get OD Limit Info
'    Sqlstr = "select * from " & MyClass.gUnifyDb & "fluctuating_loans" & _
'                " where br_code=" & Account_Info.Home_Branch & " and cust_idno =" & Account_Info.Cust_Id & _
'                " and type_code=" & Account_Info.Account_Type & " and ac_srno=" & Account_Info.Account_No
'    Call Fire_Sql(Sqlstr, Rs_FluctLoan, Sql_Error, MyClass.Connection_No, recs_read)
'    If Sql_Error <> 0 Then GoTo Err_Exit
'    ln_ODLimit = 0
'    OD_Validity = CDate("01-JAN-1920")
'    ln_ODIntRate = 0
'    ln_AddnlODLimit = 0
'    OD_Adnl_Validity = CDate("01-JAN-1920")
'    ln_AddnlODIntRate = 0
'    If Not Rs_FluctLoan.EOF Then
'        ln_ODLimit = IIf(IsNull(Rs_FluctLoan!Od_Limit), 0, Rs_FluctLoan!Od_Limit)
'        OD_Validity = IIf(IsNull(Rs_FluctLoan!od_valid_date), CDate("01-JAN-1920"), Rs_FluctLoan!od_valid_date)
'        ln_ODIntRate = IIf(IsNull(Rs_FluctLoan!OD_Int_Rate), 0, Rs_FluctLoan!OD_Int_Rate)
'        ln_AddnlODLimit = IIf(IsNull(Rs_FluctLoan!Addnl_Od_Limit), 0, Rs_FluctLoan!Addnl_Od_Limit)
'        OD_Adnl_Validity = IIf(IsNull(Rs_FluctLoan!addnl_od_valid_date), CDate("01-JAN-1920"), Rs_FluctLoan!addnl_od_valid_date)
'        ln_AddnlODIntRate = IIf(IsNull(Rs_FluctLoan!addnl_od_int_rate), 0, Rs_FluctLoan!addnl_od_int_rate)
'    End If
'    If OD_Validity < MyClass.Branch_Working_Date Then
'        ln_ODLimit = 0
'        ln_ODIntRate = 0
'    End If
'    If OD_Adnl_Validity < MyClass.Branch_Working_Date Then
'        ln_AddnlODLimit = 0
'        ln_AddnlODIntRate = 0
'    End If
'
'    ''' Get Info regarding Ledger Fee Debited Upto which month
'    Call GetLedgerMonthYear(ln_LedFeeDbYY, ln_LedFeeDbMM, Byt_ErrFlag)
'    If Byt_ErrFlag <> 0 Then GoTo Err_Exit
'
'    If Account_Info.LedgerFee_UptoYear <> ln_LedFeeDbYY Or Account_Info.LedgerFee_UptoMonth <> ln_LedFeeDbMM Or _
'        Account_Info.Block_Amount <> ln_MinBalReqd Or _
'        Account_Info.SyncBal <> New_CardBalance Or _
'        Account_Info.Od_Limit <> ln_ODLimit Or Account_Info.OD_Validity <> OD_Validity Or Account_Info.Interest_Rate <> ln_ODIntRate Or _
'        Account_Info.AddOD_Limit <> ln_AddnlODLimit Or Account_Info.AddOD_Validity <> OD_Adnl_Validity Or Account_Info.AddOD_InterestRate <> ln_AddnlODIntRate Or _
'        Account_Info.ChequeBook_Flag <> ln_ChqBookFlag Then GoTo UpdateAccount
'    GoTo Acnt_Sync_Over
'
'UpdateAccount:
'
'    Call Move_T2I(Format(Server_Time, "HH:MM"), Int_Server_Time)
'    Account_Info.LedgerFee_UptoYear = ln_LedFeeDbYY
'    Account_Info.LedgerFee_UptoMonth = ln_LedFeeDbMM
'    Account_Info.Block_Amount = ln_MinBalReqd
'    Account_Info.SyncBal = New_CardBalance
'    Account_Info.Act_ClearBal = New_CardBalance
'    Account_Info.Act_UnClearBal = UnClear_bal
'    Account_Info.Od_Limit = ln_ODLimit
'    Account_Info.OD_Validity = OD_Validity
'    Account_Info.Interest_Rate = ln_ODIntRate
'    Account_Info.ChequeBook_Flag = ln_ChqBookFlag
'    Account_Info.AddOD_Limit = ln_AddnlODLimit
'    Account_Info.AddOD_Validity = OD_Adnl_Validity
'    Account_Info.AddOD_InterestRate = ln_AddnlODIntRate
'    Account_Info.Sync_Date = Server_Date
'    Account_Info.Sync_Time = Int_Server_Time
'    Account_Info.Sync_TillDate = Server_Date
'    Account_Info.Sync_TillTime = Int_Server_Time
'    Call Revise_Account_Pool(Account_Info)
'Acnt_Sync_Over:
'
'    ' =============================================
'    ' Sync Transactions
'    ' =============================================
'    ' ----------------------------------------------
'    ' First of all Remove ALL Transactions from Card
'    ' ----------------------------------------------
'    Tran_Pool_Knt = 0
'
'    ' ------------------------------------
'    ' Insert ALL Unposted Card Txn in Card
'    ' ------------------------------------
'    Sqlstr = "select * from " & MyClass.gUnifyDb & "unposted_card_txn" & _
'                " where txn_hbr_cd=" & Account_Info.Home_Branch & " and cust_idno =" & Account_Info.Cust_Id & _
'                " and type_code=" & Account_Info.Account_Type & " and ac_srno=" & Account_Info.Account_No & " Order by txn_no"
'    Call Fire_Sql(Sqlstr, Rs_Unposted, Sql_Error, MyClass.Connection_No, recs_read)
'    If Sql_Error <> 0 Then GoTo Err_Exit
'    Do While Not Rs_Unposted.EOF
'        ' Insert Transaction in Card
'        Tran_Pool(0).Cheque_Number = IIf(IsNull(Rs_Unposted!Chq_No), 0, Rs_Unposted!Chq_No)
'        Tran_Pool(0).Effective_Date = IIf(IsNull(Rs_Unposted!Txn_Clear_Date), CDate("01-01-1920"), Rs_Unposted!Txn_Clear_Date)
'        Tran_Pool(0).History_Flag = 0
'        Tran_Pool(0).Loan_TransferFlag = IIf(IsNull(Rs_Unposted!Trans_Loan_Flag), 0, Rs_Unposted!Trans_Loan_Flag)
'        Tran_Pool(0).Tr_Amount1 = IIf(IsNull(Rs_Unposted!Txn_Amt), 0, Rs_Unposted!Txn_Amt)
'        Tran_Pool(0).Tr_Amount2 = IIf(IsNull(Rs_Unposted!Txn_Bnk_Chg), 0, Rs_Unposted!Txn_Bnk_Chg)
'        Tran_Pool(0).Transacting_Branch = IIf(IsNull(Rs_Unposted!Txn_Br_Code), 0, Rs_Unposted!Txn_Br_Code)
'        Tran_Pool(0).Transaction_Code = IIf(IsNull(Rs_Unposted!Txn_Code), "", Rs_Unposted!Txn_Code)
'        Tran_Pool(0).Transaction_Date = IIf(IsNull(Rs_Unposted!Txn_Date), CDate("01-01-1920"), Rs_Unposted!Txn_Date)
'        Tran_Pool(0).Transaction_No = IIf(IsNull(Rs_Unposted!Txn_No), 0, Rs_Unposted!Txn_No)
'        '*Call Move_T2I(Format(Rs_Unposted!Txn_Time, "HH:MM"), Tran_Pool(0).Transaction_Time)
'        Tran_Pool(0).Transaction_Time = IIf(IsNull(Rs_Unposted!Txn_Time), 0, Val(Rs_Unposted!Txn_Time))
'
'        Tran_Pool_Knt = Tran_Pool_Knt + 1
'        Tran_Pool(Tran_Pool_Knt) = Tran_Pool(0)
'        Rs_Unposted.MoveNext
'    Loop
'
'    ' ---------------------------------------------------------------
'    ' Select ALL Future Date TXN from D/B and INSERT them in the card
'    ' ---------------------------------------------------------------
'    Sqlstr = "select * from " & MyClass.gUnifyDb & "nsav_txn" & _
'                " where txn_hbr_cd=" & Account_Info.Home_Branch & " and cust_idno =" & Account_Info.Cust_Id & _
'                " and type_code=" & Account_Info.Account_Type & " and ac_srno=" & Account_Info.Account_No & _
'                " and txn_clear_date >'" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "'" & " and txn_delete_flag = 0 order by txn_no"
'    Call Fire_Sql(Sqlstr, Rs_NsavTxn, Sql_Error, MyClass.Connection_No, recs_read)
'    If Sql_Error <> 0 Then GoTo Err_Exit
'    Net_FutureAmt = 0
'    Num_FutureTxn = 0
'    Do While Not Rs_NsavTxn.EOF
'        ln_TransferLoan = 0
'        If Rs_NsavTxn!Trans_ln_Ac_SrNo > 0 Then ln_TransferLoan = 1
'        ls_TxnTime = get_Formated_Time(Val(Rs_NsavTxn!Txn_Time))
'        '*Call Move_T2I(Format(ls_TxnTime, "HH:MM"), Tran_Time)
'        Tran_Time = IIf(IsNull(Rs_NsavTxn!Txn_Time), 0, Val(Rs_NsavTxn!Txn_Time))
'        Tran_Pool_Knt = Tran_Pool_Knt + 1
'        Tran_Pool(Tran_Pool_Knt).Cheque_Number = IIf(IsNull(Rs_NsavTxn!Chq_No), 0, Rs_NsavTxn!Chq_No)
'        Tran_Pool(Tran_Pool_Knt).Effective_Date = IIf(IsNull(Rs_NsavTxn!Txn_Clear_Date), CDate("01-01-1920"), Rs_NsavTxn!Txn_Clear_Date)
'        Tran_Pool(Tran_Pool_Knt).History_Flag = 0
'        Tran_Pool(Tran_Pool_Knt).Loan_TransferFlag = ln_TransferLoan
'        Tran_Pool(Tran_Pool_Knt).Tr_Amount1 = IIf(IsNull(Rs_NsavTxn!Txn_Amt), 0, Rs_NsavTxn!Txn_Amt)
'        Tran_Pool(Tran_Pool_Knt).Tr_Amount2 = IIf(IsNull(Rs_NsavTxn!Txn_Bnk_Chg), 0, Rs_NsavTxn!Txn_Bnk_Chg)
'        Tran_Pool(Tran_Pool_Knt).Transacting_Branch = IIf(IsNull(Rs_NsavTxn!Txn_Br_Code), 0, Rs_NsavTxn!Txn_Br_Code)
'        Tran_Pool(Tran_Pool_Knt).Transaction_Code = IIf(IsNull(Rs_NsavTxn!Txn_Code), "", Rs_NsavTxn!Txn_Code)
'        Tran_Pool(Tran_Pool_Knt).Transaction_Date = IIf(IsNull(Rs_NsavTxn!Txn_Date), CDate("01-01-1920"), Rs_NsavTxn!Txn_Date)
'        Tran_Pool(Tran_Pool_Knt).Transaction_No = IIf(IsNull(Rs_NsavTxn!Txn_No), 0, Rs_NsavTxn!Txn_No)
'        Tran_Pool(Tran_Pool_Knt).Transaction_Time = Tran_Time
'        Num_FutureTxn = Num_FutureTxn + 1
'        Net_FutureAmt = Net_FutureAmt + Tran_Pool(Tran_Pool_Knt).Tr_Amount1
'        Rs_NsavTxn.MoveNext
'    Loop
'
'    ' Revise Pool of Card Library
'    Call Revise_Tran_Pool(Tran_Pool_Knt, Tran_Pool())
'
'    ' ====================================
'    ' We can Copy History Transactions Now
'    ' ====================================
'
'     Sqlstr = "select * from " & MyClass.gUnifyDb & "nsav_txn" & _
'                " where txn_hbr_cd=" & Account_Info.Home_Branch & " and cust_idno =" & Account_Info.Cust_Id & _
'                " and type_code=" & Account_Info.Account_Type & " and ac_srno=" & Account_Info.Account_No & _
'                " and txn_clear_date <='" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "'" & " and txn_clear_date >'" & _
'                Format(MyClass.Branch_Working_Date - 30, "dd-mmm-yyyy") & "' and txn_delete_flag = 0 order by txn_date desc, txn_no desc"
'    Call Fire_Sql(Sqlstr, Rs_NsavTxn, Sql_Error, MyClass.Connection_No, recs_read)
'    If Sql_Error <> 0 Then GoTo Err_Exit
'    Tran_Pool_Knt = 0
'    Do While Not Rs_NsavTxn.EOF
'        ln_TransferLoan = 0
'        If Rs_NsavTxn!Trans_ln_Ac_SrNo > 0 Then ln_TransferLoan = 1
'        '*ls_TxnTime = Format(Rs_NsavTxn!Txn_Time, "HH:MM")
'        '*Call Move_T2I(Format(ls_TxnTime, "HH:MM"), Tran_Time)
'        Tran_Time = IIf(IsNull(Rs_NsavTxn!Txn_Time), 0, Val(Rs_NsavTxn!Txn_Time))
'
'        ' Do not write more than 100 History Transactions
'        If Tran_Pool_Knt >= 100 Then GoTo History_Over
'        Tran_Pool_Knt = Tran_Pool_Knt + 1
'        Tran_Pool(Tran_Pool_Knt).Cheque_Number = IIf(IsNull(Rs_NsavTxn!Chq_No), 0, Rs_NsavTxn!Chq_No)
'        Tran_Pool(Tran_Pool_Knt).Effective_Date = IIf(IsNull(Rs_NsavTxn!Txn_Clear_Date), CDate("01-01-1920"), Rs_NsavTxn!Txn_Clear_Date)
'        Tran_Pool(Tran_Pool_Knt).History_Flag = 1
'        Tran_Pool(Tran_Pool_Knt).Loan_TransferFlag = ln_TransferLoan
'        Tran_Pool(Tran_Pool_Knt).Tr_Amount1 = IIf(IsNull(Rs_NsavTxn!Txn_Amt), 0, Rs_NsavTxn!Txn_Amt)
'        Tran_Pool(Tran_Pool_Knt).Tr_Amount2 = IIf(IsNull(Rs_NsavTxn!Txn_Bnk_Chg), 0, Rs_NsavTxn!Txn_Bnk_Chg)
'        Tran_Pool(Tran_Pool_Knt).Transacting_Branch = IIf(IsNull(Rs_NsavTxn!Txn_Br_Code), 0, Rs_NsavTxn!Txn_Br_Code)
'        Tran_Pool(Tran_Pool_Knt).Transaction_Code = IIf(IsNull(Rs_NsavTxn!Txn_Code), "", Rs_NsavTxn!Txn_Code)
'        Tran_Pool(Tran_Pool_Knt).Transaction_Date = IIf(IsNull(Rs_NsavTxn!Txn_Date), CDate("01-01-1920"), Rs_NsavTxn!Txn_Date)
'        Tran_Pool(Tran_Pool_Knt).Transaction_No = IIf(IsNull(Rs_NsavTxn!Txn_No), 0, Rs_NsavTxn!Txn_No)
'        Tran_Pool(Tran_Pool_Knt).Transaction_Time = Tran_Time
'        Rs_NsavTxn.MoveNext
'    Loop
'
'History_Over:
'
'    Call Revise_Hist_Pool(Tran_Pool_Knt, Tran_Pool())
'
'    Call Update_FFBSCard(Int_Err_Flag)
'    If Int_Err_Flag <> 0 Then GoTo Err_Exit
'
'    'Update Sync Date & Time in Account Master
'    Sqlstr = "update " & MyClass.gUnifyDb & "nsav_account" & _
'                " set sync_data_date='" & Format(Server_Date, "dd-mmm-yyyy") & "'" & _
'                ", sync_data_time=" & Format(Server_Time, "HHMM") & "" & _
'                ",sync_done_date='" & Format(Server_Date, "dd-mmm-yyyy") & "'" & _
'                ", sync_done_time=" & Format(Server_Time, "HHMM") & "" & _
'                ", clear_sync_bal = " & New_CardBalance & _
'                ", unclear_net_tr_amt = " & Net_FutureAmt & _
'                ", no_of_unclear_tran = " & Num_FutureTxn & _
'                " where br_code=" & Account_Info.Home_Branch & _
'                " and cust_idno =" & Account_Info.Cust_Id & _
'                " and type_code=" & Account_Info.Account_Type & _
'                " and ac_srno=" & Account_Info.Account_No
'    Call Fire_Sql(Sqlstr, Rs_Account, Sql_Error, MyClass.Connection_No, recs_read)
'    If Sql_Error <> 0 Then GoTo Err_Exit
'
'    'Insert Sync Done Info for Export
'    'First delete record and Then Insert in both hourly & daily
'
'    Sqlstr = " delete from " & MyClass.gUnifyDb & "export_syncdone_hr where card_no = " & Account_Info.Card_No
'    Call Fire_Sql(Sqlstr, Rs_Set, Sql_Error, MyClass.Connection_No, recs_read)
'    If Sql_Error <> 0 Then GoTo Err_Exit
'
'    Sqlstr = " delete from " & MyClass.gUnifyDb & "export_syncdone_dl where card_no=" & Account_Info.Card_No
'    Call Fire_Sql(Sqlstr, Rs_Set, Sql_Error, MyClass.Connection_No, recs_read)
'    If Sql_Error <> 0 Then GoTo Err_Exit
'
'    'Now insert the record
'    Sqlstr = "Insert into " & MyClass.gUnifyDb & "export_syncdone_hr " & _
'             " (card_no,hbr_cd,cust_idno,type_code,ac_srno,br_code,sync_data_date,sync_data_time, " & _
'                " sync_done_date,sync_done_time,canflag) values ( " & _
'                Account_Info.Card_No & "," & Account_Info.Home_Branch & _
'                "," & Account_Info.Cust_Id & "," & Account_Info.Account_Type & _
'                "," & Account_Info.Account_No & _
'                "," & MyClass.Unit_Code & _
'                ",'" & Format(Server_Date, "dd-mmm-yyyy") & "'" & _
'                "," & Format(Server_Time, "HHMM") & "" & _
'                ",'" & Format(Server_Date, "dd-mmm-yyyy") & "'" & _
'                "," & Format(Server_Time, "HHMM") & "" & "," & 0 & ")"
'    Call Fire_Sql(Sqlstr, Rs_Set, Sql_Error, MyClass.Connection_No, recs_read)
'    If Sql_Error <> 0 Then GoTo Err_Exit
'
'    'Now insert the record
'    Sqlstr = "Insert into " & MyClass.gUnifyDb & "export_syncdone_dl" & _
'             " (card_no,hbr_cd,cust_idno,type_code,ac_srno,br_code,sync_data_date,sync_data_time, " & _
'                " sync_done_date,sync_done_time,canflag) values ( " & _
'                Account_Info.Card_No & "," & Account_Info.Home_Branch & _
'                "," & Account_Info.Cust_Id & "," & Account_Info.Account_Type & _
'                "," & Account_Info.Account_No & _
'                "," & MyClass.Unit_Code & _
'                ",'" & Format(Server_Date, "dd-mmm-yyyy") & "'" & _
'                "," & Format(Server_Time, "HHMM") & "" & _
'                ",'" & Format(Server_Date, "dd-mmm-yyyy") & "'" & _
'                "," & Format(Server_Time, "HHMM") & "" & "," & 0 & ")"
'    Call Fire_Sql(Sqlstr, Rs_Set, Sql_Error, MyClass.Connection_No, recs_read)
'    If Sql_Error <> 0 Then GoTo Err_Exit
'
'    Pn_ErrFlag = 0
'    Exit Sub
'
'Err_Exit:
'    Pn_ErrFlag = 1
'    If err.Number = 0 Then Exit Sub
'    Call errHandler("Savings / Sync_At_Home")
'    Exit Sub
'End Sub
'Public Sub Sync_At_Remote(ByRef Account_Info As UnPacked_AccountRecord, ByRef Pn_ErrFlag As Integer)
'Dim Rs_HotList As New ADODB.Recordset, Rs_Set As New ADODB.Recordset, Rs_LoanPay As New ADODB.Recordset
'Dim Sqlstr As String
'' Variables Introduced by AKS
'Dim My_Tran As UnPacked_TranRecord
'Dim Loan_Pool(9) As UnPacked_LoanRecord, Loan_Pool_Knt As Byte
'Dim Hist_Pool(500) As UnPacked_TranRecord, Hist_Pool_Knt As Integer
'
'Dim LastSync_TillDate As Date, LastSync_TillTime As String
'Dim Int_Var As Integer, Int_Var_2 As Integer, Upd_Trans As Byte, Upd_Loan As Byte, JK As Integer
'Dim Loan_Type As Integer, Loan_Account_No As Long
'
'On Error GoTo Err_Exit
'
'    Pn_ErrFlag = 0
'    If Account_Info.Card_No = 0 Then Exit Sub
'    LastSync_TillDate = Account_Info.Sync_TillDate
'    Call Move_I2T(Account_Info.Sync_TillTime, LastSync_TillTime)
'
'    ' ========================================================================================
'    ' Read History Transactions also, in case of Remote Branch Processing
'    ' ========================================================================================
'    Call Read_MDB_History(Hist_Pool_Knt, Hist_Pool())
'
'    ' ========================================================================================
'    ' Insert Hotlist Transactions on Card (Where Transaction was inserted after Lasy Sync Date)
'    ' ========================================================================================
'
'    'First Delete confirmed Hotlist transactions from Database before last sync data date & time
'    Sqlstr = "Delete from " & MyClass.gUnifyDb & "hotlist_txn " & _
'            " where txn_hbr_cd=" & Account_Info.Home_Branch & " and cust_idno =" & Account_Info.Cust_Id & _
'            " and type_code=" & Account_Info.Account_Type & " and ac_srno=" & Account_Info.Account_No & _
'            " and ((txn_ins_date = '" & Format(LastSync_TillDate, "dd-mmm-yyyy") & "' and txn_ins_time < " & Account_Info.Sync_TillTime & ")" & _
'            " or (txn_ins_date < '" & Format(LastSync_TillDate, "dd-mmm-yyyy") & "'))" & _
'            " and confirm_flag = 1 "
'    Call Fire_Sql(Sqlstr, Rs_HotList, Sql_Error, MyClass.Connection_No, recs_read)
'    If Sql_Error <> 0 Then Call Abort_Program(Me, "Sync_At_Remote_1")
'
'    'Read Hotlist transactions (after last sync data date & time) and Insert into Trans table of MDB
'    Sqlstr = "Select * from " & MyClass.gUnifyDb & "hotlist_txn " & _
'            " where txn_hbr_cd=" & Account_Info.Home_Branch & " and cust_idno =" & Account_Info.Cust_Id & _
'            " and type_code=" & Account_Info.Account_Type & " and ac_srno=" & Account_Info.Account_No
'    Call Fire_Sql(Sqlstr, Rs_HotList, Sql_Error, MyClass.Connection_No, recs_read)
'    If Sql_Error <> 0 Then Call Abort_Program(Me, "Sync_At_Remote_2")
'
'    Upd_Trans = 0
'
'    ' If any records found then write them in mdb so that they can be updated on card
'    Do While Not Rs_HotList.EOF
'        Call Find_Tran_In_MDB(Rs_HotList!Txn_Br_Code, Rs_HotList!Txn_Date, Rs_HotList!Txn_No, Int_Var)
'        'First check whether This transaction already exists on card '''' If Not Found on Card Then Insert if transaction is confirmed
'        If Int_Var = 0 And Rs_HotList!Confirm_Flag >= 1 Then
'            '''' Check If we have another credit transaction on card of same date, amount & txn_code
'            If Rs_HotList!Txn_Amt > 0 Then
'                Call Find_Tran_byAmt_In_MDB(Rs_HotList!Txn_Br_Code, Rs_HotList!Txn_Date, Rs_HotList!Txn_Code, Rs_HotList!Txn_Amt, Int_Var_2)
'                ''' If Record Found, Do not insert this hotlist_txn on card
'                If Int_Var_2 > 0 Then GoTo Proceed
'            End If
'            '''' Insert Txn On card
'            My_Tran.Cheque_Number = IIf(IsNull(Rs_HotList!Chq_No), 0, Rs_HotList!Chq_No)
'            My_Tran.Effective_Date = Rs_HotList!Txn_Clear_Date
'            My_Tran.History_Flag = 0
'            My_Tran.Loan_TransferFlag = 0
'            My_Tran.Tr_Amount1 = Rs_HotList!Txn_Amt
'            My_Tran.Tr_Amount2 = IIf(IsNull(Rs_HotList!Txn_Bnk_Chg), 0, Rs_HotList!Txn_Bnk_Chg)
'            My_Tran.Transacting_Branch = Rs_HotList!Txn_Br_Code
'            My_Tran.Transaction_Code = IIf(IsNull(Rs_HotList!Txn_Code), "", Rs_HotList!Txn_Code)
'            My_Tran.Transaction_Date = Rs_HotList!Txn_Date
'            My_Tran.Transaction_No = Rs_HotList!Txn_No
'            My_Tran.Transaction_Time = 0
'            Call Insert_Tran_IN_Pool(My_Tran)
'            Upd_Trans = 1   'Card Transaction Need to be Updated
'        End If
'
'Proceed:
'        If Int_Var > 0 Or (Int_Var = 0 And Rs_HotList!Confirm_Flag >= 1) Then
'            'Delete this Record from HotList Transactions : it is already there on card
'            Sqlstr = "Delete from " & MyClass.gUnifyDb & "hotlist_txn Where" & _
'                    " txn_br_code =" & Rs_HotList!Txn_Br_Code & " and txn_date=" & "'" & Format(Rs_HotList!Txn_Date, "dd-mmm-yyyy") & "'" & _
'                    " and txn_no =" & Rs_HotList!Txn_No
'            Call Fire_Sql(Sqlstr, Rs_Set, Sql_Error, MyClass.Connection_No, recs_read)
'            If Sql_Error <> 0 Then Call Abort_Program(Me, "Sync_At_Remote_3")
'        End If
'        Rs_HotList.MoveNext
'    Loop
'
'    ' =====================================================================================
'    ' Incorporate Loan Instalment Payment Information on Card (Loan_Pay_Aliens table)
'    ' =====================================================================================
'
'    'Read the Loan Information from Card
'    Call Read_MDB_Loans(Loan_Pool_Knt, Loan_Pool)
'    Upd_Loan = 0
'
'    JK = 0
'
'Process_Next_Loan:
'
'    JK = JK + 1
'    If JK > Loan_Pool_Knt Then GoTo Sync_Over
'
'    Loan_Type = Loan_Pool(JK).Account_Type
'    Loan_Account_No = Loan_Pool(JK).Account_No
'
'    'Check if there is any Loan Payment Information of this Account
'     Sqlstr = "select * from " & MyClass.gUnifyDb & "loan_pay_alliens " & _
'                 " where br_code=" & Account_Info.Home_Branch & _
'                 " and type_code =" & Loan_Type & " and ac_srno =" & Loan_Account_No
'     Call Fire_Sql(Sqlstr, Rs_LoanPay, Sql_Error, MyClass.Connection_No, recs_read)
'     If Sql_Error <> 0 Then Call Abort_Program(Me, "Sync_At_Remote_4")
'
'     If Rs_LoanPay.EOF = False Then
'         ' Revise This Loan Record
'         If Rs_LoanPay!Next_Inst_Date > Loan_Pool(JK).Next_InstDate Or Rs_LoanPay!Next_Inst_Date = #1/1/1920# Then
'            Loan_Pool(JK).Next_InstDate = Rs_LoanPay!Next_Inst_Date
'            Upd_Loan = 1  'Card Loan Records Need to be Updated
'            'Delete this Record from Loan Pay Table  : we have transferred this info on card now
'            Sqlstr = "Delete from " & MyClass.gUnifyDb & "loan_pay_alliens " & _
'                      " where br_code=" & Account_Info.Home_Branch & _
'                      " and type_code =" & Loan_Type & _
'                      " and ac_srno =" & Loan_Account_No
'            Call Fire_Sql(Sqlstr, Rs_Set, Sql_Error, MyClass.Connection_No, recs_read)
'            If Sql_Error <> 0 Then Call Abort_Program(Me, "Sync_At_Remote_5")
'        End If
'    End If
'
'    '''' If Next Installment date = 1/1/1920 in card then also delete loan record from card
'    If Loan_Pool(JK).Next_InstDate = #1/1/1920# Then
'        ' Delete This Loan Record
'        Call Purge_Loan(Loan_Pool(), Loan_Pool_Knt, JK)
'        JK = JK - 1
'        Upd_Loan = 1  'Card Loan Records Need to be Updated
'     End If
'     GoTo Process_Next_Loan
'
'Sync_Over:
'
'    If Upd_Loan >= 1 Then Call Revise_Loan_Pool(Loan_Pool_Knt, Loan_Pool())
'    If Upd_Trans >= 1 Or Upd_Loan >= 1 Then Call Update_FFBSCard(Pn_ErrFlag)
'
'    ' ================================================
'    ' Now Work Out Card Baslance
'    ' ================================================
'
'    Call Calculate_CardBalance
'
'    Call Read_MDB_Account(Account_Info)
'    ' ===============================================================================================
'    ' Read unconfirmed hotlist_transactions which are not there on card & take effect in balance
'    ' We have not written Unconfirmed Hotlist Transactions on card
'    ' We will take effect of w/d only that too of last 7 days. Comm. should have come
'    ' ===============================================================================================
'
'    '''' First clear Transactions
'    Sqlstr = "Select sum(txn_amt), sum (txn_bnk_chg) from " & MyClass.gUnifyDb & "hotlist_txn " & _
'            " where txn_hbr_cd=" & Account_Info.Home_Branch & _
'            " and cust_idno =" & Account_Info.Cust_Id & _
'            " and type_code=" & Account_Info.Account_Type & _
'            " and ac_srno=" & Account_Info.Account_No & _
'            " and txn_clear_date <= '" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "'" & _
'            " and txn_date >= '" & Format(MyClass.Branch_Working_Date - 30, "dd-mmm-yyyy") & "'" & _
'            " and confirm_flag = 0 and txn_amt < 0"
'    Call Fire_Sql(Sqlstr, Rs_HotList, Sql_Error, MyClass.Connection_No, recs_read)
'    If Sql_Error <> 0 Then Call Abort_Program(Me, "Sync_At_Remote_6")
'    If Rs_HotList.EOF = False Then
'        Account_Info.Act_ClearBal = Account_Info.Act_ClearBal + IIf(IsNull(Rs_HotList.Fields(0)), 0, Rs_HotList.Fields(0)) + IIf(IsNull(Rs_HotList.Fields(1)), 0, Rs_HotList.Fields(1))
'    End If
'
'    '''' Now  Unclear Transactions
'    Sqlstr = "Select sum(txn_amt), sum (txn_bnk_chg) from " & MyClass.gUnifyDb & "hotlist_txn " & _
'            " where txn_hbr_cd=" & Account_Info.Home_Branch & _
'            " and cust_idno =" & Account_Info.Cust_Id & _
'            " and type_code=" & Account_Info.Account_Type & _
'            " and ac_srno=" & Account_Info.Account_No & _
'            " and txn_clear_date > '" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "'" & _
'            " and confirm_flag = 0 "
'    Call Fire_Sql(Sqlstr, Rs_HotList, Sql_Error, MyClass.Connection_No, recs_read)
'    If Sql_Error <> 0 Then Call Abort_Program(Me, "Sync_At_Remote_7")
'    If Rs_HotList.EOF = False Then
'        Account_Info.Act_UnClearBal = Account_Info.Act_UnClearBal + IIf(IsNull(Rs_HotList.Fields(0)), 0, Rs_HotList.Fields(0)) + IIf(IsNull(Rs_HotList.Fields(1)), 0, Rs_HotList.Fields(1))
'    End If
'
'    Call Revise_Account_Pool(Account_Info)
'    Exit Sub
'
'Err_Exit:
'    Pn_ErrFlag = 1
'    If err.Number = 0 Then Exit Sub
'    Call errHandler("Savings / Sync_At_Remote")
'    Exit Sub
'End Sub



'Public Sub GET_AccountSignatoryinfo(ByVal Pn_BrCode As Integer, ByVal Pn_CustId As Long, _
'                                    ByRef Ps_SignInfo() As UnPacked_SignatoryRecord, ByRef Num_Signatories As Byte)
'
'Dim Sqlstr As String, rs_Signatory As New ADODB.Recordset
'Dim Sig_FstName As String, Sig_Surname As String, Sig_MidName As String
'Dim I As Byte
'
'    Num_Signatories = 0
'    '''' Initialize the Array
'    For I = 1 To 4
'        Ps_SignInfo(I).Sr_Number = 0
'        Ps_SignInfo(I).Name = " "
'        Ps_SignInfo(I).ID_CardNo = " "
'        Ps_SignInfo(I).Passport_No = " "
'        Ps_SignInfo(I).DL_No = " "
'        Ps_SignInfo(I).Thumb_Flag = 0
'    Next I
'    If Set_Connection(Pn_BrCode) <> 0 Then Exit Sub
'
'    Sqlstr = "select * from " & UseDbPrefix & "signatory where sig_br_cd=" & Pn_BrCode & _
'                " and cust_idno=" & Pn_CustId & " order by sig_srno "
'    Call Fire_Sql(Sqlstr, rs_Signatory, Sql_Error, Use_Connection, recs_read)
'    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/GET_AccountSignatoryInfo_1")
'    Do While Not rs_Signatory.EOF
'        If Num_Signatories > 4 Then Exit Sub
'        Num_Signatories = Num_Signatories + 1
'        I = rs_Signatory!sig_srno
'        If I < 1 Or I > 4 Then Exit Sub
'        Ps_SignInfo(I).Sr_Number = rs_Signatory!sig_srno
'        Sig_FstName = Trim$(IIf(IsNull(rs_Signatory!Sig_FstName), "", rs_Signatory!Sig_FstName))
'        Sig_MidName = Trim$(IIf(IsNull(rs_Signatory!Sig_MidName), "", rs_Signatory!Sig_MidName))
'        Sig_Surname = Trim$(IIf(IsNull(rs_Signatory!Sig_Surname), "", rs_Signatory!Sig_Surname))
'
'        Ps_SignInfo(I).Name = Get_Conv_CustName(Sig_FstName, Sig_MidName, Sig_Surname)
'        Ps_SignInfo(I).ID_CardNo = IIf(IsNull(rs_Signatory!Sig_Id_No), " ", rs_Signatory!Sig_Id_No)
'        Ps_SignInfo(I).Passport_No = IIf(IsNull(rs_Signatory!Sig_Passport_No), " ", rs_Signatory!Sig_Passport_No)
'        Ps_SignInfo(I).DL_No = IIf(IsNull(rs_Signatory!Sig_Drv_Lic_No), " ", rs_Signatory!Sig_Drv_Lic_No)
'        Ps_SignInfo(I).Thumb_Flag = IIf(IsNull(rs_Signatory!Sig_Thumb_Flag), 0, rs_Signatory!Sig_Thumb_Flag)
'
'        If Ps_SignInfo(I).Thumb_Flag = 1 Then
'            Ps_SignInfo(I).ID_CardNo = Trim$(IIf(IsNull(rs_Signatory!Sig_Id_No), "", rs_Signatory!Sig_Id_No))
'            Ps_SignInfo(I).Passport_No = Trim$(IIf(IsNull(rs_Signatory!Sig_Passport_No), "", rs_Signatory!Sig_Passport_No))
'            Ps_SignInfo(I).DL_No = Trim$(IIf(IsNull(rs_Signatory!Sig_Drv_Lic_No), "", rs_Signatory!Sig_Drv_Lic_No))
'            If Ps_SignInfo(I).ID_CardNo = "" And Ps_SignInfo(I).Passport_No = "" And Ps_SignInfo(I).DL_No = "" Then
'                MsgBox "Relevant Information Not Found For Signatory " & Ps_SignInfo(I).Name & " Having Thumb Impression Flag On"
'                Exit Sub
'            End If
'        End If
'        rs_Signatory.MoveNext
'    Loop
'    Exit Sub
'End Sub

Public Sub Card_HasBeen_Inserted(ByRef CardOpen_Flag As Byte, ByRef CardNo As Long, _
                                ByRef Hotlist_Type As Byte, ByRef Err_Flag As Integer)
Dim Sqlstr As String
Dim Rs_HotList As New ADODB.Recordset
Dim My_Account As UnPacked_AccountRecord
Dim HotList_CardNo As Long, HotList_Date As Date

    Err_Flag = 0
    Hotlist_Type = 0
    
    ' ===============================================================
    ' Open Card and Tally Card  Number from Database
    ' ===============================================================
    CardOpen_Flag = 0
    CardNo = 0
    Call Open_FFBSCard(MyClass.Unit_Code, CardOpen_Flag, CardNo, Err_Flag)
    If CardOpen_Flag <> 1 Or Err_Flag <> 0 Then GoTo Err_Exit
    
    Call Read_MDB_Account(My_Account)
    If CardNo <> My_Account.Card_No Then
        MsgBox " Mismatch in Card No and Account Data in Card"
        GoTo Err_Exit
    End If
    
    ' =======================================
    'See if this card / customer is hotlisted
    '========================================
    Sqlstr = "select * from " & MyClass.gUnifyDb & "hotlist " & _
            " where hbr_code=" & My_Account.Home_Branch & " and cust_idno =" & My_Account.Cust_Id & _
            " and type_code=" & My_Account.Account_Type & " and ac_srno=" & My_Account.Account_No & _
            " and canflag = 0 order by hot_type"
    Call Fire_Sql(Sqlstr, Rs_HotList, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then GoTo Err_Exit
    Do While Not Rs_HotList.EOF
        Hotlist_Type = Rs_HotList!Hot_Type
        HotList_CardNo = IIf(IsNull(Rs_HotList!Card_No), 0, Rs_HotList!Card_No)
        HotList_Date = IIf(IsNull(Rs_HotList!Hot_Date), CDate(#1/1/1920#), Rs_HotList!Hot_Date)
        
        'If card has been hotlisted, verify the cardno
        If Hotlist_Type < 11 And HotList_CardNo <> CardNo Then
            Hotlist_Type = 0
            GoTo Next_Hotlist
        End If
        Select Case Hotlist_Type
            Case 1
                'change card status
                Call Update_CardStatus(50)
                MsgBox " This card has been reported as Lost. Please Forfeit it ! ", vbCritical + vbDefaultButton1, " Important Information"
            Case 2
            'added on 27/03/2003
               If HotList_Date >= CDate(#3/26/2003#) And HotList_Date <= CDate(#3/27/2003#) Then
                    If My_Account.Home_Branch <> MyClass.Unit_Code Then MsgBox " Please present this Card at Home Branch !"
                    If My_Account.Home_Branch = MyClass.Unit_Code Then GoTo Next_Hotlist
               Else
                    MsgBox " There has been a change in Signatories in This Account! Card Needs to be Reissued"
               End If
            Case 3
                 'change card status
                Call Update_CardStatus(50)
                MsgBox " This Account has been Closed without Surrendering the Card. Please Forfeit it !", vbCritical + vbDefaultButton1, " Important Information"
        End Select
        If Hotlist_Type < 11 Then GoTo Err_Exit
        Exit Do
Next_Hotlist:
        Rs_HotList.MoveNext
    Loop

    ' ================================================
    ' Synchronise Card Now
    ' ================================================
    If My_Account.Home_Branch = MyClass.Unit_Code Then Call Sync_At_Home(My_Account, Err_Flag)
    If My_Account.Home_Branch <> MyClass.Unit_Code Then Call Sync_At_Remote(My_Account, Err_Flag)
    If Err_Flag <> 0 Then GoTo Err_Exit
    
Proc_Exit:
    
    Screen.MousePointer = vbDefault
    Err_Flag = 0
    Exit Sub
    
Err_Exit:
    
    If Hotlist_Type = 0 Then Err_Flag = 1
    Exit Sub
End Sub
Public Sub Cap_Fluc_Loan_Interest(ByVal Pn_Month As Integer, ByVal Pn_Year As Integer, _
                                   ByVal WorkingDate As Date, ByRef Pn_ErrorFlag As Byte)

Dim Sqlstr As String, Recset As New ADODB.Recordset, RecSetfluc As New ADODB.Recordset
Dim Int_Date_From As Date
Dim S_br_code As Integer, S_Cust_Idno As Long, S_Type_Code As Integer, S_Ac_Srno As Integer
Dim Open_Date As Date, Ist_Dateof_Month As Date, Last_Dateof_Month As Date
Dim S_Od_limit As Currency, S_Od_Intrate As Currency, S_Addn_Limit As Currency, S_Addn_IntRate As Currency
Dim S_Interest As Currency, S_Catg As String
Dim Cstr_Time As String, Transaction_Time As Integer, ln_TxnNo As Long

    Ist_Dateof_Month = CDate(DateSerial(Pn_Year, Pn_Month, 1))
    Last_Dateof_Month = CDate(DateSerial(Pn_Year, Pn_Month + 1, 1)) - 1

    Pn_ErrorFlag = 1

    Sqlstr = " Select * From " & MyClass.gUnifyDb & "nsav_account Where " & _
          " br_code =" & MyClass.Unit_Code & " and cust_idno >= 0 and cust_idno <= 999999" & _
          " and type_code = 301 and ac_srno >=0 and ac_srno <= 99999 and ac_status <> 9"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Exit Sub
    Do While Not Recset.EOF()
        Open_Date = IIf(IsNull(Recset!Open_Date), "01-01-1920", Recset!Open_Date)
        S_br_code = IIf(IsNull(Recset!Br_Code), 0, Recset!Br_Code)
        S_Cust_Idno = IIf(IsNull(Recset!Cust_IdNo), 0, Recset!Cust_IdNo)
        S_Type_Code = IIf(IsNull(Recset!Type_Code), 0, Recset!Type_Code)
        S_Ac_Srno = IIf(IsNull(Recset!Ac_SrNo), 0, Recset!Ac_SrNo)
        S_Catg = IIf(IsNull(Recset!Ac_Categ), "N", Recset!Ac_Categ)
    
        If Open_Date > Last_Dateof_Month Then GoTo Next_loop

        Sqlstr = " Select * From " & MyClass.gUnifyDb & "fluctuating_loans Where " & _
              " br_code =" & S_br_code & " and cust_idno =" & S_Cust_Idno & _
              " and type_code =" & S_Type_Code & " and ac_srno =" & S_Ac_Srno
        Call Fire_Sql(Sqlstr, RecSetfluc, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Exit Sub
        If RecSetfluc.EOF Then GoTo Next_loop

        S_Od_limit = IIf(IsNull(RecSetfluc!Od_Limit), 0, RecSetfluc!Od_Limit)
        S_Od_Intrate = IIf(IsNull(RecSetfluc!OD_Int_Rate), 0, RecSetfluc!OD_Int_Rate)
        S_Addn_Limit = IIf(IsNull(RecSetfluc!Addnl_Od_Limit), 0, RecSetfluc!Addnl_Od_Limit)
        S_Addn_IntRate = IIf(IsNull(RecSetfluc!addnl_od_int_rate), 0, RecSetfluc!addnl_od_int_rate)
        Int_Date_From = Ist_Dateof_Month
        If Open_Date > Ist_Dateof_Month Then Int_Date_From = Open_Date
        S_Interest = 0
    
        Call Get_Interest_Fluc_Loan(S_br_code, S_Cust_Idno, S_Type_Code, S_Ac_Srno, Last_Dateof_Month, Int_Date_From, _
                                    S_Od_limit, S_Od_Intrate, S_Addn_Limit, S_Addn_IntRate, S_Interest)

        If S_Interest > 0 Then
            S_Interest = 0 - S_Interest
            
            Cstr_Time = Format(Now(), "HH:MM")
            Transaction_Time = CInt(Left$(Cstr_Time, 2)) * 100 + CInt(Mid$(Cstr_Time, 4, 2))
            ln_TxnNo = 0
            Call Post_Transaction(MyClass.Unit_Code, WorkingDate, Transaction_Time, ln_TxnNo, _
                                  MyClass.Unit_Code, S_Cust_Idno, S_Type_Code, S_Ac_Srno, "INT", 0, S_Interest, _
                                  "Capitalise Interest ", WorkingDate, "XXX", 0, "01-01-1900", "", 0, 0, 0, _
                                  0, 0, 0, 0, 0, 0, S_Catg)
        End If

Next_loop:
    
        Recset.MoveNext
    Loop
    Pn_ErrorFlag = 0
    'At the end update the nsav_sysparam table with the fcap month and year
    Sqlstr = " Update " & MyClass.gUnifyDb & "nsav_sysparam Set fcap_month=" & Pn_Month & ", " & _
             " fcap_year=" & Pn_Year & " Where home_branch=" & MyClass.Unit_Code
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then
        Call MyClass.Display_Message("Unable to Update the nsav_sysparam Table")
        Exit Sub
    End If
End Sub
Public Sub Process_Loan_Xtra_Fields()
Dim Sqlstr As String, Loan_Balance As Currency, Unrec_Amt As Currency
Dim Arrear_Amt As Currency, Due_Date As Date, Cbk_Status As Byte
Dim Byte_Flag As Byte, Num_Days As Integer, Upd_Recset As New ADODB.Recordset
Dim Disb_Amt As Currency, Int_Cap As Currency, Bal As Currency
Dim Princ_Rec As Currency, Cap_Int_Rec As Currency
Dim Unrec_Int_Amt As Currency, UnRec_Bank_Chg As Currency
Dim Cap_Bank_Chg As Currency, Cap_Bank_Chg_Rec As Currency
Dim Ln_Status As Byte, Close_Date As Date
Dim Maturity_Date As Date, Last_Int_Comp_Dt As Date
Dim Ln_Categ As String, Adnl_Rate As Currency, Int_Debited As Currency

Dim Ac_Status As Byte
Dim Paid_Amt As Currency
Dim Int_Type As Byte, Base_Code As Integer
Dim Recset As New ADODB.Recordset
Dim Pay_RecSet As New ADODB.Recordset
Dim Install_Recset As New ADODB.Recordset

Dim Knt As Integer, Low_Ac_Type As Integer, Low_Ac_No As Long
Dim Loan_Ac_Type As Integer, Loan_Ac_No As Long, Loan_Rec_Knt As Long
Dim Pay_Ac_Type As Integer, Pay_Ac_No As Long, Pay_Rec_Knt As Long
Dim Inst_Ac_Type As Integer, Inst_Ac_No As Long, Inst_Rec_Knt As Long

    'This procedure process the values for Loan Extra Fields such as
    'Balance Amount,Arrear Amount,Arrear Due Date,CBK Status
    
    Call Open_Info_WIndow("Computing Loan Arrears...")
    
    Sqlstr = "delete from " & MyClass.gUnifyDb & "loan_cbk"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Process_Loan_Xtra_Fields_0")
    
    Sqlstr = "select lm_type_code,lm_ac_srno,lm_cust_idno,lm_category,lm_disb_amt,lm_first_disb_date,lm_maturity_date," & _
        "lm_latest_install_amt,lm_ac_status,lm_install_freq,lm_addnl_int_rate,lm_int_cap,lm_princ_rec,lm_cap_int_rec," & _
        "lm_unrec_int_amt,lm_unrec_bnk_chg,lm_bnk_cap,lm_cap_bnk_rec,lm_close_date,lm_last_int_comp_dt" & _
        " from " & MyClass.gUnifyDb & "laccounts" & _
        " where lm_hbr_cd = " & MyClass.Unit_Code & " and lm_disb_amt <> 0 and lm_ac_status = 0 order by lm_type_code,lm_ac_srno"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Process_Loan_Xtra_Fileds_1")
    If Recset.EOF Then Exit Sub
    Do While Recset.EOF = False
        Call Do_Events
        Loan_Ac_Type = IIf(IsNull(Recset!lm_type_code), 0, Recset!lm_type_code)
        Loan_Ac_No = IIf(IsNull(Recset!lm_ac_srno), 0, Recset!lm_ac_srno)
        
        Call Get_Loan_Balance(MyClass.Unit_Code, Loan_Ac_Type, Loan_Ac_No, MyClass.Branch_Working_Date, Loan_Balance, Unrec_Amt, Byte_Flag)
        If Loan_Balance <= 0 Then GoTo Next_Rec
        Call Get_Loan_Arrear(MyClass.Unit_Code, Loan_Ac_Type, Loan_Ac_No, MyClass.Branch_Working_Date, Arrear_Amt, Due_Date)
        
        Cbk_Status = 0
        Num_Days = 0
        If Due_Date <> #1/1/1900# And Due_Date <= MyClass.Branch_Working_Date Then Num_Days = MyClass.Branch_Working_Date - Due_Date
        
        If Num_Days <= 30 Then
            Cbk_Status = 0
            GoTo Update_Data
        End If

        'Watch
        If Num_Days > 30 And Num_Days <= 90 Then
            Cbk_Status = 1
            GoTo Update_Data
        End If

        'sub standard
        If Num_Days > 90 And Num_Days <= 180 Then
            Cbk_Status = 2
            GoTo Update_Data
        End If

        'doubtful
        If Num_Days > 180 And Num_Days <= 365 Then
            Cbk_Status = 3
            GoTo Update_Data
        End If

        'Loss
        If Num_Days > 365 Then
            Cbk_Status = 4
            GoTo Update_Data
        End If

Update_Data:
        
    
        Call AKS_BeginTrans(MyClass.Connection_No)
        Sqlstr = "insert into " & MyClass.gUnifyDb & "loan_cbk(lc_hbr_cd,lc_type_code,lc_ac_srno,lc_bal_amt,lc_arr_amt,"
        Sqlstr = Sqlstr + "lc_due_date,lc_cbk_status)"
        Sqlstr = Sqlstr + " values(" & MyClass.Unit_Code & "," & Loan_Ac_Type & "," & Loan_Ac_No & "," & Loan_Balance & "," & Arrear_Amt & ","
        Sqlstr = Sqlstr + " '" & Format(Due_Date, "dd-mmm-yyyy") & "'," & Cbk_Status & ")"
        Call Fire_Sql(Sqlstr, Upd_Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Process_Loan_Xtra_Fields_3")
        Call AKS_EndTrans(MyClass.Connection_No)

Next_Rec:

        Recset.MoveNext
    Loop
    
End_Of_Job:

    Call Close_Info_Window
    Call Update_Cbk_Flag(1)
    Exit Sub
    
'    'Find total Payment received against this loan upto arrear date
'    SQLStr = "select ltxn_ac_type_code,ltxn_ac_srno,sum(ltxn_amount) from " & MyClass.gUnifyDb & "ltrans where ltxn_ac_hbr_cd = " & MyClass.Unit_Code & _
'        " and ltxn_rec_type >= 11" & _
'        " and ltxn_effective_date <= '" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "' " & _
'        " group by ltxn_ac_type_code,ltxn_ac_srno"
'    Call Fire_Sql(SQLStr, Pay_RecSet, Sql_Error, MyClass.Connection_No, recs_read)
'    If Sql_Error <> 0 Then Call Abort_Program(, "Process_Loan_Xtra_Fields_1A")
'
'    'Now find loan instalments whose due date is <= arrear date
'    SQLStr = "select pay_type_code,pay_ac_srno,pay_install_due_date,pay_install_amt from " & MyClass.gUnifyDb & "lrepay where pay_hbr_cd = " & MyClass.Unit_Code & _
'            " and pay_install_due_date <='" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "' " & _
'            " order by pay_type_code,pay_ac_srno, pay_install_due_date "
'    Call Fire_Sql(SQLStr, Install_Recset, Sql_Error, MyClass.Connection_No, recs_read)
'    If Sql_Error <> 0 Then Call Abort_Program(, "Process_Loan_Xtra_Fields_1B")
    
'    Loan_Rec_Knt = 0
'    Pay_Rec_Knt = 0
'    Inst_Rec_Knt = 0
'
'    GoSub Read_Loan
'    GoSub Read_Payment
'    GoSub Read_Install
'
'Balance_Line:
'
'    Call Do_Events
'    Low_Ac_Type = Loan_Ac_Type
'    Low_Ac_No = Loan_Ac_No
'    If Pay_Ac_Type < Low_Ac_Type Or (Pay_Ac_Type = Low_Ac_Type And Pay_Ac_No < Low_Ac_No) Then
'        Low_Ac_Type = Pay_Ac_Type
'        Low_Ac_No = Pay_Ac_No
'    End If
'    If Inst_Ac_Type < Low_Ac_Type Or (Inst_Ac_Type = Low_Ac_Type And Inst_Ac_No < Low_Ac_No) Then
'        Low_Ac_Type = Inst_Ac_Type
'        Low_Ac_No = Inst_Ac_No
'    End If
'    If Low_Ac_Type = 9999 And Low_Ac_No = 999999 Then GoTo End_Of_Job
'    Knt = 0
'    If Low_Ac_Type = Loan_Ac_Type And Low_Ac_No = Loan_Ac_No Then Knt = Knt + 1
'    If Low_Ac_Type = Pay_Ac_Type And Low_Ac_No = Pay_Ac_No Then Knt = Knt + 2
'    If Low_Ac_Type = Inst_Ac_Type And Low_Ac_No = Inst_Ac_No Then Knt = Knt + 4
'
'    If Knt = 1 Then GoTo Only_Loan_Master
'    If Knt = 2 Then
'        GoSub Read_Payment
'        GoTo Balance_Line
'    End If
'    If Knt = 3 Then GoTo Loan_Payment_Record
'    If Knt = 4 Then
'        GoSub Read_Install
'        GoTo Balance_Line
'    End If
'    If Knt = 5 Then GoTo Loan_Install_Record
'    If Knt = 6 Then
'        GoSub Read_Payment
'        GoSub Read_Install
'        GoTo Balance_Line
'    End If
'    If Knt = 7 Then GoTo All_Records_Case
'
'
'All_Records_Case:
'        Paid_Amt = IIf(IsNull(Pay_RecSet.Fields(2)), 0, Pay_RecSet.Fields(2))
'        GoTo Process_Routine
'
'Only_Loan_Master:
'
'        Paid_Amt = 0
'        GoTo Process_Routine
'
'Loan_Payment_Record:
'        Paid_Amt = IIf(IsNull(Pay_RecSet.Fields(2)), 0, Pay_RecSet.Fields(2))
'        GoTo Process_Routine
'
'Loan_Install_Record:
'        Paid_Amt = 0
'        GoTo Process_Routine
'
'Process_Routine:
'
'        Disb_Amt = IIf(IsNull(Recset!lm_disb_amt), 0, Recset!lm_disb_amt)
'        Int_Cap = IIf(IsNull(Recset!lm_int_cap), 0, Recset!lm_int_cap)
'        Princ_Rec = IIf(IsNull(Recset!lm_princ_rec), 0, Recset!lm_princ_rec)
'        Cap_Int_Rec = IIf(IsNull(Recset!lm_cap_int_rec), 0, Recset!lm_cap_int_rec)
'        Unrec_Int_Amt = IIf(IsNull(Recset!lm_unrec_int_amt), 0, Recset!lm_unrec_int_amt)
'        UnRec_Bank_Chg = IIf(IsNull(Recset!lm_unrec_bnk_chg), 0, Recset!lm_unrec_bnk_chg)
'        Cap_Bank_Chg = IIf(IsNull(Recset!lm_bnk_cap), 0, Recset!lm_bnk_cap)
'        Cap_Bank_Chg_Rec = IIf(IsNull(Recset!lm_cap_bnk_rec), 0, Recset!lm_cap_bnk_rec)
'        Close_Date = IIf(IsNull(Recset!lm_close_date), #1/1/1900#, Recset!lm_close_date)
'        Maturity_Date = IIf(IsNull(Recset!lm_maturity_date), #1/1/1900#, Recset!lm_maturity_date)
'        Loan_Balance = Disb_Amt + Int_Cap + Unrec_Int_Amt + UnRec_Bank_Chg + Cap_Bank_Chg
'        Loan_Balance = Loan_Balance - Princ_Rec - Cap_Int_Rec - Cap_Bank_Chg_Rec
'        Last_Int_Comp_Dt = IIf(IsNull(Recset!lm_last_int_comp_dt), #1/1/1900#, Recset!lm_last_int_comp_dt)
'        Ln_Status = IIf(IsNull(Recset!lm_ac_status), 0, Recset!lm_ac_status)
'        Ln_Categ = IIf(IsNull(Recset!lm_category), "", Recset!lm_category)
'        Adnl_Rate = IIf(IsNull(Recset!lm_addnl_int_rate), "", Recset!lm_addnl_int_rate)
'
'        Cbk_Status = 0
'        Arrear_Amt = 0
'        Due_Date = #1/1/1900#
'        If Loan_Balance = 0 Then GoTo Update_Data
'
'        'if arrear date >= Maturity date then complete loan balance is arrear
'        If MyClass.Branch_Working_Date >= Maturity_Date Then
'            ' Add interest upto today in loan balance
'            Int_Debited = 0
''            If Last_Int_Comp_Dt < MyClass.Branch_Working_Date - 1 Then
''                Call Find_Loan_Int_Rate(Ln_Categ, Loan_Ac_Type, Loan_Ac_No, Int_Type, Base_Code)
''                Call Debit_Interest(MyClass.Unit_Code, Loan_Ac_Type, Loan_Ac_No, Int_Type, Base_Code, Adnl_Rate, Loan_Balance, Last_Int_Comp_Dt + 1, MyClass.Branch_Working_Date - 1, 0, Int_Debited)
''            End If
'            Arrear_Amt = Loan_Balance + Int_Debited
'            Due_Date = Maturity_Date
'            GoTo Continue_1
'        End If
'
'        Due_Date = #1/1/1900#
'        If Knt = 1 Or Knt = 3 Then GoTo Install_Process_Over
'
'Install_Loop:
'
'        Paid_Amt = Paid_Amt - IIf(IsNull(Install_Recset!Pay_Install_Amt), 0, Install_Recset!Pay_Install_Amt)
'        If Paid_Amt < 0 Then
'            Due_Date = IIf(IsNull(Install_Recset!pay_install_due_date), CDate("01/01/1900"), Install_Recset!pay_install_due_date)
'            GoTo Install_Process_Over
'        End If
'        GoSub Read_Install
'        If Inst_Ac_Type = Loan_Ac_Type And Inst_Ac_No = Loan_Ac_No Then GoTo Install_Loop
'
'Install_Process_Over:
'
'        If Paid_Amt < 0 Then Arrear_Amt = 0 - Paid_Amt
'
'Continue_1:
'
'        'Now work out cbk status
'        If Due_Date = #1/1/1900# Or Due_Date > MyClass.Branch_Working_Date Then
'            Cbk_Status = 0
'            GoTo Update_Data
'        End If
'
'        Num_Days = MyClass.Branch_Working_Date - Due_Date
'        If Num_Days <= 30 Then
'            Cbk_Status = 0
'            GoTo Update_Data
'        End If
'
'        'Watch
'        If Num_Days > 30 And Num_Days <= 90 Then
'            Cbk_Status = 1
'            GoTo Update_Data
'        End If
'
'        'sub standard
'        If Num_Days > 90 And Num_Days <= 180 Then
'            Cbk_Status = 2
'            GoTo Update_Data
'        End If
'
'        'doubtful
'        If Num_Days > 180 And Num_Days <= 365 Then
'            Cbk_Status = 3
'            GoTo Update_Data
'        End If
'
'        'Loss
'        If Num_Days > 365 Then
'            Cbk_Status = 4
'            GoTo Update_Data
'        End If
'
'Update_Data:
'
'        'Update values in loan account master
'        Call AKS_BeginTrans(MyClass.Connection_No)
'        SQLStr = "insert into " & MyClass.gUnifyDb & "loan_cbk(lc_hbr_cd,lc_type_code,lc_ac_srno,lc_bal_amt,lc_arr_amt,"
'        SQLStr = SQLStr + "lc_due_date,lc_cbk_status)"
'        SQLStr = SQLStr + " values(" & MyClass.Unit_Code & "," & Loan_Ac_Type & "," & Loan_Ac_No & "," & Loan_Balance & "," & Arrear_Amt & ","
'        SQLStr = SQLStr + " '" & Format(Due_Date, "dd-mmm-yyyy") & "'," & Cbk_Status & ")"
'        Call Fire_Sql(SQLStr, Upd_Recset, Sql_Error, MyClass.Connection_No, recs_read)
'        If Sql_Error <> 0 Then Call Abort_Program(, "Process_Loan_Xtra_Fields_3")
'        Call AKS_EndTrans(MyClass.Connection_No)
'
'        GoSub Read_Loan
'        If Knt = 3 Or Knt = 7 Then GoSub Read_Payment
'        GoTo Balance_Line
'        Exit Sub
'
'Read_Loan:
'
'    If Recset.EOF Then
'        Loan_Ac_Type = 9999
'        Loan_Ac_No = 999999
'        Return
'    End If
'    If Loan_Rec_Knt = 0 Then Recset.MoveFirst
'    If Loan_Rec_Knt >= 1 Then Recset.MoveNext
'    If Recset.EOF Then
'        Loan_Ac_Type = 9999
'        Loan_Ac_No = 999999
'        Return
'    End If
'    Loan_Ac_Type = Recset!lm_type_code
'    Loan_Ac_No = Recset!lm_ac_srno
'    Loan_Rec_Knt = Loan_Rec_Knt + 1
'    Return
'
'Read_Payment:
'
'    If Pay_RecSet.EOF Then
'        Pay_Ac_Type = 9999
'        Pay_Ac_No = 999999
'        Return
'    End If
'    If Pay_Rec_Knt = 0 Then Pay_RecSet.MoveFirst
'    If Pay_Rec_Knt >= 1 Then Pay_RecSet.MoveNext
'    If Pay_RecSet.EOF Then
'        Pay_Ac_Type = 9999
'        Pay_Ac_No = 999999
'        Return
'    End If
'    Pay_Ac_Type = Pay_RecSet!ltxn_ac_type_code
'    Pay_Ac_No = Pay_RecSet!ltxn_ac_srno
'    Pay_Rec_Knt = Pay_Rec_Knt + 1
'    Return
'
'Read_Install:
'
'    If Install_Recset.EOF Then
'        Inst_Ac_Type = 9999
'        Inst_Ac_No = 999999
'        Return
'    End If
'    If Inst_Rec_Knt = 0 Then Install_Recset.MoveFirst
'    If Inst_Rec_Knt >= 1 Then Install_Recset.MoveNext
'    If Install_Recset.EOF Then
'        Inst_Ac_Type = 9999
'        Inst_Ac_No = 999999
'        Return
'    End If
'    Inst_Ac_Type = Install_Recset!pay_type_code
'    Inst_Ac_No = Install_Recset!pay_ac_srno
'    Inst_Rec_Knt = Inst_Rec_Knt + 1
'    Return
'
End Sub

Public Sub Update_Cbk_Flag(ByVal Send_Flag As Byte)
Dim Sqlstr As String, Recset As New ADODB.Recordset
    
    If Send_Flag <> 0 And Send_Flag <> 1 Then
        Call MyClass.Display_Message("Programming Error")
        Exit Sub
    End If
    
    If Send_Flag = 1 Then
        If MyClass.Loan_CBK_Process_Flag = Send_Flag Then Exit Sub
        
        'update status flag in aks_parameter table
        Sqlstr = "update " & MyClass.gUnifyDb & "aks_parameter set par_no = " & Send_Flag & " where par_key = 'CBK_FLAG'"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Update_Cbk_Flag_1")
        If recs_read = 0 Then
            Sqlstr = "insert into " & MyClass.gUnifyDb & "aks_parameter(par_key,par_no,par_name) values('CBK_FLAG',0,'CBK Process Flag')"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Update_Cbk_Flag_2")
        End If
        MyClass.Loan_CBK_Process_Flag = Send_Flag
    Else
        If Use_Connection = MyClass.Connection_No Then
            If MyClass.Loan_CBK_Process_Flag = Send_Flag Then Exit Sub
        End If
        'update status flag in aks_parameter table
        Sqlstr = "update " & UseDbPrefix & "aks_parameter set par_no = " & Send_Flag & " where par_key = 'CBK_FLAG'"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Update_Cbk_Flag_3")
        If recs_read = 0 Then
            Sqlstr = "insert into " & UseDbPrefix & "aks_parameter(par_key,par_no,par_name) values('CBK_FLAG',0,'CBK Process Flag')"
            Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
            If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Update_Cbk_Flag_4")
        End If
        If Use_Connection = MyClass.Connection_No Then
            MyClass.Loan_CBK_Process_Flag = Send_Flag
        End If
    End If
    
    Exit Sub
End Sub
Public Sub Get_Sal_Advance_Available(ByVal Cust_Branch As Integer, ByVal Cust_Id As Long, ByVal Type_Code As Integer, _
                                ByVal Ac_SrNo As Long, ByRef Sal_Adv_AcNo As Long, ByRef Advance_Sanction As Currency, _
                                ByRef Advance_Available As Currency)
Dim Sqlstr As String, Recset As New ADODB.Recordset

    Advance_Available = 0
    Advance_Sanction = 0
    Sal_Adv_AcNo = 0
    
    If Set_Connection(Cust_Branch) <> 0 Then Exit Sub
    
    ' Find Out Loan Accounts of this customer (Loan Type = Salary Advance)
    Sqlstr = "select lm_ac_srno,lm_sanctioned_amt,lm_disb_amt,lm_princ_rec from " & UseDbPrefix & "laccounts" & _
            " where lm_hbr_cd = " & Cust_Branch & _
            " and lm_sav_cust_idno = " & Cust_Id & _
            " and lm_sav_ac_type_code = " & Type_Code & _
            " and lm_sav_ac_srno = " & Ac_SrNo & _
            " and lm_type_code = " & Loan_Type_For_SalAdv
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Auto_Sal_Adv_Recovery_4")
    If Recset.EOF = False Then
        Sal_Adv_AcNo = IIf(IsNull(Recset!lm_ac_srno), 0, Recset!lm_ac_srno)
        Advance_Sanction = IIf(IsNull(Recset!lm_sanctioned_amt), 0, Recset!lm_sanctioned_amt)
        Advance_Available = Advance_Sanction - IIf(IsNull(Recset!lm_disb_amt), 0, Recset!lm_disb_amt) + IIf(IsNull(Recset!lm_princ_rec), 0, Recset!lm_princ_rec)
        If Advance_Available < 0 Then Advance_Available = 0
    End If
    Exit Sub
End Sub

Public Sub Disburse_Salary_Advance(ByVal Cust_Branch As Integer, ByVal Cust_Id As Long, ByVal Type_Code As Integer, _
                                ByVal Ac_SrNo As Long, ByVal Sav_Acnt_Categ As String, ByVal Amt_Requested As Currency, _
                                ByRef Amt_Disbursed As Currency, ByRef Commission_Amt As Currency)

' Commission Debit Amount is the Bank Charges which are to be Debited to his savings account
Dim Txn_Time As Integer, Trans_Date As Date
Dim Integer_Flag As Integer, Sav_Narrat As String, Txn_No As Long
Dim Sqlstr As String, Recset As New ADODB.Recordset, Byte_Flag As Byte
Dim Sal_Adv_AcNo As Long, Narration As String
Dim Max_Advance_Allowed As Currency, Min_Sal_ADV_Commssion As Currency

    Amt_Disbursed = 0
    Commission_Amt = 0
    Min_Sal_ADV_Commssion = 0
    If Amt_Requested <= 0 Then
        Call MyClass.Display_Message("Invalid Call to Disburse_Salary_Advance.", 1)
        End
    End If
    If Set_Connection(Cust_Branch) <> 0 Then Exit Sub
   
    Sqlstr = "select par_no from " & MyClass.gUnifyDb & "aks_parameter where par_key = 'SALADMNCOM'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Disburse_Salary_Advance_0")
    If Recset.EOF = False Then Min_Sal_ADV_Commssion = IIf(IsNull(Recset!Par_No), 0, Recset!Par_No)
    
    If Salary_Adv_Process_Percentage = 0 Then
        'Get Processing Charges for Loan Category For Salary Advance
        Sqlstr = "select process_charges from " & UseDbPrefix & "loan_ac_categ where loan_categ = '" & _
                    Loan_Categ_For_SalAdv & "'"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Disburse_Salary_Advance_1")
        Salary_Adv_Process_Percentage = 0
        If Recset.EOF = False Then Salary_Adv_Process_Percentage = IIf(IsNull(Recset!Process_Charges), 0, Recset!Process_Charges)
    End If
    
    'Get Loan Account Number from Loan Accounts Master
    Sqlstr = "select lm_ac_srno,lm_sanctioned_amt,lm_disb_amt,lm_princ_rec from " & UseDbPrefix & "laccounts " & _
            " where lm_hbr_cd = " & Cust_Branch & " and lm_sav_cust_idno = " & Cust_Id & " and " & _
            " lm_sav_ac_type_code = " & Type_Code & " and lm_sav_ac_srno = " & Ac_SrNo & " and " & _
            " lm_type_code = " & Loan_Type_For_SalAdv
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Use_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Disburse_Salary_Advance_2")
    If Recset.EOF = True Then Exit Sub
    Max_Advance_Allowed = IIf(IsNull(Recset!lm_sanctioned_amt), 0, Recset!lm_sanctioned_amt) - IIf(IsNull(Recset!lm_disb_amt), 0, Recset!lm_disb_amt) + IIf(IsNull(Recset!lm_princ_rec), 0, Recset!lm_princ_rec)
    If Amt_Requested > Max_Advance_Allowed Then Exit Sub
    
    Sal_Adv_AcNo = IIf(IsNull(Recset!lm_ac_srno), 0, Recset!lm_ac_srno)
    Commission_Amt = Amt_Requested * Salary_Adv_Process_Percentage * 0.01
    If Min_Sal_ADV_Commssion <> 0 Then
        If Commission_Amt < Min_Sal_ADV_Commssion Then Commission_Amt = Min_Sal_ADV_Commssion
    End If
    If Commission_Amt >= Amt_Requested Then
        Call MyClass.Display_Message("Commssion Charges " + Format(Commission_Amt, "0.00") + "  is more than Amount Requested")
        Commission_Amt = 0
        Exit Sub
    End If
    
    'This function will post debits to Loan A/c and corresponding entries in savings A/c
    Call AKS_BeginTrans(Use_Connection)
    Narration = "Salary Advance"
    Call Post_Loan_Debits(Cust_Branch, Loan_Type_For_SalAdv, Sal_Adv_AcNo, Amt_Requested, Narration, _
                        TL_Sal_Advance, MyClass.Unit_Code, MyClass.Branch_Working_Date, Byte_Flag)
    Trans_Date = MyClass.Branch_Working_Date
    Txn_Time = Format(Now(), "HHMM")
    'we have to post (credit) this amount in Savings Account
    Sav_Narrat = "Salary Advance Paid"
    Txn_No = 0
    
    If Cust_Branch = MyClass.Unit_Code Then
        Call Post_Transaction(Cust_Branch, Trans_Date, Txn_Time, Txn_No, Cust_Branch, _
                    Cust_Id, Type_Code, Ac_SrNo, TC_Sal_Advance, _
                    Amt_Requested, 0, Sav_Narrat, MyClass.Branch_Working_Date, gsUser_Login, _
                    0, #1/1/1900#, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, _
                    Sav_Acnt_Categ, , 0, Integer_Flag)
    End If
    If Cust_Branch <> MyClass.Unit_Code Then
        Call Post_Alien_Transaction(Cust_Branch, Trans_Date, Txn_Time, Txn_No, Cust_Branch, _
                    Cust_Id, Type_Code, Ac_SrNo, TC_Sal_Advance, _
                    Amt_Requested, 0, Sav_Narrat, MyClass.Branch_Working_Date, gsUser_Login, _
                    0, #1/1/1900#, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, _
                    Sav_Acnt_Categ, Integer_Flag)
    End If
    If Integer_Flag <> 0 Then
        Call AKS_RollBackTrans(Use_Connection)
        Call MyClass.Display_Message("Unable to Post in Savings A/c.", 1)
        Exit Sub
    End If
    
    ' Also Debit Disbursement Charges (Bank Commission) to Savings Account
    If Commission_Amt <> 0 Then
        Sav_Narrat = "SalaryAdvance Process Fee"
        Txn_No = 0
        If Cust_Branch = MyClass.Unit_Code Then
        'TC_Discount_Charges
            Call Post_Transaction(Cust_Branch, Trans_Date, Txn_Time, Txn_No, Cust_Branch, _
                        Cust_Id, Type_Code, Ac_SrNo, TC_Salary_Advance_Commission, _
                        0 - Commission_Amt, 0, Sav_Narrat, MyClass.Branch_Working_Date, gsUser_Login, _
                        0, #1/1/1900#, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, _
                        Sav_Acnt_Categ, , 0, Integer_Flag)
        End If
        If Cust_Branch <> MyClass.Unit_Code Then
            Call Post_Alien_Transaction(Cust_Branch, Trans_Date, Txn_Time, Txn_No, Cust_Branch, _
                        Cust_Id, Type_Code, Ac_SrNo, TC_Salary_Advance_Commission, _
                        0 - Commission_Amt, 0, Sav_Narrat, MyClass.Branch_Working_Date, gsUser_Login, _
                        0, #1/1/1900#, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, _
                        Sav_Acnt_Categ, Integer_Flag)
            'Transaction Code Modified by murty on 02/09/2005 as requested by steve on mail
        End If
        If Integer_Flag <> 0 Then
            Call AKS_RollBackTrans(Use_Connection)
            Call MyClass.Display_Message("Unable to Post in Savings A/c.", 1)
            Exit Sub
        End If
    End If
    Call AKS_EndTrans(MyClass.Connection_No)
    Amt_Disbursed = Amt_Requested
    Exit Sub
End Sub
Private Sub Class_Initialize()
    Salary_Post_Parameters = 0
    Salary_Adv_Process_Percentage = 0
    Connection_Open_Flag = 1
    WH_Tax_Perc = 100
    WH_Tax_Round_Off = 0
    FD_Interest_Round_Off = 0
End Sub


Public Sub FD_Get_Next_Int_Due_Date(ByVal Branch_Code As Integer, ByVal Cust_Id As Long, ByVal Ac_Type As Integer, ByVal Ac_No As Long, _
                            ByRef Next_Int_Date As Date, ByRef From_Date As Date, ByRef Till_Date As Date)
Dim Recset As New ADODB.Recordset, SrecSet As New ADODB.Recordset
Dim FD_Scheme As String, Cumulative_Scheme As Byte, Last_Int_Capitalized_Date As Date, Maturity_Date As Date
Dim FDR_Duration As Currency, FDR_Start_date As Date, Fixed_Date_Flag As Byte, Capitalization_Freq As Byte
Dim Test_Date As Date, Num_Months As Integer, Num_Days As Integer
    
    Next_Int_Date = #1/1/1900#
    Sqlstr = "select fd_scheme, fd_cumulative, fd_eff_date, fd_period, fd_fixed_int_date, fd_int_freq, " & _
            "fd_last_int_cap_dt, fd_maturity_dt from " & MyClass.gUnifyDb & _
            "fdr_accounts where fd_branch = " & Branch_Code & _
            " and fd_cust = " & Cust_Id & _
            " and fd_acnt_type = " & Ac_Type & " and fd_acnt_no = " & Ac_No
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(Me, "Get_FD_Int_Rate")
    If Recset.EOF = True Then Exit Sub
    
    ' Take Rate from FDR Master
    FD_Scheme = Trim$(IIf(IsNull(Recset!FD_Scheme), "", Recset!FD_Scheme))
    FDR_Start_date = IIf(IsNull(Recset!fd_eff_date), #1/1/1900#, Recset!fd_eff_date)
    FDR_Duration = IIf(IsNull(Recset!fd_period), 0, Recset!fd_period)
    Fixed_Date_Flag = IIf(IsNull(Recset!fd_fixed_int_date), 0, Recset!fd_fixed_int_date)
    Cumulative_Scheme = IIf(IsNull(Recset!fd_cumulative), 0, Recset!fd_cumulative)
    Capitalization_Freq = IIf(IsNull(Recset!fd_int_freq), 0, Recset!fd_int_freq)
    Last_Int_Capitalized_Date = IIf(IsNull(Recset!fd_last_int_cap_dt), #1/1/1900#, Recset!fd_last_int_cap_dt)
    Maturity_Date = IIf(IsNull(Recset!fd_maturity_dt), #1/1/1900#, Recset!fd_maturity_dt)
    
    ' If FDR Int Frequency is ON Maturity, then Interest is to be paid only on maturity
    If Capitalization_Freq = 9 Then
        From_Date = FDR_Start_date
        Till_Date = Maturity_Date - 1
        Next_Int_Date = Maturity_Date
        Exit Sub
    End If
    
    ' If Interest Payable on Fixed Dates Then
    If Fixed_Date_Flag >= 1 Then
        ' Find Date Upto which Interest is already Computed/Capitalized
        Next_Int_Date = Last_Int_Capitalized_Date
        If Last_Int_Capitalized_Date < FDR_Start_date Then
            Next_Int_Date = FDR_Start_date - 1
            Last_Int_Capitalized_Date = Next_Int_Date
        End If
        ' Add Interest Frequency in This
        If Capitalization_Freq = 1 Then
            ' Daily Requency
            If Capitalization_Freq = 1 Then
                From_Date = Last_Int_Capitalized_Date + 1
                Till_Date = From_Date
                Next_Int_Date = Till_Date + 1
                GoTo Check_FD_Expiry
            End If
        End If
        ' Monthly Frequency
        If Capitalization_Freq = 2 Then
            Test_Date = Last_Int_Capitalized_Date + 1
            If Day(Test_Date) = 1 Then
                ' Give Interest From FIRST of Next Month to End of Next Month
                From_Date = Last_Int_Capitalized_Date + 1
                Till_Date = Month_End_Date(From_Date)
                Next_Int_Date = Till_Date + 1
                GoTo Check_FD_Expiry
            End If
            ' Otherwise Give Interest From Last Int Cap. date to End of the Same Month
            From_Date = Last_Int_Capitalized_Date + 1
            Till_Date = Month_End_Date(From_Date)
            Next_Int_Date = Till_Date + 1
            GoTo Check_FD_Expiry
        End If
        ' Quarterly Frequency
        If Capitalization_Freq = 3 Then
            Test_Date = Last_Int_Capitalized_Date + 1
            If Day(Test_Date) = 1 Then
                ' Give Interest From FIRST of Next Month to End of Next Quarter
                From_Date = Last_Int_Capitalized_Date + 1
                Till_Date = Quarter_End_Date(From_Date)
                Next_Int_Date = Till_Date + 1
                GoTo Check_FD_Expiry
            End If
            ' Otherwise Give Interest From Last Int Cap. date to End of the Same Quarter
            From_Date = Last_Int_Capitalized_Date + 1
            Till_Date = Quarter_End_Date(From_Date)
            Next_Int_Date = Till_Date + 1
            GoTo Check_FD_Expiry
        End If
        ' Half Yearly Frequency
        If Capitalization_Freq = 6 Then
            Test_Date = Last_Int_Capitalized_Date + 1
            If Day(Test_Date) = 1 Then
                ' Give Interest From FIRST of Next Month to End of Half Year
                From_Date = Last_Int_Capitalized_Date + 1
                Till_Date = Half_Year_End_Date(From_Date)
                Next_Int_Date = Till_Date + 1
                GoTo Check_FD_Expiry
            End If
            ' Otherwise Give Interest From Last Int Cap. date to End of the Same Half Year
            From_Date = Last_Int_Capitalized_Date + 1
            Till_Date = Half_Year_End_Date(From_Date)
            Next_Int_Date = Till_Date + 1
            GoTo Check_FD_Expiry
        End If
        ' Yearly Frequency
        If Capitalization_Freq = 7 Then
            Test_Date = Last_Int_Capitalized_Date + 1
            If Day(Test_Date) = 1 Then
                ' Give Interest From FIRST of Next Month to End of Year
                From_Date = Last_Int_Capitalized_Date + 1
                Till_Date = Year_End_Date(From_Date)
                Next_Int_Date = Till_Date + 1
                GoTo Check_FD_Expiry
            End If
            ' Otherwise Give Interest From Last Int Cap. date to End of the Same Year
            From_Date = Last_Int_Capitalized_Date + 1
            Till_Date = Year_End_Date(From_Date)
            Next_Int_Date = Till_Date + 1
            GoTo Check_FD_Expiry
        End If
    End If
    ' If Interest Payable as per FD Dates Then
    If Fixed_Date_Flag = 0 Then
        ' Find Date Upto which Interest is already Computed/Capitalized
        Next_Int_Date = Last_Int_Capitalized_Date
        If Last_Int_Capitalized_Date < FDR_Start_date Then Next_Int_Date = FDR_Start_date - 1
        ' Add Interest Frequency in This
        Num_Months = 0
        Num_Days = 0
        ' Daily Requency
        If Capitalization_Freq = 1 Then
            Num_Days = 1
            From_Date = Last_Int_Capitalized_Date + 1
            Till_Date = From_Date
            Next_Int_Date = Till_Date + 1
            GoTo Check_FD_Expiry
        End If
        ' Monthly Frequency
        If Capitalization_Freq = 2 Then
            Num_Months = 1
            GoTo Get_New_Dates
        End If
        ' Quarterly Frequency
        If Capitalization_Freq = 3 Then
            Num_Months = 3
            GoTo Get_New_Dates
        End If
        ' Half Yearly Frequency
        If Capitalization_Freq = 6 Then
            Num_Months = 6
            GoTo Get_New_Dates
        End If
        ' Yearly Frequency
        If Capitalization_Freq = 7 Then
            Num_Months = 12
            GoTo Get_New_Dates
        End If
    End If

Get_New_Dates:
    
    From_Date = Next_Int_Date + 1
    Till_Date = FD_Add_Months(FDR_Start_date - 1, Next_Int_Date, Num_Months)
    Next_Int_Date = Till_Date + 1
    GoTo Check_FD_Expiry
    
Check_FD_Expiry:

    If From_Date > Maturity_Date - 1 Then
        From_Date = #1/1/1900#
        Till_Date = #1/1/1900#
        Next_Int_Date = #12/31/2099#
        Exit Sub
    End If
    If Till_Date > Maturity_Date - 1 Then
        Till_Date = Maturity_Date - 1
        Next_Int_Date = Maturity_Date
        Exit Sub
    End If
    If Next_Int_Date <= Last_Int_Capitalized_Date Then Next_Int_Date = #1/1/1900#
    Exit Sub
End Sub

Public Sub FD_Get_IntRate_For_Making_FD(ByVal Scheme_Code As String, ByVal Principal_Amount As Currency, _
                            ByVal Duration As Currency, ByRef Interest_Rate As Currency, ByRef Committed_Maturity_Amt As Currency)
Dim SrecSet As New ADODB.Recordset
        
        Interest_Rate = 0
        Committed_Maturity_Amt = 0
        Sqlstr = "select scheme_min_amt, scheme_min_duration, scheme_int_rate,scheme_maturity_amt from " & MyClass.gUnifyDb & _
                "fdr_scheme_rates where scheme_code = '" & Scheme_Code & _
                "' and " & Principal_Amount & " >= scheme_min_amt and " & Duration & " >= scheme_min_duration" & _
                " order by scheme_min_amt desc, scheme_min_duration desc"
        Call Fire_Sql(Sqlstr, SrecSet, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(Me, "GET_Int_RATE_For_Making_FDR")
        If SrecSet.EOF = True Then Exit Sub
        Interest_Rate = IIf(IsNull(SrecSet!scheme_int_rate), 0, SrecSet!scheme_int_rate)
        Committed_Maturity_Amt = IIf(IsNull(SrecSet!scheme_maturity_amt), 0, SrecSet!scheme_maturity_amt)
        Exit Sub
End Sub


Public Sub FD_Get_Int_Rate(ByVal Branch_Code As Integer, ByVal Cust_Id As Long, ByVal Ac_Type As Integer, ByVal Ac_No As Long, _
                            ByRef Interest_Rate As Currency)
Dim Recset As New ADODB.Recordset, SrecSet As New ADODB.Recordset
Dim Temp_Int_Rate As Currency, Flexible_int As Byte, FD_Scheme As String
Dim FD_Duration As Currency, FD_Principal As Currency, Adnl_Int_Rate As Currency
    
    Interest_Rate = 0
    Sqlstr = "select fd_scheme,fd_cumulative,fd_int_rate,fd_adnl_rate,fd_principal, fd_period, scheme_int_flex from " & MyClass.gUnifyDb & _
            "fdr_accounts," & MyClass.gUnifyDb & "fdr_schemes where fd_branch = " & Branch_Code & _
            " and fd_cust = " & Cust_Id & _
            " and fd_acnt_type = " & Ac_Type & " and fd_acnt_no = " & Ac_No & " and fd_scheme = scheme_code"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(Me, "GET_FD_INT_RATE")
    If Recset.EOF = True Then Exit Sub
    
    ' Take Rate from FDR Master
    Temp_Int_Rate = IIf(IsNull(Recset!FD_Int_Rate), 0, Recset!FD_Int_Rate)
    Flexible_int = IIf(IsNull(Recset!Scheme_Int_Flex), 0, Recset!Scheme_Int_Flex)
    FD_Scheme = Trim$(IIf(IsNull(Recset!FD_Scheme), "", Recset!FD_Scheme))
    Adnl_Int_Rate = IIf(IsNull(Recset!fd_adnl_rate), 0, Recset!fd_adnl_rate)
    
    ' If Rate is Flexible then get Current Interest Rates
    If Flexible_int >= 1 Then
'        FD_Principal = IIf(IsNull(Recset!FD_Principal), 0, Recset!FD_Principal)
'        FD_Duration = IIf(IsNull(Recset!fd_period), 0, Recset!fd_period)
'        Sqlstr = "select scheme_min_amt, scheme_min_duration, scheme_int_rate from " & MyClass.gUnifyDb & _
'                "fdr_scheme_rates where scheme_code = '" & FD_Scheme & _
'                "' and " & FD_Principal & " >= scheme_min_amt and " & FD_Duration & " >= scheme_min_duration" & _
'                " order by scheme_min_amt desc, scheme_min_duration desc"
'        Call Fire_Sql(Sqlstr, SrecSet, Sql_Error, MyClass.Connection_No, recs_read)
'        If Sql_Error <> 0 Then Call Abort_Program(, "GET_FD_INT_RATE_2")
'        If SrecSet.EOF = True Then Exit Sub
'        Temp_Int_Rate = IIf(IsNull(SrecSet!scheme_int_rate), 0, SrecSet!scheme_int_rate)
    End If
    
    ' Now Add Additional Interest Rate
    Interest_Rate = Temp_Int_Rate + Adnl_Int_Rate
    Exit Sub
End Sub



Public Sub FD_Get_Balance(ByVal Branch_Code As Integer, ByVal Cust_Code As Long, _
                            ByVal Acnt_Type As Integer, ByVal Acnt_No As Long, ByVal Balance_Date As Date, _
                            ByRef Balance_Amt As Currency)
                            
Dim Txn_Amt As Currency, WH_Tax As Currency
Dim Txn_Type As Byte
Dim Recset As New ADODB.Recordset
    
        Balance_Amt = 0
        Sqlstr = "select fdt_txn_type,fdt_txn_amt,fdt_wh_tax from " & MyClass.gUnifyDb & "fdr_trans " & _
                " where fdt_cust_branch = " & Branch_Code & " and fdt_cust_code = " & Cust_Code & " and " & _
                " fdt_acnt_type = " & Acnt_Type & " and fdt_acnt_no = " & Acnt_No & " and " & _
                " fdt_txn_dt <= '" & Format(Balance_Date, "dd-mmm-yyyy") & "'"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "MyLibClass/Get_FDR_Balance")
        Do While Recset.EOF = False
            Txn_Type = IIf(IsNull(Recset!fdt_Txn_Type), 0, Recset!fdt_Txn_Type)
            Txn_Amt = IIf(IsNull(Recset!fdt_txn_amt), 0, Recset!fdt_txn_amt)
            WH_Tax = IIf(IsNull(Recset!fdt_wh_tax), 0, Recset!fdt_wh_tax)
            
            If Txn_Type <= 10 Then
                If Txn_Type = 5 Then
                    Balance_Amt = Balance_Amt + Txn_Amt - WH_Tax
                Else
                    Balance_Amt = Balance_Amt + Txn_Amt
                End If
            End If
            If Txn_Type > 10 Then Balance_Amt = Balance_Amt - Txn_Amt
            
            Recset.MoveNext
        Loop
        Exit Sub
End Sub
Public Sub Post_FD_Interest(ByVal BranchCode As Integer, ByVal Cust_Code As Long, ByVal AcntType As Integer, ByVal AcntNumber As Long, ByVal Int_Principal As Currency, ByVal Int_Credited As Currency, ByVal Int_From_Date As Date, _
            ByVal Int_Till_Date As Date, ByVal Int_Rate As Currency, ByVal With_Holding_Tax As Currency, ByVal Payment_Mode As Byte, _
            ByVal Sav_CustId As Long, ByVal Sav_AcType As Integer, ByVal Sav_AcNo As Long, ByVal Sav_Ac_Categ As String)
            
Dim Txn_No As Long, Txn_Time As Integer, Narration As String, TxnCode As String
Dim Org_Txn_No As Long, Org_Txn_Date As Date, Payment_Amt As Currency
Dim Int_Flag As Integer
Dim Total_With_Holding_Tax As Currency, Sqlstr As String
    
    'First Insert Interest Transaction in FDT_Trans Table
    Txn_Time = Format(Now(), "HHMM")
    Narration = "Int " & Format(Int_From_Date, "dd-mm-yy") & " - " & Format(Int_Till_Date, "dd-mm-yy")
    TxnCode = FD_TC_Interest_ACR
    Txn_No = 0
    Txn_No = FD_Get_Txn_No(BranchCode, MyClass.Branch_Working_Date)
    Sqlstr = "insert into " & MyClass.gUnifyDb & "fdr_trans (fdt_branch,fdt_txn_dt,fdt_txn_no,fdt_cust_branch,fdt_cust_code," & _
        " fdt_acnt_type,fdt_acnt_no,fdt_txn_time,fdt_txn_type,fdt_txn_code,fdt_eff_date,fdt_narration,fdt_txn_amt, " & _
        " fdt_int_princ,fdt_wh_tax,fdt_int_rate,fdt_int_from,fdt_int_till,fdt_mode,fdt_gl_branch,fdt_gl_group,fdt_gl_type," & _
        " fdt_gl_acnt,fdt_sav_branch,fdt_sav_cust,fdt_sav_type,fdt_sav_acno,fdt_chq_no,fdt_chq_dt,fdt_chq_bank,fdt_chq_txn_code," & _
        " fdt_chq_clear_dt,fdt_ref_fdr_no,fdt_capitalize,fdt_source_prg,fdt_teller,fdt_pay_stat,fdt_post_stat,fdt_cross_txn_dt," & _
        " fdt_cross_txn_no,fdt_oprlog) values( " & _
        " " & MyClass.Unit_Code & ",'" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "'," & Txn_No & "," & BranchCode & "," & Cust_Code & "," & _
        " " & AcntType & "," & AcntNumber & "," & Txn_Time & ",5,'" & TxnCode & "','" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "'," & _
        " '" & Narration & "'," & Int_Credited & "," & Int_Principal & "," & With_Holding_Tax & "," & Int_Rate & "," & _
        " '" & Format(Int_From_Date, "dd-mmm-yyyy") & "','" & Format(Int_Till_Date, "dd-mmm-yyyy") & "',0,0,0,0,0," & _
        " 0,0,0,0,0,'01-Jan-1900',' ',' ','01-Jan-1900',0,0,4,'" & Left$(gsUser_Login, 3) & "',0,0,'01-Jan-1900',0,'" & Oper_Log & "')"
     Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
     If Sql_Error <> 0 Then Call Abort_Program(, "Post_FD_Interest_1")
         
     'Only Post ACR in this function
     ' It is nothing to do with crediting interest at this instance to customer
     ' At time of capatalizing all acrs should be taken
     ' Then only post interest to customer with INE
     
         
         
'    'if interest payment instruction is transfer to savings then transfer interest payment amount to savings
'    If Payment_Mode = 1 Or Payment_Mode = 2 Or Payment_Mode = 4 Then
'        Org_Txn_No = Txn_No
'        Org_Txn_Date = MyClass.Branch_Working_Date
'
'        'insert a transaction in fdr_trans table about payment
'        Txn_No = 0
'        Txn_No = FD_Get_Txn_No(BranchCode, MyClass.Branch_Working_Date)
'        TxnCode = FD_TC_Int_Paid_Savings
'        Narration = "Interest Paid"
'        SQLStr = "insert into " & MyClass.gUnifyDb & "fdr_trans(fdt_branch,fdt_txn_dt,fdt_txn_no,fdt_cust_branch," & _
'        "fdt_cust_code,fdt_acnt_type,fdt_acnt_no,fdt_txn_time,fdt_txn_type,fdt_txn_code,fdt_eff_date," & _
'        "fdt_narration,fdt_txn_amt,fdt_int_princ,fdt_wh_tax,fdt_int_rate,fdt_int_from,fdt_int_till,fdt_mode," & _
'        "fdt_gl_branch,fdt_gl_group,fdt_gl_type,fdt_gl_acnt,fdt_sav_branch,fdt_sav_cust,fdt_sav_type,fdt_sav_acno," & _
'        "fdt_chq_no,fdt_chq_dt,fdt_chq_bank,fdt_chq_txn_code,fdt_chq_clear_dt,fdt_ref_fdr_no,fdt_capitalize, " & _
'        "fdt_source_prg,fdt_teller,fdt_pay_stat,fdt_post_stat,fdt_cross_txn_dt,fdt_cross_txn_no,fdt_oprlog) values(" & _
'        " " & MyClass.Unit_Code & ",'" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "'," & Txn_No & "," & _
'        " " & MyClass.Unit_Code & "," & Cust_Code & "," & AcntType & "," & AcntNumber & ", " & Txn_Time & "," & _
'        " 15,'" & TxnCode & "','" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "','" & Narration & "'," & _
'        " " & Int_Credited & ",0,0,0,'01-Jan-1900','01-Jan-1900',2," & _
'        " 0,0,0,0," & MyClass.Unit_Code & "," & Sav_CustId & "," & Sav_AcType & "," & Sav_AcNo & ",0,'01-Jan-1900',''," & _
'        " '','01-Jan-1900',0,0,4,'" & Left$(gsUser_Login, 3) & "',0,0,'" & Format(Org_Txn_Date, "dd-mmm-yyyy") & "'," & _
'        " " & Org_Txn_No & ",'" & Oper_Log & "')"
'        Call Fire_Sql(SQLStr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
'        If Sql_Error <> 0 Then Call Abort_Program(, "Post_FD_Interest_2")
'
'        'Calculate With Holding Tax when u are crediting interest
'        Total_With_Holding_Tax = 0
'        Total_With_Holding_Tax = FD_Compute_WHTax(MyClass.Unit_Code, Cust_Code, Int_Credited, MyClass.Branch_Working_Date)
'
'        Payment_Amt = Int_Credited - Total_With_Holding_Tax
'        Narration = "Int " & Format(Int_From_Date, "dd-mm-yy") & " - " & Format(Int_Till_Date, "dd-mm-yy")
'        Txn_No = 0
'        TxnCode = FD_TC_Int_Payment_Savings
'        Call Post_Transaction(MyClass.Unit_Code, MyClass.Branch_Working_Date, Txn_Time, Txn_No, _
'                MyClass.Unit_Code, Sav_CustId, Sav_AcType, Sav_AcNo, TxnCode, Payment_Amt, 0, _
'                Narration, MyClass.Branch_Working_Date, Left$(gsUser_Login, 3), 0, #1/1/1900#, _
'                "", 0, 0, 0, 0, 0, 0, 0, 0, 0, Sav_Ac_Categ, #1/1/1900#, 0, Int_Flag)
'        If Int_Flag <> 0 Then Exit Sub
'
'        If Total_With_Holding_Tax <> 0 Then
'            Txn_No = 0
'            Txn_No = FD_Get_Txn_No(BranchCode, MyClass.Branch_Working_Date)
'            TxnCode = "WIT"
'            Narration = "W/H Tax"
'            SQLStr = "insert into " & MyClass.gUnifyDb & "fdr_trans(fdt_branch,fdt_txn_dt,fdt_txn_no,fdt_cust_branch," & _
'            "fdt_cust_code,fdt_acnt_type,fdt_acnt_no,fdt_txn_time,fdt_txn_type,fdt_txn_code,fdt_eff_date," & _
'            "fdt_narration,fdt_txn_amt,fdt_int_princ,fdt_wh_tax,fdt_int_rate,fdt_int_from,fdt_int_till,fdt_mode," & _
'            "fdt_gl_branch,fdt_gl_group,fdt_gl_type,fdt_gl_acnt,fdt_sav_branch,fdt_sav_cust,fdt_sav_type,fdt_sav_acno," & _
'            "fdt_chq_no,fdt_chq_dt,fdt_chq_bank,fdt_chq_txn_code,fdt_chq_clear_dt,fdt_ref_fdr_no,fdt_capitalize, " & _
'            "fdt_source_prg,fdt_teller,fdt_pay_stat,fdt_post_stat,fdt_cross_txn_dt,fdt_cross_txn_no,fdt_oprlog) values(" & _
'            " " & MyClass.Unit_Code & ",'" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "'," & Txn_No & "," & _
'            " " & MyClass.Unit_Code & "," & Cust_Code & "," & AcntType & "," & AcntNumber & ", " & Txn_Time & "," & _
'            " 12,'" & TxnCode & "','" & Format(MyClass.Branch_Working_Date, "dd-mmm-yyyy") & "','" & Narration & "'," & _
'            " " & Total_With_Holding_Tax & ",0,0,0,'01-Jan-1900','01-Jan-1900',2," & _
'            " 0,0,0,0," & MyClass.Unit_Code & "," & Sav_CustId & "," & Sav_AcType & "," & Sav_AcNo & ",0,'01-Jan-1900',''," & _
'            " '','01-Jan-1900',0,0,4,'" & Left$(gsUser_Login, 3) & "',0,0,'01-Jan-1900'," & _
'            " 0,'" & Oper_Log & "')"
'            Call Fire_Sql(SQLStr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
'            If Sql_Error <> 0 Then Call Abort_Program(, "Post_FD_Interest_2")
'        End If
'
'        'Tag the original record
'        SQLStr = "update " & MyClass.gUnifyDb & "fdr_trans set fdt_pay_stat = 1 " & _
'                 " where fdt_branch = " & MyClass.Unit_Code & " and fdt_txn_dt = '" & Format(Org_Txn_Date, "dd-mmm-yyyy") & "' and fdt_txn_no = " & Org_Txn_No
'        Call Fire_Sql(SQLStr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
'        If Sql_Error <> 0 Then Call Abort_Program(, "Post_FD_Interest_3")
'    End If
    Exit Sub
End Sub

Public Sub FD_Till_Date_Balance(ByVal Branch_Code As Integer, ByVal Cust_Code As Long, ByVal Acnt_Type As Integer, ByVal Acnt_No As Long, ByVal Ason_Date As Date, ByRef Balance As Currency)
Dim Recset As New ADODB.Recordset
Dim Principal As Currency, Eff_Date As Date, Maturity_Date As Date, Lst_Int_Cap_Dt As Date
Dim Txn_Type As Byte
Dim Int_From_Date As Date, Int_Till_Date As Date, Next_Int_Date As Date, Int_Credited As Currency, WH_Tax As Currency
Dim Int_Rate As Currency

    Balance = 0
    Sqlstr = "select fd_principal,fd_eff_date,fd_maturity_dt,fd_last_int_cap_dt " & _
            " from " & MyClass.gUnifyDb & "fdr_accounts " & _
            " where fd_branch = " & Branch_Code & " and fd_cust = " & Cust_Code & " and " & _
            " fd_acnt_type = " & Acnt_Type & " and fd_acnt_no = " & Acnt_No
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "FD_Till_Date_Balance_1")
    If Recset.EOF = True Then Exit Sub
    
    Principal = IIf(IsNull(Recset!FD_Principal), 0, Recset!FD_Principal)
    Eff_Date = IIf(IsNull(Recset!fd_eff_date), #1/1/1900#, Recset!fd_eff_date)
    Maturity_Date = IIf(IsNull(Recset!fd_maturity_dt), #1/1/1900#, Recset!fd_maturity_dt)
    Lst_Int_Cap_Dt = IIf(IsNull(Recset!fd_last_int_cap_dt), #1/1/1900#, Recset!fd_last_int_cap_dt)
    Balance = Principal
    
    Sqlstr = "select fdt_txn_type,sum(fdt_txn_amt),sum(fdt_wh_tax) from " & MyClass.gUnifyDb & "fdr_trans " & _
            " where fdt_cust_branch = " & Branch_Code & " and fdt_cust_code = " & Cust_Code & " and " & _
            " fdt_acnt_type = " & Acnt_Type & " and fdt_acnt_no = " & Acnt_No & " and " & _
            " fdt_txn_dt <= '" & Format(Ason_Date, "dd-mmm-yyyy") & "' and " & _
            " (fdt_txn_type =5 or fdt_txn_type =15) group by fdt_txn_type"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "FD_Till_Date_Balance_2")
    Do While Recset.EOF = False
        Txn_Type = IIf(IsNull(Recset!fdt_Txn_Type), 0, Recset!fdt_Txn_Type)
        If Txn_Type = 5 Then
            Balance = Balance + IIf(IsNull(Recset.Fields(1).value), 0, Recset.Fields(1).value) ''- IIf(IsNull(Recset.Fields(2).Value), 0, Recset.Fields(2).Value)
        Else
            Balance = Balance - IIf(IsNull(Recset.Fields(1).value), 0, Recset.Fields(1).value)
        End If
        Recset.MoveNext
    Loop
        
    If Maturity_Date <= Ason_Date Then Exit Sub
    
    Int_From_Date = Lst_Int_Cap_Dt
    If Int_From_Date = #1/1/1900# Then Int_From_Date = Eff_Date
    Int_From_Date = Int_From_Date + 1
    Int_Till_Date = Ason_Date
    If Int_From_Date > Ason_Date Then Exit Sub
    Next_Int_Date = Int_Till_Date + 1
    Call FD_Get_Int_Rate(Branch_Code, Cust_Code, Acnt_Type, Acnt_No, Int_Rate)
    Call FD_Credit_Interest(Branch_Code, Cust_Code, Acnt_Type, Acnt_No, Int_From_Date + 1, Int_Till_Date, Next_Int_Date, Int_Rate, 0, Int_Credited, WH_Tax)
    Balance = Balance + Int_Credited ''- WH_Tax
    Exit Sub
End Sub

Public Sub GL_Post_Voucher(ByVal Unit As Integer, ByVal Acpd As Integer, ByVal BkType As Integer, _
                            ByVal BookCode As Integer, ByVal VochNo As Long, ByVal RecPayFlag As Byte, _
                            ByVal PostFlag As Byte, ByRef SuccFlag As Byte, Optional ByVal Current_Connection As Integer)
                          
Dim Sqlstr As String, Acnt_Code As String
Dim Recset As New ADODB.Recordset, ErrFlag As Byte
Dim Db_Cr_Flag As Byte, I As Integer, Vch_Date As Date
Dim Vch_Amt As Currency, Acnt_Ledger As String, Settle_Flag As Byte, Bank_Rec_Flag As Byte, Entry_No As Integer
Dim TempDb As String, Temp_Connection As Integer

    'PostFlag - 0 For Posting
    '         - 1 for deposting
    
    'SuccFlag - 0 SuccessFul
    '         - 1 UnsuccessFul
    
    TempDb = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If Current_Connection <> 0 Then
        TempDb = MyClass.ATM_DB
        Temp_Connection = Current_Connection
    End If
    
    If PostFlag <> 0 And PostFlag <> 1 Then
        MsgBox ("Invalid Value Received For Post Flag")
        Exit Sub
    End If
    If BkType = 10 Then GoSub Fill_Up_Bank_Books
    SuccFlag = 0
    Bank_Rec_Flag = 0
    If BkType = 10 And Num_Bank_Book > 0 Then
        For I = 1 To Num_Bank_Book
            If Bank_Book_Unit(I) = Unit And Bank_Book_Code(I) = BookCode Then
                Bank_Rec_Flag = 1
                GoTo Continue_Here
            End If
        Next I
    End If

Continue_Here:

    'Select Records From Pass Voucher Detail Table
    Sqlstr = "select vcp_date,vcp_accode,vcp_crdr,vcp_amt,vcp_entry_no from " & TempDb & "gl_voc_pass_dtl " & _
            " where vcp_unit = " & Unit & " and vcp_ac_year = " & Acpd & " and " & _
            " vcp_bktype = " & BkType & " and vcp_bkcode = " & BookCode & " and " & _
            " vcp_vocno = " & VochNo & " and vcp_recflag = " & RecPayFlag & "  and vcp_cancel = 0 "
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "GL_Post_Voucer_100")
    If Recset.EOF = True Then Exit Sub
    
    'If Record Set is not Eof then Get Record Kount
    'Get each record and Post Account Code with Transaction Amount
    Do While Recset.EOF = False
        Vch_Date = IIf(IsNull(Recset!vcp_date), #1/1/1900#, Recset!vcp_date)
        Acnt_Code = Trim(IIf(IsNull(Recset!vcp_accode), "", Recset!vcp_accode))
        Db_Cr_Flag = IIf(IsNull(Recset!vcp_crdr), 0, Recset!vcp_crdr)
        Vch_Amt = IIf(IsNull(Recset!vcp_amt), 0, Recset!vcp_amt)

        Call GL_Post_Entry(Unit, Acnt_Code, BkType, BookCode, Vch_Date, Vch_Amt, Db_Cr_Flag, PostFlag, SuccFlag, Temp_Connection)
        If SuccFlag = 1 Then GoTo Proc_Exit

        ' Insert Record in Bank Reconciliation File
        If BkType = 10 Then
            If Bank_Rec_Flag >= 1 Then
                Entry_No = Recset!vcp_entry_no
                Call Insert_BankReco_Table(1, Unit, BookCode, Db_Cr_Flag, Vch_Amt, BkType, BookCode, Acpd, VochNo, RecPayFlag, Entry_No, PostFlag, Vch_Date, Temp_Connection)
            End If
        End If
        If Num_Bank_Book > 0 Then
            For I = 1 To Num_Bank_Book
                If Acnt_Code = Bank_Book_Post_Acnt(I) Then
                    Entry_No = Recset!vcp_entry_no
                    Call Insert_BankReco_Table(0, Unit, Bank_Book_Code(I), Db_Cr_Flag, Vch_Amt, BkType, BookCode, Acpd, VochNo, RecPayFlag, Entry_No, PostFlag, Vch_Date, Temp_Connection)
                    GoTo Process_Next_Record
                End If
            Next I
        End If

Process_Next_Record:

        Recset.MoveNext
    Loop

Proc_Exit:
    Exit Sub

Fill_Up_Bank_Books:

    Sqlstr = "select pdb_unit,pdb_code,pdb_accode from " & TempDb & "prm_daybk " & _
             " where pdb_unit = " & Unit & " and pdb_book = 10 and pdb_cflag = 0"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "GL_Post_Voucher_01")
    Num_Bank_Book = 0
    Do While Not Recset.EOF
        Num_Bank_Book = Num_Bank_Book + 1
        Bank_Book_Unit(Num_Bank_Book) = Recset!pdb_unit
        Bank_Book_Code(Num_Bank_Book) = Recset!pdb_code
        Bank_Book_Post_Acnt(Num_Bank_Book) = Trim$(IIf(IsNull(Recset!pdb_accode), MyClass.Master_Gl_Code, Recset!pdb_accode))
    Recset.MoveNext
    Loop
    Return
End Sub
Private Sub Insert_BankReco_Table(ByVal Entry_Type As Byte, ByVal Unit As Integer, ByVal BankBook As Integer, ByVal DbCrFlag As Byte, _
                                ByVal Amount As Currency, ByVal BkType As Byte, ByVal BookCode As Integer, _
                                ByVal Acpd As Integer, ByVal VochNo As Long, ByVal RecFlag As Byte, _
                                ByVal Entry_No As Integer, ByVal PostFlag As Byte, ByVal Voch_Date As Date, Optional ByVal Current_Connection As Integer)

Dim Sqlstr As String, Total_Amount As Currency, Tmp_Amount As Currency, Null_Date As Date, Settle_Flag As Byte
Dim Del_Recset As New ADODB.Recordset, Current_RowId As Long, Save_RowID As Long
Dim Cheque_No As String, Cheque_Type As String, String_date As String
Dim Krecset As New ADODB.Recordset, Temp_Recset As New ADODB.Recordset
Dim Row_Id As Long, Cut_Off_Bank As Date
Dim TempDb As String, Temp_Connection As Integer

    TempDb = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If Current_Connection <> 0 Then
        TempDb = MyClass.ATM_DB
        Temp_Connection = Current_Connection
    End If
        

    Null_Date = #1/1/1900#
    String_date = Format(Voch_Date, "dd-mmm-yyyy")
    If Cut_Off_Bank < #1/1/2006# Then Cut_Off_Bank = #1/1/2006#
    
    DbCrFlag = DbCrFlag + Entry_Type
    If DbCrFlag > 2 Then DbCrFlag = 1
    
    If PostFlag > 0 Then GoTo UnPost_Case
    If Voch_Date < Cut_Off_Bank Then Exit Sub
    ' One Record to be Inserted for EACH Cheque
    
    Sqlstr = "select vchq_instype, vchq_insnumber, vchq_amount from " & TempDb & "gl_tr_cheque " & _
             " where vchq_unit = " & Unit & _
             " and vchq_bktype = " & BkType & " and vchq_bcode = " & BookCode & " and vchq_acpd = " & Acpd & _
             " and vchq_vochno = " & VochNo & " and vchq_recflag = " & RecFlag & " and vchq_entryno = " & Entry_No
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Insert_BankReco_Table_01")
    
    Total_Amount = 0
    Do While Not Temp_Recset.EOF
        Cheque_No = Trim$(Temp_Recset!vchq_insnumber)
        Cheque_Type = Trim$(Temp_Recset!vchq_instype)
        Tmp_Amount = Temp_Recset!vchq_amount
        If (Total_Amount + Tmp_Amount) > Amount Then Tmp_Amount = Amount - Total_Amount
        If Tmp_Amount > 0 Then GoSub Add_record_for_Cheque
        Total_Amount = Total_Amount + Tmp_Amount
        If Total_Amount >= Amount Then Exit Sub
        Temp_Recset.MoveNext
    Loop
    Cheque_No = ""
    Cheque_Type = ""
    Tmp_Amount = Amount - Total_Amount
    Exit Sub
    
UnPost_Case:

    Sqlstr = "select * from " & TempDb & "gl_banksettle where bnm_unit = " & Unit & " and bnm_book = " & BankBook & " and " & _
             "bnm_bk_bktype = " & BkType & " and bnm_bk_bkcode = " & BookCode & " and " & _
             "bnm_bk_acpd = " & Acpd & " and bnm_bk_vrno = " & VochNo & " and " & _
             "bnm_bk_recflag = " & RecFlag & " and bnm_bk_entry = " & Entry_No
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Insert_BankReco_Table_01")

    Do While Not Temp_Recset.EOF
        Current_RowId = Temp_Recset!Row_Id
        Settle_Flag = Temp_Recset!bnm_settle_Flag
        
        If Settle_Flag <= 0 Then GoSub Delete_Record
        If Settle_Flag = 1 Then GoSub Remove_Entry_From_This_Rec
        If Settle_Flag = 2 Then
            Save_RowID = Temp_Recset!bnm_bk_rowid
            GoSub Delete_Record
            GoSub Change_Status_Of_Other_Record
        End If

Process_Next_Rec:

        Temp_Recset.MoveNext
    Loop

Proc_Exit:
    
        Exit Sub
        

Add_record_for_Cheque:

     Sqlstr = "select * from " & TempDb & "gl_banksettle where bnm_unit = " & Unit & " and bnm_book = " & BankBook & " and " & _
             "bnm_bk_bktype = " & BkType & " and bnm_bk_bkcode = " & BookCode & " and " & _
             "bnm_bk_acpd = " & Acpd & " and bnm_bk_vrno = " & VochNo & " and " & _
             "bnm_bk_recflag = " & RecFlag & " and bnm_bk_entry = " & Entry_No & " and " & _
             "bnm_bk_chqtype = '" & Cheque_Type & "' and bnm_bk_chqno= '" & Cheque_No & "' and " & _
             "bnm_amt = " & Tmp_Amount & " and bnm_dbcr=" & DbCrFlag
     Call Fire_Sql(Sqlstr, Krecset, Sql_Error, Temp_Connection, recs_read)
     If Sql_Error <> 0 Then Call Abort_Program(Me, "Insert_Bankreco_Table_03")
     If Krecset.EOF Then
        Row_Id = 0
        Sqlstr = "select max(row_id) from " & TempDb & "gl_banksettle"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Insert_BankReco_Table_04")
        If Recset.EOF = False Then Row_Id = IIf(IsNull(Recset.Fields(0).value), 0, Recset.Fields(0).value)
        Row_Id = Row_Id + 1
        
        Sqlstr = "insert into " & TempDb & "gl_banksettle(bnm_unit,bnm_book," & _
            "bnm_bk_date,bnm_bk_bktype,bnm_bk_bkcode,bnm_bk_vrno,bnm_bk_recflag,bnm_bk_entry," & _
            "bnm_bk_chqtype,bnm_bk_chqno,bnm_bk_rowid,bnm_st_date,bnm_st_lineno,bnm_st_chqtype," & _
            "bnm_st_chqno,bnm_st_rowid,bnm_amt,bnm_dbcr,bnm_settle_flag,bnm_st_valdate,bnm_bk_acpd,row_id) values(" & _
            " " & Unit & "," & BankBook & ",'" & String_date & "'," & BkType & "," & BookCode & "," & VochNo & "," & _
            " " & RecFlag & "," & Entry_No & ",'" & Cheque_Type & "','" & Cheque_No & "',0,'01-Jan-1900',0," & _
            " ' ',' ',0," & Tmp_Amount & "," & DbCrFlag & ",0,'01-Jan-1900'," & Acpd & "," & Row_Id & ")"
        Call Fire_Sql(Sqlstr, Del_Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Insert_bankreco_Table_05")
     End If
     Return
        
Delete_Record:

        Sqlstr = "delete from " & TempDb & "gl_banksettle where row_id = " & Current_RowId
        Call Fire_Sql(Sqlstr, Del_Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Insert_bankreco_Table_06")
        Return

Remove_Entry_From_This_Rec:

        Sqlstr = "update " & TempDb & "gl_banksettle set bnm_settle_flag = 0, bnm_bk_bktype = 0, bnm_bk_bkcode = 0, " & _
                 " bnm_bk_acpd = 0, bnm_bk_vrno = 0, bnm_bk_recflag = 0, bnm_bk_entry = 0, bnm_bk_chqno = '', " & _
                 " bnm_bk_chqtype = '', bnm_bk_rowid = 0, bnm_bk_date = '01-JAN-1900' " & _
                 "Where row_Id = " & Current_RowId
        Call Fire_Sql(Sqlstr, Del_Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Insert_bankreco_Table_07")
        Return
        
Change_Status_Of_Other_Record:

        Sqlstr = "update " & TempDb & "gl_banksettle set bnm_settle_flag = 0, bnm_bk_rowid = 0 where row_id = " & Save_RowID
        Call Fire_Sql(Sqlstr, Del_Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Insert_bankreco_Table_08")
        Return
End Sub
Public Sub GL_Post_Entry(ByVal Unit As Integer, ByVal AcCode As String, ByVal BkType As Integer, _
                           ByVal BookCode As Integer, ByVal Vochdate As Date, ByVal VochAmt As Currency, _
                           ByVal DbCrFlag As Byte, ByVal PostFlag As Byte, ByRef ErrorFlag As Byte, Optional ByVal Current_Connection As Integer)

Dim Control_Ac_Bank As String, Acnt_Ledger As String
Dim Control_Ac_SubLedger As String, Cash_Flag As Byte

    'ErrFlag  - 0 Successful
    '         - 1 Unsuccessful
    'PostFlag - 0 Post Amounts to the A/c Code Into Summary Table
    '         - 1 Depost Amounts to the A/c Code
    'DbCrFlag - 1 Credit
    '         - 2 Debit

    ErrorFlag = 0
    AcCode = Trim$(AcCode)
    VochAmt = Abs(VochAmt)
    'Post Account Code
    Call GL_Upd_Bal(Unit, AcCode, Vochdate, DbCrFlag, Abs(VochAmt), PostFlag, ErrorFlag, Current_Connection)
    If ErrorFlag <> 0 Then GoTo Proc_Exit

    'Check SubLedger of Party is GL Type.
    'If Not a GL Type then Get its control Account code
    'Post Control Account code as like Account Code
    Acnt_Ledger = Left$(AcCode, 1)
    If Acnt_Ledger <> MyClass.Master_Gl_Code Then
       Call Gl_ControlAc_SubLedger(Unit, Acnt_Ledger, Control_Ac_SubLedger, Current_Connection)
       Call GL_Upd_Bal(Unit, Control_Ac_SubLedger, Vochdate, DbCrFlag, VochAmt, PostFlag, ErrorFlag, Current_Connection)
       If ErrorFlag <> 0 Then GoTo Proc_Exit
    End If
    
    'If Book Type is Cash/Bank then Get Control Account of the Book
    'Reverse the sign of Db/cr Flag and Post Control Account of the Bank
    If BkType = 10 Then
       Call GL_ControlAc_Bank(Unit, BkType, BookCode, Control_Ac_Bank, Current_Connection)
       DbCrFlag = DbCrFlag + 1
       If DbCrFlag > 2 Then DbCrFlag = 1
       Call GL_Upd_Bal(Unit, Control_Ac_Bank, Vochdate, DbCrFlag, VochAmt, PostFlag, ErrorFlag, Current_Connection)
       If ErrorFlag <> 0 Then GoTo Proc_Exit
    End If
Proc_Exit:
    Exit Sub
End Sub
Public Sub GL_ControlAc_Bank(ByVal Unit As Integer, ByVal BkType As Integer, ByVal BookCode As Integer, _
                             ByRef AcntCode As String, Optional ByVal Current_Connection As Integer)
Dim Sqlstr As String, Recset As New ADODB.Recordset
Dim TempDb As String, Temp_Connection As Integer

    TempDb = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If Current_Connection <> 0 Then
        TempDb = MyClass.ATM_DB
        Temp_Connection = Current_Connection
    End If
    AcntCode = "G"
    Sqlstr = "select pdb_accode from " & TempDb & "prm_daybk where pdb_unit = " & Unit & " and " & _
             " pdb_book = " & BkType & " and pdb_code = " & BookCode & " "
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "GL_ControlAc_Bank")
    If Recset.EOF = False Then AcntCode = Trim$(IIf(IsNull(Recset!pdb_accode), "G", Recset!pdb_accode))
    Exit Sub
End Sub

Public Sub Gl_ControlAc_SubLedger(ByVal Unit As Integer, ByVal SubLedgCode As String, ByRef AcntCode As String, Optional ByVal Current_Connection As Integer)
Dim Recset As New ADODB.Recordset
Dim Sqlstr As String, TempDb As String, Temp_Connection As Integer

    TempDb = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If Current_Connection <> 0 Then
        TempDb = MyClass.ATM_DB
        Temp_Connection = Current_Connection
    End If
    SubLedgCode = Trim$(SubLedgCode)
    AcntCode = "G"
    Sqlstr = "select psl_accode from " & TempDb & "sub_legr " & _
             " where psl_unit = " & Unit & " and psl_code = '" & SubLedgCode & "'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "GL_ContorlAC_SubLedger")
    If Recset.EOF = False Then AcntCode = Trim$(IIf(IsNull(Recset!psl_accode), "G", Recset!psl_accode))
    Exit Sub
End Sub
Public Sub GL_Upd_Bal(ByVal Unit As Integer, ByVal AcntCode As String, ByVal Vochdate As Date, _
                       ByVal DbCrFlag As Byte, ByVal VochAmt As Currency, ByVal PostFlag As Byte, _
                       ByRef ErrFlag As Byte, Optional ByVal Current_Connection As Integer)
Dim Sqlstr As String, Recset As New ADODB.Recordset
Dim XX_Month As Integer, XX_Year As Integer
Dim Acnt_Name As String, Sub_Ledg As String
Dim TempDb As String, Temp_Connection As Integer


    'ErrFlag  - 0 Successful
    '         - 1 Unsuccessful
    'PostFlag - 0 Post Amounts to the A/c Code Into Summary Table
    '         - 1 Depost Amounts to the A/c Code
    'DbCrFlag - 1 Credit
    '         - 2 Debit

    TempDb = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If Current_Connection <> 0 Then
        TempDb = MyClass.ATM_DB
        Temp_Connection = Current_Connection
    End If

    ErrFlag = 1
    If VochAmt <= 0 Then Exit Sub
    AcntCode = Trim$(AcntCode)
    Sub_Ledg = Left$(AcntCode, 1)
    
    'Checke Validity of Account Code
    Sqlstr = "select ac_name from " & TempDb & "gl_account " & _
        " where ac_unit = " & MyClass.Unit_Code & " and ac_code = '" & AcntCode & "'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "GL_Upd_Bal_01")
    
    'Insert the Account Code and A/c Name A/c Head Wronlgy Deleted
    If Recset.EOF = True Then
        If Current_Connection = 0 Then MsgBox "A/c Head " + AcntCode + " Not Defined"
        Exit Sub
    End If

    'Extract Month and Year from Voucher Date
    XX_Month = Month(Vochdate)
    XX_Year = Year(Vochdate)
    'First Select whether a record exists for this
    'Account code for the month and year
    Sqlstr = " select ts_accode from " & TempDb & "gl_transum " & _
            " where ts_unit = " & Unit & " and ts_accode = '" & AcntCode & "' and " & _
            " ts_year = " & XX_Year & " and ts_month = " & XX_Month
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "GL_Upd_Bal_03")
    
    'If the record is not exists then insert a record
    'For this account code with the month and year
    If Recset.EOF = True Then
        Sqlstr = " insert into " & TempDb & "gl_transum(ts_unit,ts_year,ts_month,ts_accode, ts_debit,ts_credit) " & _
                   " values (" & Unit & ", " & XX_Year & " , " & XX_Month & " ,'" & Trim(AcntCode) & "' , 0, 0) "
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "GL_Upd_Bal_04")
    End If

    'Update ther relevant slot depending up on Post Flag and Db/cr Flag
    If PostFlag = 1 Then VochAmt = 0 - VochAmt
    Sqlstr = "update " & TempDb & "gl_transum set "
    If DbCrFlag >= 2 Then Sqlstr = Sqlstr + "ts_debit = ts_debit "
    If DbCrFlag <= 1 Then Sqlstr = Sqlstr + "ts_credit = ts_credit "
    Sqlstr = Sqlstr + " + " & VochAmt & _
            " where ts_unit = " & Unit & " and ts_accode = '" & Trim(AcntCode) & "' and  " & _
             " ts_year = " & XX_Year & " and ts_month = " & XX_Month
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "GL_Upd_Bal_05")
    ErrFlag = 0
    
    Exit Sub
End Sub
Public Sub Get_The_Name(ByVal Table_Name As String, ByVal Unit_Field As String, _
                         ByVal Code_Field As String, ByVal Desc_Field As String, _
                         ByVal Code_Val As String, ByRef Desc_Val As String, ByRef Error_Flag As Byte, Optional Br_Code As Integer)

Dim Sqlstr As String, Recset As New ADODB.Recordset
Dim Temp_Db As String, Temp_Connection As Byte

    If Br_Code = 0 Then Br_Code = MyClass.Unit_Code
    Temp_Db = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If Br_Code <> MyClass.Unit_Code Then
        Temp_Db = MyClass.GLDb
        Temp_Connection = GL_Connection
    End If
    
    Desc_Val = ""
    Error_Flag = 9
    Sqlstr = "select "
    Sqlstr = Sqlstr + Code_Field + "," + Desc_Field
    Sqlstr = Sqlstr + " from  "
    Sqlstr = Sqlstr + "" & Temp_Db & ""
    Sqlstr = Sqlstr + Table_Name
    Sqlstr = Sqlstr + " where " + Unit_Field + " = "
    Sqlstr = Sqlstr + " " & Br_Code & " and "
    Sqlstr = Sqlstr + Code_Field + " = "
    Sqlstr = Sqlstr + " '" & Code_Val & "'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(Me, "Get_The_name")
    If Recset.EOF = True Then Exit Sub
    If Recset.EOF = False Then
        Desc_Val = Trim$(IIf(IsNull(Recset.Fields(1).value), "", Recset.Fields(1).value))
    End If
    Error_Flag = 0
    Exit Sub
End Sub

Public Sub Forward_To_Whom(ByVal Unit As Integer, ByVal DocName As String, ByVal DocAmt As Currency, _
                            ByVal Owner As String, ByVal Curr_User As String, ByRef Next_User As String, _
                            ByRef Passing_Authority As Byte)
Dim Doc_Id As Long
Dim Ceiling_Amt As Currency
Dim Rec_User As String
Dim Sqlstr As String, Temp_Recset As New ADODB.Recordset, mn_BytKey As Byte

    Doc_Id = 0
    Next_User = "XXXXXXXX"
    Passing_Authority = 0
    Owner = Trim$(Owner)
    Curr_User = Trim$(Curr_User)
    If Curr_User = "" Then Curr_User = Owner

'    If gnUserLevel = 255 Then
'        Passing_Authority = 1
'        Next_User = Curr_User
'        GoTo Proc_Exit
'    End If

    Sqlstr = "select pdoc_id from " & MyClass.gUnifyDb & "rt_doctype " & _
             " where pdoc_unit = " & Unit & " and pdoc_type = '" & DocName & "' "
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Forward_To_Whom_01")
    If Not Temp_Recset.EOF Then Doc_Id = Temp_Recset!pdoc_id

    Sqlstr = "select proute_nextuser,proute_seqno,proute_ceilamt from " & MyClass.gUnifyDb & "rt_routing " & _
            " where proute_docid = " & Doc_Id & " and proute_owner = '" & Owner & "' and proute_br_code = " & MyClass.Unit_Code & " order by proute_seqno"
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Forward_To_Whom_02")
    If Temp_Recset.EOF = True Then Exit Sub
    Do While Not Temp_Recset.EOF
        Rec_User = Trim$(Temp_Recset!proute_nextuser)
'        If Curr_User = Owner Then
'            Next_User = Rec_User
'            Passing_Authority = 0
'            If Curr_User = Next_User Then Passing_Authority = 1
'            GoTo Proc_Exit
'        End If
        If Curr_User = Rec_User Then
            Ceiling_Amt = Temp_Recset!proute_ceilamt
            Passing_Authority = 0
            If DocAmt <= Ceiling_Amt Then
                Passing_Authority = 1
                Next_User = Rec_User
                GoTo Proc_Exit
            End If
            Temp_Recset.MoveNext
            If Temp_Recset.EOF Then
                Next_User = Rec_User
                Passing_Authority = 1
                GoTo Proc_Exit
            End If
            Next_User = Trim$(Temp_Recset!proute_nextuser)
            GoTo Proc_Exit
        End If
        
        
        Temp_Recset.MoveNext
    Loop

Proc_Exit:
    Exit Sub
End Sub
Public Sub Ask_Forward(ByRef To_Be_Passed_Flag As Byte)
Dim Msg_Opt As Integer
    
    To_Be_Passed_Flag = 0
    Msg_Opt = MsgBox("Do You Want to Pass This Voucher ?", vbYesNo + vbDefaultButton1)
    If Msg_Opt = 6 Then To_Be_Passed_Flag = 1
    Exit Sub
End Sub

Public Sub gl_Acnt_bal(ByVal UserUnit As Integer, ByVal AcntCode As String, ByVal On_Date As Date, _
                       ByVal UnpassedFlag As Byte, ByVal MemoFlag As Byte, ByRef Balance As Currency)

Dim Temp_Recset As New ADODB.Recordset
Dim I As Integer
Dim Tot_Debit As Currency, Tot_Credit As Currency
Dim TempDb As String, Temp_Connection As Byte
Dim Temp_Year As String, Sqlstr As String
Dim OnDate_Year As Integer

    Balance = 0
    AcntCode = Trim$(AcntCode)
    
    'Check Unit & Account Validity
    If IsInvalidUnit(UserUnit) Then Exit Sub
    If IsInvalidAcnt(UserUnit, AcntCode) Then Exit Sub
    
    TempDb = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If UserUnit <> MyClass.Unit_Code Then
        TempDb = MyClass.GLDb
        Temp_Connection = GL_Connection
    End If
    
    'Get Accounting Year Begin Date
    OpBal_Dt = #1/1/1900#
    Sqlstr = "select acyear_begin_date from " & TempDb & "gl_param"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Gl_Acnt_Bal_01")
    If Recset.EOF = False Then OpBal_Dt = IIf(IsNull(Recset!acyear_begin_date), #1/1/1900#, Recset!acyear_begin_date)
    Temp_Year = Year(OpBal_Dt)
    OnDate_Year = Year(On_Date)
    If OnDate_Year < Temp_Year And On_Date <> (OpBal_Dt - 1) Then
        Temp_Year = OnDate_Year
        OpBal_Dt = CDate("01-Jan-" + CStr(OnDate_Year))
    End If
    'Get Opening Balance
    Sqlstr = "select ob_bal from " & TempDb & "gl_ac_opbal " & _
            " where ob_unit = " & UserUnit & " and ob_year = " & Temp_Year & " and ob_accode = '" & AcntCode & "'"
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Get_Nearest_Opbal")
    If Not Temp_Recset.EOF Then Balance = Format(IIf(IsNull(Temp_Recset!ob_bal), 0, Temp_Recset!ob_bal), "0.00")
    
    'Check User Specified Date Validity
    If On_Date = OpBal_Dt - 1 Then Exit Sub
                    
    'Find the dateup to which balance can be taken from gl_summary
    Temp_Date = On_Date + 1
    Temp_Month = Month(Temp_Date)
    Last_day_flag = 1
    Temp_Day = Day(Temp_Date)
    If Temp_Day <> 1 Then
        Temp_Day = 1
        Last_day_flag = 0
    End If
    Temp_Year = Year(Temp_Date)
    
    Temp_Date = Format$("01" + "/" + CStr(Temp_Month) + "/" + CStr(Temp_Year), "dd-mm-yyyy")
    Fst_Date = Temp_Date
    Temp_Date = Temp_Date - 1
    
    Temp_Month = Month(Temp_Date)
    Temp_Year = Year(Temp_Date)
   
    Temp_YYMM = (Temp_Year * 100) + Temp_Month
    Op_Month = Month(OpBal_Dt)
    Op_year = Year(OpBal_Dt)
    Op_YYMM = (Op_year * 100) + Op_Month
    
    'Accumulate Total Debit & Credit Amount for the FULL months between opening_date & as_on_date
    Tot_Debit = 0
    Tot_Credit = 0
    Sqlstr = "select sum(ts_debit),sum(ts_credit) from " & TempDb & "gl_transum " & _
                " where ts_unit = " & UserUnit & " and " & _
                      " ts_accode = '" & AcntCode & "' and " & _
                      " ts_year *100+ts_month >= " & Op_YYMM & " and " & _
                      " ts_year * 100 + ts_month <= " & Temp_YYMM
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Bal_01")
    If Temp_Recset.EOF = False Then
        Tot_Debit = Format(IIf(IsNull(Temp_Recset.Fields(0).value), 0, Temp_Recset.Fields(0).value), "0.00")
        Tot_Credit = Format(IIf(IsNull(Temp_Recset.Fields(1).value), 0, Temp_Recset.Fields(1).value), "0.00")
        Balance = Balance + Tot_Debit - Tot_Credit
    End If
    
    Call Init_Control_Param(UserUnit, AcntCode)
    
    If Last_day_flag = 1 Then GoTo Process_Unpassed
    
    'See if there are any transactions at all in the current month from gl_transum
    Sqlstr = "select ts_debit,ts_credit from " & TempDb & "gl_transum where ts_unit = " & UserUnit & " and " & _
                      " ts_accode = '" & AcntCode & "' and " & _
                      " ts_year = " & Year(On_Date) & " and ts_month = " & Month(On_Date)
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Bal_02")
    If Temp_Recset.EOF = True Then
        Last_day_flag = 1
        GoTo Process_Unpassed
    End If
    'If 0 amount in current months gl_transum, then treat it as Last_day_of_Previous_Month
     If Temp_Recset.EOF = False Then
        If (Temp_Recset!ts_debit = 0 And Temp_Recset!ts_credit = 0) Then
            Last_day_flag = 1
            GoTo Process_Unpassed
        End If
    End If
      
    'Now Process Direct Transactions
    
Process_Direct_Trans:

    First_Date = Format(Fst_Date, "dd-mmm-yyyy")
    OnDate = Format(On_Date, "dd-mmm-yyyy")
    Tot_Debit = 0
    Tot_Credit = 0
    'Process Direct Transactions from Pass Voucher Detail
    Sqlstr = "select sum(vcp_amt), vcp_crdr from " & TempDb & "gl_voc_pass_dtl " & _
                " where vcp_unit = " & UserUnit & " and " & _
                      " vcp_accode = '" & AcntCode & "' and " & _
                      " vcp_date >= '" & Format(Fst_Date, "dd-mmm-yyyy") & "' and " & _
                      " vcp_date <= '" & Format(On_Date, "dd-mmm-yyyy") & "' and " & _
                      " vcp_cancel = 0 group by vcp_crdr"
    
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Bal_03")
    Do While Not Temp_Recset.EOF
        If Temp_Recset!vcp_crdr <= 1 Then Tot_Credit = Format(IIf(IsNull(Temp_Recset.Fields(0).value), 0, Temp_Recset.Fields(0).value), "0.00")
        If Temp_Recset!vcp_crdr >= 2 Then Tot_Debit = Format(IIf(IsNull(Temp_Recset.Fields(0).value), 0, Temp_Recset.Fields(0).value), "0.00")
        Temp_Recset.MoveNext
    Loop
    Balance = Balance + Tot_Debit - Tot_Credit
    
Process_Unpassed:

    OpBal_Date = Format(OpBal_Dt, "dd-mmm-yyyy")

    'Process UnPassed Direct Transactions
    If UnpassedFlag = 0 Then GoTo Process_Memo
     
    'Process Direct Transactions from UnPassed Voucher Detail
    Sqlstr = "select sum(vc_amt), vc_cr_dr from " & TempDb & "gl_voc_unpass_dtl " & _
                " where vc_unit = " & UserUnit & " and vc_ac_code = '" & AcntCode & "' and " & _
                      " vc_date >= '" & OpBal_Date & "' and " & _
                      " vc_date <= '" & Format(On_Date, "dd-mmm-yyyy") & "' " & _
                      " group by vc_cr_dr"
    
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Bal_04")
    Do While Not Temp_Recset.EOF
        If Temp_Recset!vc_cr_dr <= 1 Then Balance = Balance - IIf(IsNull(Temp_Recset.Fields(0).value), 0, Temp_Recset.Fields(0).value)
        If Temp_Recset!vc_cr_dr >= 2 Then Balance = Balance + IIf(IsNull(Temp_Recset.Fields(0).value), 0, Temp_Recset.Fields(0).value)
        Temp_Recset.MoveNext
    Loop
    
    'Process Memo Transactions

Process_Memo:
  
    If MemoFlag = 0 Then GoTo Process_Indirect_Transactions
    
    OnDate = Format(On_Date, "dd-mmm-yyyy")
    Memo_DtFrom = CDate("01" + "/" + CStr(Month(On_Date)) + "/" + CStr(Year(On_Date)))
    Sqlstr = "select mm_date,mm_bkcode,mm_amount,mm_crdr from " & TempDb & "gl_memo " & _
                " where mm_unit = " & UserUnit & " and mm_accode = '" & AcntCode & "' and " & _
                      " mm_date <=  '" & OnDate & "' and  " & _
                      " mm_date >=  '" & Format(Memo_DtFrom, "dd-mmm-yyyy") & "' " & _
                      " order by mm_bkcode asc , mm_date desc "
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Bal_05")

    Prev_Bkcode = 9999

Memo_loop:
      
    If Temp_Recset.EOF Then GoTo Process_Indirect_Transactions
    'If Temp_RecSet!mm_bkcode = Prev_Bkcode Then GoTo Next_memo_rec
        
    If Temp_Recset!mm_crdr = 2 Then Balance = Balance + Temp_Recset!mm_amount
    If Temp_Recset!mm_crdr = 1 Then Balance = Balance - Temp_Recset!mm_amount
    Prev_Bkcode = Temp_Recset!mm_bkcode
        
Next_memo_rec:
        
   Temp_Recset.MoveNext
   GoTo Memo_loop
        
   'Process Indirect Transactions

Process_Indirect_Transactions:

   OnDate = Format(On_Date, "dd-mmm-yyyy")

   If Last_day_flag = 1 Then GoTo Check_InDirect_Transaction_Unpassed
    
   If Num_Ledg = 0 And Num_Banks = 0 Then GoTo Check_InDirect_Transaction_Unpassed
    
   'First we take From Voucher Detail File
   Sqlstr = "select vcp_amt,vcp_crdr,vcp_accode,vcp_bktype,vcp_bkcode " & _
              " from " & TempDb & "gl_voc_pass_dtl " & _
              " where vcp_unit = " & UserUnit & " and vcp_date >= '" & First_Date & "' and " & _
              " vcp_date <= '" & OnDate & "' and vcp_cancel = 0 "
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Bal_06")
              
Ind_trans_VDt_Loop:
    
    If Temp_Recset.EOF Then GoTo Check_InDirect_Transaction_Unpassed
    
    'Check For SubLedger Summary
    Rec_Ledger = Mid(Temp_Recset!vcp_accode, 1, 1)
    Rec_Debit = Temp_Recset!vcp_crdr
    Rec_Amount = Temp_Recset!vcp_amt
    Rec_Book_Type = Temp_Recset!vcp_bktype
    Rec_Bank_Code = Temp_Recset!vcp_bkcode
    
    If Rec_Book_Type <> 10 Then Rec_Bank_Code = 0
    If Rec_Ledger = MyClass.Master_Gl_Code Then GoTo Check_Bank_Sum_1
    
    If Num_Ledg <= 0 Then GoTo Check_Bank_Sum_1
    
    For I = 1 To Num_Ledg
        If Rec_Ledger = Arr_Ledg(I) Then
            If Rec_Debit >= 2 Then Balance = Balance + Rec_Amount
            If Rec_Debit <= 1 Then Balance = Balance - Rec_Amount
            Exit For
        End If
    Next I
         
Check_Bank_Sum_1:
    
    If Rec_Bank_Code = 0 Then GoTo Next_Vdt_Rec
    If Num_Banks = 0 Then GoTo Next_Vdt_Rec
    
    For I = 1 To Num_Banks
        If Rec_Bank_Code = Arr_Banks(I) Then
            If Rec_Debit >= 2 Then Balance = Balance - Rec_Amount
            If Rec_Debit <= 1 Then Balance = Balance + Rec_Amount
            Exit For
        End If
    Next I
    
Next_Vdt_Rec:
    
    Temp_Recset.MoveNext
    GoTo Ind_trans_VDt_Loop

    'Process Check_InDirect_Transaction_Unpassed
Check_InDirect_Transaction_Unpassed:
    
    If UnpassedFlag = 0 Then GoTo AnyMoreTables
    
    If Num_Ledg = 0 And Num_Banks = 0 Then GoTo AnyMoreTables
    
    'First we take From Voucher unPassed Detail File
    Sqlstr = "select vc_amt,vc_cr_dr,vc_ac_code,vc_bktype,vc_bkcode " & _
              " from " & TempDb & "gl_voc_unpass_dtl where vc_unit = " & UserUnit & " and vc_date >= '" & OpBal_Date & "' and " & _
              " vc_date <= '" & OnDate & "'"
    
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Bal_07")
              
Ind_trans_VDt_UnPass_Loop:
    
    If Temp_Recset.EOF Then GoTo AnyMoreTables
    
    'Check For SubLedger Summary
    
    Rec_Ledger = Mid(Temp_Recset!vc_ac_code, 1, 1)
    Rec_Debit = Temp_Recset!vc_cr_dr
    Rec_Amount = Temp_Recset!vc_amt
    Rec_Book_Type = Temp_Recset!vc_bktype
    Rec_Bank_Code = Temp_Recset!vc_bkcode
    
    If Rec_Book_Type <> 10 Then Rec_Bank_Code = 0
    If Rec_Ledger = MyClass.Master_Gl_Code Then GoTo Check_Bank_Sum_6
    
    If Num_Ledg <= 0 Then GoTo Check_Bank_Sum_6
    
    For I = 1 To Num_Ledg
        If Rec_Ledger = Arr_Ledg(I) Then
            If Rec_Debit >= 2 Then Balance = Balance + Rec_Amount
            If Rec_Debit <= 1 Then Balance = Balance - Rec_Amount
            Exit For
        End If
    Next I
         
Check_Bank_Sum_6:
    
    If Rec_Bank_Code = 0 Then GoTo Next_Vdt_UnPass_Rec
    If Num_Banks = 0 Then GoTo Next_Vdt_UnPass_Rec
    
    For I = 1 To Num_Banks
        If Rec_Bank_Code = Arr_Banks(I) Then
            If Rec_Debit >= 2 Then Balance = Balance - Rec_Amount
            If Rec_Debit <= 1 Then Balance = Balance + Rec_Amount
            Exit For
        End If
    Next I
    
Next_Vdt_UnPass_Rec:
    
    Temp_Recset.MoveNext
    GoTo Ind_trans_VDt_UnPass_Loop

AnyMoreTables:
    
Proc_Exit:
    Exit Sub
End Sub
Private Sub Init_Control_Param(ByVal UserUnit As Integer, ByVal AcntCode As String)
Dim Sqlstr As String, Temp_Recset As New ADODB.Recordset
Dim Temp_Db As String, Temp_Connection As Byte

    Num_Ledg = 0
    Num_Banks = 0
    Num_TDS = 0

    Temp_Db = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If UserUnit <> MyClass.Unit_Code Then
        Temp_Db = MyClass.GLDb
        Temp_Connection = GL_Connection
    End If

    If Mid$(AcntCode, 1, 1) <> MyClass.Master_Gl_Code Then Exit Sub
    
    Sqlstr = "select psl_code from " & Temp_Db & "sub_legr " & _
             " where psl_unit = " & UserUnit & " and psl_accode = '" & AcntCode & "' "
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Init_Control_Param_01")

Ledg_Loop:

    If Temp_Recset.EOF Then GoTo Check_Bank_Book
    Num_Ledg = Num_Ledg + 1
    Arr_Ledg(Num_Ledg) = IIf(IsNull(Temp_Recset!psl_code), "", Temp_Recset!psl_code)
    Temp_Recset.MoveNext
    GoTo Ledg_Loop
   
   
Check_Bank_Book:

    Sqlstr = "Select pdb_code from " & Temp_Db & "prm_daybk where pdb_unit = " & UserUnit & _
                      " and  pdb_book = 10 and  pdb_accode = '" & AcntCode & "' "
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Init_Control_Param_02")

Bank_Loop:

    If Temp_Recset.EOF Then GoTo Check_TDS_Types
    Num_Banks = Num_Banks + 1
    Arr_Banks(Num_Banks) = Temp_Recset!pdb_code
    Temp_Recset.MoveNext
    GoTo Bank_Loop
        
Check_TDS_Types:

    Sqlstr = "Select ptd_type,ptd_code from " & Temp_Db & "wht_mst " & _
                " where ptd_unit = " & UserUnit & " and ptd_accode = '" & AcntCode & "' "
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Init_Control_Param_03")

TDS_Loop:

    If Temp_Recset.EOF Then GoTo FillingOver
    Num_TDS = Num_TDS + 1
    Arr_TDS_Type(Num_TDS) = Temp_Recset!ptd_type
    Arr_TDS_Code(Num_TDS) = Temp_Recset!ptd_code
    Temp_Recset.MoveNext
    GoTo TDS_Loop
        
FillingOver:

Proc_Exit:
    Exit Sub
End Sub
Public Function IsInvalidUnit(ByVal UnitCode As Integer) As Boolean
Dim Sqlstr As String, Recset As New ADODB.Recordset
Dim Temp_Db As String, Temp_Connection As Byte

    Temp_Db = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If UnitCode <> MyClass.Unit_Code Then
        Temp_Db = MyClass.GLDb
        Temp_Connection = GL_Connection
    End If
    IsInvalidUnit = True
    Sqlstr = "Select br_code from " & Temp_Db & "branch where br_code = " & UnitCode
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "IsinvalidUnit")
    If Recset.EOF = False Then IsInvalidUnit = False
    Exit Function
End Function

Private Function IsInvalidAcnt(ByVal UnitCode As Integer, ByVal AcntCode As String) As Boolean
Dim Recset As New ADODB.Recordset
Dim Sqlstr As String, Temp_Db As String, Temp_Connection As Byte
    
    Temp_Db = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If UnitCode <> MyClass.Unit_Code Then
        Temp_Db = MyClass.GLDb
        Temp_Connection = GL_Connection
    End If
        
    IsInvalidAcnt = True
    Sqlstr = "select ac_code from " & Temp_Db & "gl_account " & _
             " where ac_unit = " & UnitCode & " and ac_code = '" & AcntCode & "'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "IsinvalidAcnt")
    If Recset.EOF = False Then IsInvalidAcnt = False
    Exit Function
End Function


Public Sub gl_Acnt_Open(ByVal UserUnit As Integer, ByVal AcntCode As String, ByVal uDateFrom As Date, _
                         ByVal uDateTill As Date, ByVal UnpassedFlag As Byte, ByVal MemoFlag As Byte, ByRef ErrFlag As Byte)

Dim No_Passed_Transaction As Byte
Dim Temp_Recset As New ADODB.Recordset
Dim I As Integer, Sqlstr As String
Dim Temp_Db As String, Temp_Connection As Byte

    If UserUnit = 0 Then UserUnit = MyClass.Unit_Code
    Temp_Db = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If UserUnit <> MyClass.Unit_Code Then
        Temp_Db = MyClass.GLDb
        Temp_Connection = GL_Connection
    End If

    AcntCode = Trim$(AcntCode)
    Ledger_Code = Left$(AcntCode, 1)
    Temp_Flag = 0
    ErrFlag = 1
    High_Date = #12/31/2099#
    DateFrom = Format$(uDateFrom, "dd-mmm-yyyy")
    DateTill = Format$(uDateTill, "dd-mmm-yyyy")
    
    DTFrom = Format$(DateFrom, "dd-mmm-yyyy")
    dtTill = Format$(DateTill, "dd-mmm-yyyy")
    Memo_DtFrom = CDate("01" + "/" + CStr(Month(DateTill)) + "/" + CStr(Year(DateTill)))
    
    'Check Unit & Account Validity
    If IsInvalidUnit(UserUnit) Then Exit Sub
    If IsInvalidAcnt(UserUnit, AcntCode) Then Exit Sub
    
    'Check User Specified Date Validity
    If DateFrom > DateTill Then Exit Sub
    
    Call Init_Control_Param(UserUnit, AcntCode)
    Call Get_Summary_Flags(UserUnit)
                    
    Next_Date = DateFrom - 1
    Prev_Month = Month(DateFrom)
    
    Call Make_Date_Recset(UserUnit, UnpassedFlag, MemoFlag)
    
    'If NO transactiions in ledger duration, Then No Passed Vouchers may exist
    Sqlstr = "select sum(ts_debit),sum(ts_credit) from " & Temp_Db & "gl_transum " & _
                " where ts_unit = " & UserUnit & " and " & _
                      " ts_accode = '" & AcntCode & "' and " & _
                      " ts_year *100+ts_month >= " & Year(DateFrom) * 100 + Month(DateFrom) & " and " & _
                      " ts_year * 100 + ts_month <= " & Year(DateTill) * 100 + Month(DateTill)
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Open_0A")
    
    No_Passed_Transaction = 0
    If IIf(IsNull(Temp_Recset.Fields(0).value), 0, Temp_Recset.Fields(0).value) = 0 And _
        IIf(IsNull(Temp_Recset.Fields(1).value), 0, Temp_Recset.Fields(1).value) = 0 Then
        PVD_Date = High_Date
        No_Passed_Transaction = 1
        GoTo Passed_Process_Over
    End If
        
    'Make Record sets for Direct Transactions
'    SQLStr = "Select vcp_unit,vcp_ac_year,vcp_bktype,vcp_bkcode,vcp_vocno,vcp_recflag,vcp_entry_no,vcp_date,vcp_accode,vcp_amt,vcp_crdr,vcp_narr,vcp_cancel," & _
'             " row_id,vp_pay,vp_bill_no,vp_bill_dt,vp_bill_amt " & _
'                " from " & Temp_Db & "gl_voc_pass_dtl," & Temp_Db & "gl_voc_pass_hdr" & _
'                " where vcp_unit = " & UserUnit & " and vcp_accode = '" & AcntCode & "' and " & _
'                " vcp_date >= '" & dtFrom & "' and vcp_date <= '" & dtTill & "' " & _
'                " and vcp_cancel = 0 "
'    SQLStr = SQLStr + " and vp_unit = vcp_unit and vp_ac_year = vcp_ac_year and " & _
'            " vcp_bktype = vp_bktype and vcp_bkcode = vp_bkcode and vp_voc_no = vcp_vocno and vp_rec_flag = vcp_recflag"
'    SQLStr = SQLStr + " order by vcp_date,vcp_bktype,vcp_vocno "
    
    
    Sqlstr = "Select vcp_unit,vcp_ac_year,vcp_bktype,vcp_bkcode,vcp_vocno,vcp_recflag,vcp_entry_no,vcp_date,vcp_accode,vcp_amt,vcp_crdr,vcp_narr,vcp_refno,vcp_cancel," & _
             " row_id " & _
                " from " & Temp_Db & "gl_voc_pass_dtl" & _
                " where vcp_unit = " & UserUnit & " and vcp_accode = '" & AcntCode & "' and " & _
                " vcp_date >= '" & DTFrom & "' and vcp_date <= '" & dtTill & "' " & _
                " and vcp_cancel = 0 "
    Sqlstr = Sqlstr + " order by vcp_date,vcp_bktype,vcp_vocno "
    Call Fire_Sql(Sqlstr, rs_PVD, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_acnt_open")
    Set_Rec_No(1) = 0
    Set_Rec_No(2) = 0
    Set_Rec_No(3) = 0
    Set_Rec_No(4) = 0
    
    '************************************************************************************************
    If Num_Banks > 0 Or Num_Ledg > 0 Then If Not rs_Set1.BOF Then rs_Set1.MoveFirst
    If UnpassedFlag > 0 Then
        If Num_Banks > 0 Or Num_Ledg > 0 Then If Not rs_Set3.BOF Then rs_Set3.MoveFirst
    End If
    '************************************************************************************************
    
Passed_Process_Over:

    Prev_Bkcode = 9999
    If MemoFlag = 0 Then
            MEM_Date = High_Date
            GoTo Now_Unpassed
    End If
'                      " mm_acpd = " & Acperiod & " and  " & _

    Sqlstr = "select row_id,mm_date,mm_bkcode from " & Temp_Db & "gl_memo " & _
                " where mm_unit = " & UserUnit & " and mm_accode = '" & AcntCode & "' and " & _
                      " mm_date >= ' " & Format(Memo_DtFrom, "dd-mmm-yyyy") & " ' and " & _
                      " mm_date <= '" & dtTill & "' " & _
                      " order by mm_bkcode asc , mm_date desc "
    Call Fire_Sql(Sqlstr, rs_MEM, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Open_06")
    Set_Rec_No(5) = 0

Now_Unpassed:
    
    If UnpassedFlag = 0 Then
        UVD_Date = High_Date
        GoTo Start_Process
    End If
    
    Sqlstr = "select row_id,vc_date,vc_bktype,vc_control_no,vc_amt,vc_rec_flag " & _
                " from " & Temp_Db & "gl_voc_unpass_dtl " & _
                " where vc_unit = " & UserUnit & " and " & _
                      " vc_ac_code = '" & AcntCode & "' and " & _
                      " vc_date >= '" & DTFrom & "' and " & _
                      " vc_date <= '" & dtTill & "' " & _
                " order by vc_date,vc_bktype,vc_control_no "
    Call Fire_Sql(Sqlstr, rs_UVD, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Open_07")
    Set_Rec_No(7) = 0
    Set_Rec_No(8) = 0
    Set_Rec_No(9) = 0

Start_Process:
    
    'Initialize set flags
    'Initialize total debit and total credit
    For I = 1 To 30
        Set_Flags(I) = 0
        Eof_Flag(I) = 0
        Total_Debit(I) = 0
        Total_Credit(I) = 0
    Next I
    Pur_Available_Flag = 0
    Scroll_Available_Flag = 0
    If No_Passed_Transaction = 0 Then Call Read_PVD
    If MemoFlag > 0 Then Call Read_MEM
    If UnpassedFlag > 0 Then Call Read_UVD
    Call Read_Date
    ErrFlag = 0
    
Proc_Exit:
    Exit Sub
End Sub
Private Sub Read_Date()
    If Temp_Flag = 1 Then
        If Bank_Sum_Flag >= 2 Or Ledg_Sum_Flag >= 2 Or TDS_Sum_Flag >= 2 Then
            Next_Date = Next_Date + 1
            If Next_Date > DateTill Then Next_Date = High_Date
            GoTo Last_para
        End If
    End If
    If rs_Date.EOF Then
        Next_Date = High_Date
        GoTo Last_para
    End If
    Temp_Flag = 1
    Next_Date = rs_Date.Fields(0).value
    rs_Date.MoveNext

Last_para:
    
    Next_Dt = Format$(Next_Date, "dd-mmm-yyyy")
    Exit Sub
End Sub

Public Sub Read_UVD()
If rs_UVD.EOF Then
    UVD_Date = High_Date
    Exit Sub
End If
UVD_Date = rs_UVD!vc_date
UVD_RowId = rs_UVD!Row_Id
Temp_RecFlag = rs_UVD!vc_rec_flag
rs_UVD.MoveNext
End Sub

Private Sub Read_MEM()
Try_Read_Again:

If rs_MEM.EOF Then
    MEM_Date = High_Date
    Exit Sub
End If
'If rs_MEM!mm_bkcode = Prev_Bkcode Then
'    rs_MEM.MoveNext
'    GoTo Try_Read_Again
'End If
MEM_Date = rs_MEM!mm_date
MEM_RowId = rs_MEM!Row_Id
Prev_Bkcode = rs_MEM!mm_bkcode
rs_MEM.MoveNext
End Sub

Public Sub Read_PVD()

    If Scroll_Available_Flag > 0 Then Exit Sub

    If Set_Rec_No(1) = 0 Then If Not rs_PVD.BOF Then rs_PVD.MoveFirst
    If Set_Rec_No(1) > 0 Then If Not rs_PVD.EOF Then rs_PVD.MoveNext
    If rs_PVD.EOF Then
        PVD_Date = High_Date
        Exit Sub
    End If
    Set_Rec_No(1) = Set_Rec_No(1) + 1
    PVD_Date = rs_PVD!vcp_date
    PVD_RowId = rs_PVD!Row_Id
End Sub

Public Sub Make_Date_Recset(ByVal UserUnit As Integer, ByVal UnpassedFlag As Byte, ByVal MemoFlag As Byte)
Dim Sqlstr As String, Temp_Recset As New ADODB.Recordset
Dim Temp_Db As String, Temp_Connection As Byte
Dim Date_Recset As New ADODB.Recordset
Dim Pass_Available_Flag As Byte, Temp_Date As Date
Dim Mem_Recset As New ADODB.Recordset, Mem_Available_Flag As Byte
Dim UnPass_Recset As New ADODB.Recordset, Unpass_Available_Flag As Byte

    Temp_Db = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If UserUnit <> MyClass.Unit_Code Then
        Temp_Db = MyClass.GLDb
        Temp_Connection = GL_Connection
    End If
    
    Cur_Rec_Knt = 0
    Sqlstr = "select count(*) from " & Temp_Db & "gl_voc_pass_dtl"
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Make_Date_Recset")
    If Temp_Recset.EOF = False Then Cur_Rec_Knt = IIf(IsNull(Temp_Recset.Fields(0).value), 0, Temp_Recset.Fields(0).value)
    
    If Cur_Rec_Knt <> Prev_Rec_Knt Then GoTo Make_Fresh_Buffer
    If Prev_Dt_Till <> DateTill Then GoTo Make_Fresh_Buffer
    If Prev_Dt_From <> DateFrom Then GoTo Make_Fresh_Buffer
    If Ledger_Code <> Prev_Ledger Then GoTo Make_Fresh_Buffer
    If Prev_unit <> UserUnit Then GoTo Make_Fresh_Buffer
    If Not rs_Date.BOF Then rs_Date.MoveFirst
    
    'Else Use the Existing Record Set so that this Record Set is not Made for Every Account
    Exit Sub

Make_Fresh_Buffer:

    GoSub Fill_Cheq_Types

    Prev_Rec_Knt = Cur_Rec_Knt
    Prev_unit = UserUnit
    Prev_Dt_From = DateFrom
    Prev_Dt_Till = DateTill
    Prev_Ledger = Ledger_Code

    Set rs_Date = New ADODB.Recordset
    With rs_Date
        .Fields.Append "Kdate", adDate
        .CursorType = adOpenStatic
        .LockType = adLockOptimistic
        .Open
    End With

    Pass_Available_Flag = 0
    Sqlstr = "select distinct vcp_date from " & Temp_Db & "gl_voc_pass_dtl  " & _
            " where vcp_unit = " & UserUnit & " and " & _
            " vcp_date >= '" & DTFrom & "' and " & _
            " vcp_date <= '" & dtTill & "' order by vcp_date"
    Call Fire_Sql(Sqlstr, Date_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Make_Date_Recset_0A")
    If Date_Recset.EOF = False Then Pass_Available_Flag = 1
    Do While Date_Recset.EOF = False
        Temp_Date = IIf(IsNull(Date_Recset.Fields(0).value), 0, Date_Recset.Fields(0).value)
        With rs_Date
            .AddNew
            .Fields.Item("Kdate") = Temp_Date
            .Update
        End With
        Date_Recset.MoveNext
    Loop
    
    If MemoFlag > 0 Then
        Mem_Available_Flag = 0
        Sqlstr = "select distinct mm_date from " & Temp_Db & "gl_memo " & _
                    " where mm_unit = " & UserUnit & " and " & _
                    " mm_date >= ' " & Format(Memo_DtFrom, "dd-mmm-yyyy") & " ' and " & _
                    " mm_date <= '" & dtTill & "' order by mm_date "
        Call Fire_Sql(Sqlstr, Mem_Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Make_Date_Recset_0B")
        If Mem_Recset.EOF = False Then Mem_Available_Flag = 1
        Do While Mem_Recset.EOF = False
            Temp_Date = IIf(IsNull(Mem_Recset.Fields(0).value), #1/1/1900#, Mem_Recset.Fields(0).value)
            If Pass_Available_Flag = 1 Then
                Date_Recset.MoveFirst
                Do While Date_Recset.EOF = False
                    If Temp_Date = IIf(IsNull(Date_Recset.Fields(0).value), #1/1/1900#, Date_Recset.Fields(0).value) Then GoTo Next_Mem_Rec
                    Date_Recset.MoveNext
                Loop
            End If
            With rs_Date
                .AddNew
                .Fields.Item("Kdate") = Temp_Date
                .Update
            End With
            
Next_Mem_Rec:

            Mem_Recset.MoveNext
        Loop
    End If

    If UnpassedFlag > 0 Then
        Unpass_Available_Flag = 0
        Sqlstr = " Select distinct vc_date from " & Temp_Db & "gl_voc_unpass_dtl " & _
                " where vc_unit = " & UserUnit & " and " & _
                " vc_date >= '" & DTFrom & "' and " & _
                " vc_date <= '" & dtTill & "' order by vc_date"
        Call Fire_Sql(Sqlstr, UnPass_Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Make_Date_Recset_0C")
        If UnPass_Recset.EOF = False Then Unpass_Available_Flag = 1
        Do While UnPass_Recset.EOF = False
            Temp_Date = IIf(IsNull(UnPass_Recset.Fields(0).value), #1/1/1900#, UnPass_Recset.Fields(0).value)
            If Pass_Available_Flag = 1 Then
                Date_Recset.MoveFirst
                Do While Date_Recset.EOF = False
                    If Temp_Date = IIf(IsNull(Date_Recset.Fields(0).value), #1/1/1900#, Date_Recset.Fields(0).value) Then GoTo Next_Unpass_Rec
                    Date_Recset.MoveNext
                Loop
            End If
            If Mem_Available_Flag = 1 Then
                Mem_Recset.MoveFirst
                Do While Mem_Recset.EOF = False
                    If Temp_Date = IIf(IsNull(Mem_Recset.Fields(0).value), #1/1/1900#, Mem_Recset.Fields(0).value) Then GoTo Next_Unpass_Rec
                    Mem_Recset.MoveNext
                Loop
            End If
            With rs_Date
                .AddNew
                .Fields.Item("Kdate") = Temp_Date
                .Update
            End With
            
Next_Unpass_Rec:

            UnPass_Recset.MoveNext
        Loop
    End If
    If Pass_Available_Flag = 1 Or Mem_Available_Flag = 1 Or Unpass_Available_Flag = 1 Then
        rs_Date.MoveFirst
        rs_Date.Sort = " Kdate "
    End If
'    Call Fire_Sql(SqlStr, rs_Date, Sql_Error, Temp_Connection, recs_read)
'    If Sql_Error <> 0 Then Call Abort_Program(, "Make_Date_Recset_01")



    If Flag_Num <= 0 Then
        Sqlstr = "select pdb_book,pdb_code,pdb_cflag,pdb_voc_type from " & Temp_Db & "prm_daybk " & _
                 " where pdb_unit = " & UserUnit
        Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Make_Date_Recset_02")
        Flag_Num = 0
        Do While Not Temp_Recset.EOF
            If (Flag_Num >= 255) Then
                MsgBox ("Too Many Day Books Defined. Call AMITY Software Limited for Assistance.")
                Flag_Num = Flag_Num - 1
            End If
            Flag_Num = Flag_Num + 1
            Flag_BkType(Flag_Num) = Temp_Recset!pdb_book
            Flag_BkCode(Flag_Num) = Temp_Recset!pdb_code
            Flag_Cash(Flag_Num) = 0
            If Flag_BkType(Flag_Num) = 10 Then Flag_Cash(Flag_Num) = Temp_Recset!pdb_cflag
            Flag_Doc_Type(Flag_Num) = "**"
            If Flag_BkType(Flag_Num) = 10 Then
                If Flag_Cash(Flag_Num) <= 0 Then Flag_Doc_Type(Flag_Num) = "B"
                If Flag_Cash(Flag_Num) >= 1 Then Flag_Doc_Type(Flag_Num) = "C"
            End If
            If Flag_BkType(Flag_Num) <> 10 Then Flag_Doc_Type(Flag_Num) = Trim$(Temp_Recset!pdb_voc_type)
            Temp_Recset.MoveNext
        Loop
    End If

    If Ledger_Code <> MyClass.Master_Gl_Code Then Exit Sub

    Sqlstr = "Select * from " & Temp_Db & "gl_voc_pass_dtl where vcp_unit = " & UserUnit & " and " & _
                      " vcp_date >= '" & DTFrom & "' and vcp_date <= '" & dtTill & "' " & _
                      " order by vcp_date,vcp_bktype,vcp_bkcode,vcp_vocno,vcp_recflag desc"
    Call Fire_Sql(Sqlstr, rs_Set1, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Make_Date_Recset_04")


    If UnpassedFlag > 0 Then
        Sqlstr = "Select * from " & Temp_Db & "gl_voc_unpass_dtl where vc_unit = " & UserUnit & " and " & _
                           " vc_date >= '" & DTFrom & "' and vc_date <= '" & dtTill & "' order by vc_date,vc_bktype,vc_bkcode,vc_control_no,vc_rec_flag desc"
        Call Fire_Sql(Sqlstr, rs_Set3, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(, "Make_Date_Recset_05")
    End If

Proc_Exit:
    Exit Sub

Fill_Cheq_Types:
    
    Num_Chq_Types = 0
    Sqlstr = "select pit_code,pit_desc from " & Temp_Db & "gl_binst where pit_unit = " & UserUnit & " order by pit_code"
    Call Fire_Sql(Sqlstr, rs_Date, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Make_Date_Recset_AA")
    Do While Not rs_Date.EOF
        Num_Chq_Types = Num_Chq_Types + 1
        Chq_Types(Num_Chq_Types) = Trim$(rs_Date!pit_code)
        Chq_Desc(Num_Chq_Types) = Trim$(rs_Date!pit_desc)
        rs_Date.MoveNext
    Loop
    Return
End Sub
Public Sub Get_Other_Info(ByRef Cash_Flag As Byte, ByRef RecPay_Flag As Byte, ByRef Doc_Name As String)
Cash_Flag = Give_Cash_Flag
RecPay_Flag = Give_RecPay_Flag
Doc_Name = Give_Doc_Name
Exit Sub
End Sub

Public Sub gl_Acnt_Read(ByVal UserUnit As Integer, ByVal UnpassedFlag As Byte, ByVal MemoFlag As Byte, ByVal Cancel_Flag As Byte, ByRef uBkType As Byte, ByRef uBkCode As Integer, ByRef uVochNo As Long, _
                        ByRef uVochDt As Date, ByRef uAmount As Currency, ByRef uDbCr As Byte, _
                        ByRef uRecTable As Byte, ByRef uRowID As Long, ByRef uNarration As String, _
                        ByRef uChqNo() As String, ByRef uChqCnt As Byte, ByRef SuccFlag As Byte)

Dim ln_RetSummary_Flag As Byte, LnDutyJump As Byte
Dim I As Integer

    SuccFlag = 0
    Give_Cash_Flag = 0
    Give_RecPay_Flag = 0
    Give_Doc_Name = ""
    uBkType = 0
    uBkCode = 0
    uVochNo = 0
    uAmount = 0
    uDbCr = 0
    uNarration = ""
    uChqCnt = 0
    uRecTable = 0
    uRowID = 0
    uVochDt = Format("01-01-1900")
    
Balance_Line:

    'Get Lowest Date After Reading Transaction Dates
    Lowest_Date = Next_Date
    If PVD_Date < Lowest_Date Then Lowest_Date = PVD_Date
    If MEM_Date < Lowest_Date Then Lowest_Date = MEM_Date
    If UVD_Date < Lowest_Date Then Lowest_Date = UVD_Date
    
    If Lowest_Date = High_Date Then
        SuccFlag = 1
        Exit Sub
    End If
    If PVD_Date = Lowest_Date Then GoTo Process_Passed_Voucher
    If MemoFlag > 0 And MEM_Date = Lowest_Date Then GoTo Process_Memo
    If UnpassedFlag > 0 Then
        If UVD_Date = Lowest_Date Then GoTo Process_UnPassed_Voucher
    End If
    If Next_Date = Lowest_Date Then GoTo Date_Change_Para

Process_Passed_Voucher:
    Call Get_PVD(UserUnit, uBkType, uBkCode, uVochNo, uVochDt, uAmount, uDbCr, uRecTable, _
                 uRowID, uNarration, uChqNo, uChqCnt)
    Give_RecPay_Flag = 0
    If uBkType = 10 Then Give_RecPay_Flag = rs_PVD!vcp_recflag
    Call Get_Cash_DocName(uBkType, uBkCode, Give_Cash_Flag, Give_Doc_Name)
    Call Read_PVD
    Exit Sub
Process_Memo:
    Call Get_MEM(UserUnit, uBkType, uBkCode, uVochNo, uVochDt, uAmount, uDbCr, uRecTable, _
                 uRowID, uNarration, uChqNo, uChqCnt)
    Call Read_MEM
    Give_RecPay_Flag = 0
    Call Get_Cash_DocName(uBkType, uBkCode, Give_Cash_Flag, Give_Doc_Name)
    Exit Sub
Process_UnPassed_Voucher:
    Call Get_UVD(UserUnit, uBkType, uBkCode, uVochNo, uVochDt, uAmount, uDbCr, uRecTable, _
                 uRowID, uNarration, uChqNo, uChqCnt)
    Give_RecPay_Flag = 0
    If uBkType = 10 Then Give_RecPay_Flag = Temp_RecFlag 'rs_UVD!vent_recflag
    Call Get_Cash_DocName(uBkType, uBkCode, Give_Cash_Flag, Give_Doc_Name)
    Call Read_UVD
    Exit Sub
NoMore_Direct_Transactions:
Date_Change_Para:

'At this Stage we Have to process All Indirect Transactions
'Let Us Post Bank Summaries First

Process_Banks_Summary:
    If Num_Banks <= 0 Then GoTo Process_Ledger_Summary
    'Bank Summary From Passed Voucher FIle
    If Set_Flags(1) = 0 Then Call Make_Set1
Bank_Loop_Vdt:
    If Eof_Flag(1) > 0 Then GoTo Bank_Vdt_Exit
    If rs_Set1.EOF Then GoTo Bank_Vdt_Exit
    If Rec_No(1) = 0 Then rs_Set1.MoveFirst
    If Rec_No(1) > 0 Then rs_Set1.MoveNext
    If rs_Set1.EOF Then GoTo Bank_Vdt_Exit
    Rec_No(1) = Rec_No(1) + 1
    If rs_Set1!vcp_bktype <> 10 Then GoTo Bank_Loop_Vdt
    If rs_Set1!vcp_cancel <> 0 And Cancel_Flag = 0 Then GoTo Bank_Loop_Vdt
    For I = 1 To Num_Banks
        If rs_Set1!vcp_bkcode = Arr_Banks(I) Then GoTo Process_101
    Next I
    GoTo Bank_Loop_Vdt
Process_101:
    If rs_Set1!vcp_crdr <= 1 Then Total_Debit(1) = Total_Debit(1) + rs_Set1!vcp_amt
    If rs_Set1!vcp_crdr >= 2 Then Total_Credit(1) = Total_Credit(1) + rs_Set1!vcp_amt
    If Bank_Sum_Flag > 0 Then GoTo Bank_Loop_Vdt
    uRecTable = 1
    uRowID = rs_Set1!Row_Id
    uVochDt = Next_Date
    uBkType = rs_Set1!vcp_bktype
    uBkCode = rs_Set1!vcp_bkcode
    uVochNo = rs_Set1!vcp_vocno
    uAmount = rs_Set1!vcp_amt
    uDbCr = rs_Set1!vcp_crdr
    uDbCr = uDbCr + 1
    If uDbCr >= 3 Then uDbCr = 1
    If Left$(rs_Set1!vcp_accode, 1) = MyClass.Master_Gl_Code Then uNarration = Get_Payee_Name_Passed(rs_Set1!vcp_unit, rs_Set1!vcp_ac_year, uBkType, uBkCode, uVochNo, rs_Set1!vcp_recflag)
    uNarration = uNarration + Trim$(rs_Set1!vcp_narr)
    Give_RecPay_Flag = rs_Set1!vcp_recflag
    Call Get_Cash_DocName(uBkType, uBkCode, Give_Cash_Flag, Give_Doc_Name)
    If Give_Cash_Flag = 0 Then Call Get_Cheq_Details(rs_Set1!vcp_unit, rs_Set1!vcp_ac_year, uBkType, uBkCode, uVochNo, rs_Set1!vcp_recflag, rs_Set1!vcp_entry_no, uChqNo(), uChqCnt)
    Total_Debit(1) = 0
    Total_Credit(1) = 0
    If uAmount <= 0 Then GoTo Bank_Loop_Vdt
    Exit Sub
Bank_Vdt_Exit:
    
    Eof_Flag(1) = 1
    Eof_Flag(2) = 1
    
    If UnpassedFlag <= 0 Then GoTo Process_Ledger_Summary
    'Bank Summary From unPassed Voucher FIle
    If Set_Flags(3) = 0 Then Call Make_Set3
Bank_Loop_Vdt_UnPass:
    If Eof_Flag(3) > 0 Then GoTo Bank_Vdt_Exit_UnPass
    If rs_Set3.EOF Then GoTo Bank_Vdt_Exit_UnPass
    If Rec_No(3) = 0 Then rs_Set3.MoveFirst
    If Rec_No(3) > 0 Then rs_Set3.MoveNext
    If rs_Set3.EOF Then GoTo Bank_Vdt_Exit_UnPass
    Rec_No(3) = Rec_No(3) + 1
    If rs_Set3!vc_bktype <> 10 Then GoTo Bank_Loop_Vdt_UnPass
    For I = 1 To Num_Banks
        If rs_Set3!vc_bkcode = Arr_Banks(I) Then GoTo Process_103
    Next I
    GoTo Bank_Loop_Vdt_UnPass
Process_103:
    If rs_Set3!vc_cr_dr <= 1 Then Total_Debit(3) = Total_Debit(3) + rs_Set3!vc_amt
    If rs_Set3!vc_cr_dr >= 2 Then Total_Credit(3) = Total_Credit(3) + rs_Set3!vc_amt
    If Bank_Sum_Flag > 0 Then GoTo Bank_Loop_Vdt_UnPass
    uRecTable = 6
    uRowID = rs_Set3!Row_Id
    uVochDt = Next_Date
    uBkType = rs_Set3!vc_bktype
    uBkCode = rs_Set3!vc_bkcode
    uVochNo = rs_Set3!vc_control_no
    uAmount = rs_Set3!vc_amt
    uDbCr = rs_Set3!vc_cr_dr
    uDbCr = uDbCr + 1
    If uDbCr >= 3 Then uDbCr = 1
    uNarration = rs_Set3!vc_narr
    Give_RecPay_Flag = 0
    Call Get_Cash_DocName(uBkType, uBkCode, Give_Cash_Flag, Give_Doc_Name)
    If Give_Cash_Flag = 0 Then Call Get_Cheq_Details(rs_Set3!vc_unit, rs_Set3!vc_ac_year, uBkType, uBkCode, uVochNo, rs_Set3!vc_rec_flag, rs_Set3!vc_entry_no, uChqNo(), uChqCnt)
    Total_Debit(3) = 0
    Total_Credit(3) = 0
    If uAmount <= 0 Then GoTo Bank_Loop_Vdt_UnPass
    Exit Sub
Bank_Vdt_Exit_UnPass:
    Eof_Flag(3) = 1
    Eof_Flag(4) = 1
    
    'Let Us Post SubLedger Summaries
Process_Ledger_Summary:
    If Num_Ledg <= 0 Then GoTo Process_Purchase_Summary
    'Ledger Summary From Passed Voucher FIle
    If Set_Flags(5) = 0 Then
        If Set_Flags(1) = 0 Then Call Make_Set1
        If rs_Set1.RecordCount > 0 Then rs_Set1.MoveFirst
        Set_Flags(5) = 1
        Rec_No(5) = 0
    End If

Ledg_Loop_Vdt:
    If Eof_Flag(5) > 0 Then GoTo Ledg_Vdt_Exit
    If rs_Set1.EOF Then GoTo Ledg_Vdt_Exit
    If Rec_No(5) > 0 Then rs_Set1.MoveNext
    If rs_Set1.EOF Then GoTo Ledg_Vdt_Exit
    Rec_No(5) = Rec_No(5) + 1
    Rec_Ledger = Mid$(rs_Set1!vcp_accode, 1, 1)
    If Rec_Ledger = MyClass.Master_Gl_Code Then GoTo Ledg_Loop_Vdt
    If rs_Set1!vcp_cancel <> 0 And Cancel_Flag = 0 Then GoTo Ledg_Loop_Vdt
    For I = 1 To Num_Ledg
        If Arr_Ledg(I) = Rec_Ledger Then GoTo Process_201
    Next I
    GoTo Ledg_Loop_Vdt
Process_201:
    
    If rs_Set1!vcp_crdr >= 2 Then Total_Debit(5) = Total_Debit(5) + rs_Set1!vcp_amt
    If rs_Set1!vcp_crdr <= 1 Then Total_Credit(5) = Total_Credit(5) + rs_Set1!vcp_amt
    If Ledg_Sum_Flag > 0 Then GoTo Ledg_Loop_Vdt
     uRecTable = 1
     uRowID = rs_Set1!Row_Id
     uVochDt = Next_Date
     uBkType = rs_Set1!vcp_bktype
     uBkCode = rs_Set1!vcp_bkcode
     uVochNo = rs_Set1!vcp_vocno
     uAmount = rs_Set1!vcp_amt
     uDbCr = rs_Set1!vcp_crdr
     uNarration = rs_Set1!vcp_narr
     Give_RecPay_Flag = rs_Set1!vcp_recflag
     Call Get_Cash_DocName(uBkType, uBkCode, Give_Cash_Flag, Give_Doc_Name)
     If Give_Cash_Flag = 0 Then Call Get_Cheq_Details(rs_Set1!vcp_unit, rs_Set1!vcp_ac_year, uBkType, uBkCode, uVochNo, rs_Set1!vcp_recflag, rs_Set1!vcp_entry_no, uChqNo(), uChqCnt)
     Total_Debit(5) = 0
     Total_Credit(5) = 0
     If uAmount <= 0 Then GoTo Ledg_Loop_Vdt
     Exit Sub

Ledg_Vdt_Exit:
    
    Eof_Flag(5) = 1
    Eof_Flag(6) = 1
    Eof_Flag(7) = 1
    
    'Ledger Summary From unPassed Voucher Table
    If UnpassedFlag = 0 Then GoTo Process_Purchase_Summary
    If Set_Flags(8) = 0 Then
        If Set_Flags(3) = 0 Then Call Make_Set3
        If rs_Set3.RecordCount > 0 Then rs_Set3.MoveFirst
        Set_Flags(8) = 1
        Rec_No(8) = 0
    End If
Ledg_Loop_Vdt_Unpass:

    If Eof_Flag(8) > 0 Then GoTo Ledg_Vdt_Exit_UnPass
    If rs_Set3.EOF Then GoTo Ledg_Vdt_Exit_UnPass
    If Rec_No(8) > 0 Then rs_Set3.MoveNext
    If rs_Set3.EOF Then GoTo Ledg_Vdt_Exit_UnPass
    Rec_No(8) = Rec_No(8) + 1
    Rec_Ledger = Mid$(rs_Set3!vc_ac_code, 1, 1)
    If Rec_Ledger = MyClass.Master_Gl_Code Then GoTo Ledg_Loop_Vdt_Unpass
    For I = 1 To Num_Ledg
        If Arr_Ledg(I) = Rec_Ledger Then GoTo Process_301
    Next I
    GoTo Ledg_Loop_Vdt_Unpass
    
Process_301:
    If rs_Set3!vc_cr_dr >= 2 Then Total_Debit(8) = Total_Debit(8) + rs_Set3!vc_amt
    If rs_Set3!vc_cr_dr <= 1 Then Total_Credit(8) = Total_Credit(8) + rs_Set3!vc_amt
    If Ledg_Sum_Flag > 0 Then GoTo Ledg_Loop_Vdt_Unpass
     uRecTable = 6
     uRowID = rs_Set3!Row_Id
     uVochDt = Next_Date
     uBkType = rs_Set3!vc_bktype
     uBkCode = rs_Set3!vc_bkcode
     uVochNo = rs_Set3!vc_control_no
     uAmount = rs_Set3!vc_amt
     uDbCr = rs_Set3!vc_cr_dr
     uNarration = rs_Set3!vc_narr
     Total_Debit(8) = 0
     Total_Credit(8) = 0
     If uAmount <= 0 Then GoTo Ledg_Loop_Vdt_Unpass
    Give_RecPay_Flag = 0
    Call Get_Cash_DocName(uBkType, uBkCode, Give_Cash_Flag, Give_Doc_Name)
     Exit Sub
Ledg_Vdt_Exit_UnPass:
    Eof_Flag(8) = 1
    Eof_Flag(9) = 1
    Eof_Flag(10) = 1
    Eof_Flag(11) = 1
    
    'Now We Process Purchase Summary
Process_Purchase_Summary:
    Eof_Flag(12) = 1
    Eof_Flag(13) = 1
    Eof_Flag(14) = 1
    Eof_Flag(15) = 1
    Eof_Flag(16) = 1
    Eof_Flag(17) = 1
    Eof_Flag(18) = 1
    Eof_Flag(19) = 1
    Eof_Flag(20) = 1
    Eof_Flag(21) = 1
    Eof_Flag(22) = 1
    Eof_Flag(23) = 1
    Eof_Flag(24) = 1
    Eof_Flag(25) = 1
    Eof_Flag(26) = 1
    Eof_Flag(27) = 1

Date_Change_Exit:
    
    'Find if the month is changed
    Temp_Date = Next_Date + 1
    Month_Flag = 0
    If Month(Next_Date) <> Month(Temp_Date) Then Month_Flag = 1
    Last_day_flag = 0
    If Temp_Date > DateTill Then
        Month_Flag = 1
        Last_day_flag = 1
    End If
    'Return Summaries
    If Ledger_Code = MyClass.Master_Gl_Code Then
        Call Return_Summaries(uBkType, uBkCode, uVochNo, uVochDt, uAmount, uDbCr, _
                    uRecTable, uRowID, uNarration, uChqNo(), uChqCnt, ln_RetSummary_Flag)
        If ln_RetSummary_Flag = 1 Then Exit Sub
    End If
    'ReInitialize All Flags
    Call Initialize_Set_Flags
    Call Read_Date
    If Month_Flag = 1 Then Prev_Month = Month(Temp_Date)
    GoTo Balance_Line

Proc_Exit:
    Exit Sub
End Sub
Private Sub Initialize_Set_Flags()
Dim I As Integer
    'Initializing All Flags
    For I = 1 To 30
        Set_Flags(I) = 0
        Eof_Flag(I) = 0
        Rec_No(I) = 0
    Next I
End Sub

Private Sub Make_Set3()
    
'Make Set From UnPassed Voucher Table (FavocDetail)
    
    rs_Set3.Filter = " vc_date = '" & Next_Dt & "' "
    Set_Flags(3) = 1
    Rec_No(3) = 0
    Exit Sub
End Sub

Private Sub Get_Cheq_Details(ByVal TUnit As Integer, ByVal TAcpd As Integer, _
                             ByVal TBkType As Byte, ByVal TBkCode As Integer, _
                             ByVal TVochNo As Long, ByVal TRecFlag As Byte, ByVal TEntryNo As Integer, _
                             ByRef ChqNo() As String, ByRef ChqCnt As Byte)

Dim Sqlstr As String, Customer_Name As String, Customer_Code As String, Err_Flag As Byte
Dim strVar As String
Dim Temp_Recset1 As New ADODB.Recordset
Dim Temp_Db As String, Temp_Connection As Byte

    Temp_Db = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If TUnit <> MyClass.Unit_Code Then
        Temp_Db = MyClass.GLDb
        Temp_Connection = GL_Connection
    End If

    ChqCnt = 0
    Sqlstr = "select vchq_instype,vchq_insnumber,vchq_insdate,vchq_amount,vchq_remark,vchq_drawn,vchq_customer " & _
            " from " & Temp_Db & "gl_tr_cheque " & _
            " where vchq_unit = " & TUnit & " and vchq_acpd = " & TAcpd & " and " & _
             " vchq_bktype = " & TBkType & " and vchq_bcode = " & TBkCode & " and " & _
             " vchq_vochno = " & TVochNo & " and vchq_recflag = " & TRecFlag & " and " & _
             " vchq_entryno = " & TEntryNo & ""
    If TRecFlag = 1 Then Sqlstr = Sqlstr + " order by vchq_insnumber "
    Call Fire_Sql(Sqlstr, Temp_Recset1, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Get_Cheq_Details")
    
    If Temp_Recset1.EOF Then GoTo No_More_Checks
    Do While Not Temp_Recset1.EOF
        ChqCnt = ChqCnt + 1
        If ChqCnt > 250 Then GoTo No_More_Checks
        ChqNo(ChqCnt) = Get_Chq_Desc(Temp_Recset1!vchq_instype) + Space(1) + Pad(Temp_Recset1!vchq_insnumber, 7, 0)
        ChqNo(ChqCnt) = ChqNo(ChqCnt) + Space(1) + Format(Temp_Recset1!vchq_insdate, "dd-mm-yy")
        ChqNo(ChqCnt) = ChqNo(ChqCnt) + Space(1) + "For " + Pad(Format(Temp_Recset1!vchq_amount, "0.00"), 11, 0)
        If Len(Trim(Temp_Recset1!vchq_remark)) > 0 Then
            ChqCnt = ChqCnt + 1
            ChqNo(ChqCnt) = Pad(Trim$(Temp_Recset1!vchq_remark), 35, 0)
        End If
        If Len(Trim$(Temp_Recset1!vchq_drawn)) > 0 Then
            ChqCnt = ChqCnt + 1
            ChqNo(ChqCnt) = "Bank:" + Pad(Temp_Recset1!vchq_drawn, 30, 0)
        End If
        Customer_Code = Trim$(Temp_Recset1!vchq_customer)
        If Customer_Code <> "" Then
                ChqCnt = ChqCnt + 1
                ChqNo(ChqCnt) = "From:" + Pad(Customer_Code, 30, 0)
        End If
        Temp_Recset1.MoveNext
    Loop
    
No_More_Checks:
    
Proc_Exit:
    Exit Sub
End Sub

Private Function Get_Chq_Desc(ByVal Cheque_Type As String) As String
Dim I As Byte
Cheque_Type = Trim$(Cheque_Type)
Get_Chq_Desc = ""
If Num_Chq_Types > 0 Then
    For I = 1 To Num_Chq_Types
        If Chq_Types(I) = Cheque_Type Then
            Get_Chq_Desc = Chq_Desc(I)
            Exit Function
        End If
    Next I
End If
Exit Function
End Function

Private Function Get_Payee_Name_Passed(ByVal Unit_Code As Integer, ByVal AcPeriod As Integer, _
                ByVal Book_Type As Byte, ByVal Book_Code As Integer, _
                ByVal voucher_no As Long, ByVal Rec_PayFlag As Byte) As String

Dim Sqlstr As String, Payee_Recset As New ADODB.Recordset, kn_ErrFlag As Byte

    Get_Payee_Name_Passed = ""
    If Book_Type <> 10 Then Exit Function

    Sqlstr = "Select vp_pay from " & MyClass.gUnifyDb & "gl_voc_pass_hdr " & _
            "  where vp_unit = " & Unit_Code & " and vp_ac_year = " & AcPeriod & " " & _
             " and vp_bktype = " & Book_Type & " and vp_bkcode = " & Book_Code & " " & _
             " and vp_voc_no = " & voucher_no & " and vp_rec_flag = " & Rec_PayFlag & ""
    Call Fire_Sql(Sqlstr, Payee_Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Get_Payee_Name_passed")
    If Not Payee_Recset.EOF Then
         If Rec_PayFlag = 1 Then Get_Payee_Name_Passed = "Paid To "
         If Rec_PayFlag >= 2 Then Get_Payee_Name_Passed = "Received From "
         Get_Payee_Name_Passed = Get_Payee_Name_Passed + Trim$(Payee_Recset!vp_pay) + Space(1)
    End If
    Exit Function
End Function

Private Sub Make_Set1()

'Makes Set From Pass Voucher Table(FavocPdetl)

    rs_Set1.Filter = " vcp_date = '" & Next_Dt & "' "
    Set_Flags(1) = 1
    Rec_No(1) = 0
    Exit Sub
End Sub


Private Sub Get_UVD(ByVal UserUnit As Integer, ByRef uBkType As Byte, ByRef uBkCode As Integer, ByRef uVochNo As Long, _
                        ByRef uVochDt As Date, ByRef uAmount As Currency, ByRef uDbCr As Byte, _
                        ByRef uRecTable As Byte, ByRef uRowID As Long, ByRef uNarration As String, _
                        ByRef uChqNo() As String, ByRef uChqCnt As Byte)
                        
Dim Sqlstr As String, Temp_Recset As New ADODB.Recordset
Dim Temp_Db As String, Temp_Connection As Byte

    Temp_Db = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If UserUnit <> MyClass.Unit_Code Then
        Temp_Db = MyClass.GLDb
        Temp_Connection = GL_Connection
    End If
    
    'Direct Transactions from unpassed voucher detail
    Sqlstr = " select * from " & Temp_Db & "gl_voc_unpass_dtl where row_id = " & UVD_RowId
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "GET_UVD")
    uBkType = Temp_Recset!vc_bktype
    uBkCode = Temp_Recset!vc_bkcode
    uVochNo = Temp_Recset!vc_control_no
    uVochDt = UVD_Date
    uAmount = Temp_Recset!vc_amt
    uDbCr = Temp_Recset!vc_cr_dr
    uRecTable = 6
    uRowID = UVD_RowId
    uNarration = Temp_Recset!vc_narr
    If uBkType = 10 Then Call Get_Cheq_Details(Temp_Recset!vc_unit, Temp_Recset!vc_ac_year, uBkType, uBkCode, uVochNo, Temp_Recset!vc_rec_flag, Temp_Recset!vc_entry_no, uChqNo(), uChqCnt)
    Exit Sub
End Sub

Private Sub Get_MEM(ByVal UserUnit As Integer, ByRef uBkType As Byte, ByRef uBkCode As Integer, ByRef uVochNo As Long, _
                        ByRef uVochDt As Date, ByRef uAmount As Currency, ByRef uDbCr As Byte, _
                        ByRef uRecTable As Byte, ByRef uRowID As Long, ByRef uNarration As String, _
                        ByRef uChqNo() As String, ByRef uChqCnt As Byte)

Dim Sqlstr As String, Temp_Recset As New ADODB.Recordset
Dim Temp_Db As String, Temp_Connection As Byte

    Temp_Db = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If UserUnit <> MyClass.Unit_Code Then
        Temp_Db = MyClass.GLDb
        Temp_Connection = GL_Connection
    End If
    
    Sqlstr = " select * from " & Temp_Db & "gl_memo where row_id = " & MEM_RowId
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Get_Mem")
    uBkType = Temp_Recset!mm_bktype
    uBkCode = Temp_Recset!mm_bkcode
    uVochNo = Temp_Recset!mm_vochno
    uVochDt = MEM_Date
    uAmount = Temp_Recset!mm_amount
    uDbCr = Temp_Recset!mm_crdr
    uRecTable = 4
    uRowID = MEM_RowId
    uNarration = Temp_Recset!mm_narr
    'uNarration = uNarration + "From " + Format(Temp_RecSet!mm_dtfrom, "dd-mm-yyyy") + " Till " + Format(Temp_RecSet!mm_dtTill, "dd-mm-yyyy")
    uChqCnt = 0

Proc_Exit:
    Exit Sub
End Sub

Private Sub Get_Cash_DocName(ByVal uBkType As Byte, ByVal uBkCode As Integer, ByRef Give_Cash_Flag As Byte, ByRef Give_Doc_Name As String)
Dim I As Byte
Give_Cash_Flag = 0
Give_Doc_Name = ""
If Flag_Num <= 0 Then Exit Sub
For I = 1 To Flag_Num
    If Flag_BkType(I) = uBkType And Flag_BkCode(I) = uBkCode Then
            Give_Cash_Flag = Flag_Cash(I)
            Give_Doc_Name = Flag_Doc_Type(I)
            If uBkType = 10 Then
                If Give_RecPay_Flag <= 1 Then Give_Doc_Name = Left$(Flag_Doc_Type(I), 1) + "P" + CStr(uBkCode)
                If Give_RecPay_Flag >= 2 Then Give_Doc_Name = Left$(Flag_Doc_Type(I), 1) + "R" + CStr(uBkCode)
            End If
            Exit Sub
    End If
Next I
Exit Sub
End Sub

Private Sub Get_PVD(ByVal UserUnit As Integer, ByRef uBkType As Byte, ByRef uBkCode As Integer, ByRef uVochNo As Long, _
                        ByRef uVochDt As Date, ByRef uAmount As Currency, ByRef uDbCr As Byte, _
                        ByRef uRecTable As Byte, ByRef uRowID As Long, ByRef uNarration As String, _
                        ByRef uChqNo() As String, ByRef uChqCnt As Byte)

'Get Direct Transactions From Pass Voucher Detail
Dim Entry_No As Integer, Main_Entry As Byte, I As Byte, Temp_Var As Integer
Dim AcntName As String, ln_errFlag As Byte, Payee_Name As String
Dim Payee_Recset As New ADODB.Recordset
Dim RecFlag As Byte, VocUnit As Integer, VocAcpd As Integer
Dim Bill_No As String, Bill_Date As Date, Bill_Amt As Currency
Dim Cash_Flag As Byte, Doc_Name As String
Dim Temp_Db As String, Temp_Connection As Byte
Dim Temp_Narr As String
On Error GoTo Proc_Error

    Temp_Db = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If UserUnit <> MyClass.Unit_Code Then
        Temp_Db = MyClass.GLDb
        Temp_Connection = GL_Connection
    End If

    uVochDt = PVD_Date
    uRecTable = 1
    uRowID = PVD_RowId
    If rs_PVD.EOF = False Then
        RecFlag = rs_PVD!vcp_recflag
        VocAcpd = rs_PVD!vcp_ac_year
        VocUnit = rs_PVD!vcp_unit
        uBkType = rs_PVD!vcp_bktype
        uBkCode = rs_PVD!vcp_bkcode
        uVochNo = rs_PVD!vcp_vocno
        Call Get_Cash_DocName(uBkType, uBkCode, Cash_Flag, Doc_Name)
    End If
    If Scroll_Available_Flag = 0 Then GoTo No_Earlier_Entries
    
    uAmount = SubEntry_Amt(Scroll_Available_Flag)
    uDbCr = SubEntry_Dbcr(Scroll_Available_Flag) + 1
    If (uDbCr >= 3) Then uDbCr = uDbCr - 2
    uChqCnt = 0
    uNarration = "Deduction on Account of " + SubEntry_AcName(Scroll_Available_Flag)
    Scroll_Available_Flag = Scroll_Available_Flag + 1
    If Scroll_Available_Flag > SubEntry_Kount Then Scroll_Available_Flag = 0
    GoTo Proc_Exit
    
No_Earlier_Entries:

    uAmount = rs_PVD!vcp_amt
    uDbCr = rs_PVD!vcp_crdr
    Payee_Name = ""
    uNarration = ""
    If uBkType = 10 And Left$(rs_PVD!vcp_accode, 1) = MyClass.Master_Gl_Code Then GoSub Get_Payee_Name
    
    ' Include Bill Details for Scroll Liability Vouchers
    Bill_No = ""
    Bill_Date = #1/1/1900#
    Bill_Amt = 0
    If uBkType >= 20 And uBkType < 30 Then GoSub Get_Bill_Details
    If Bill_Amt > 0 Then
        uNarration = "BIll "
        If Bill_No <> "" Then uNarration = uNarration + "No " + Bill_No + " "
        If Bill_Date <> #1/1/1900# Then uNarration = uNarration + "Dated " + CStr(Format(Bill_Date, "dd-mmm-yyyy")) + " "
        uNarration = uNarration + "for Amount " + CStr(Format(Bill_Amt, "0.00")) + " "
    End If
    
    uNarration = uNarration + Trim$(rs_PVD!vcp_narr)
    If Payee_Name <> "" Then uNarration = Payee_Name + Chr(13) + Chr(10) + Trim$(rs_PVD!vcp_narr)
    
    Scroll_Available_Flag = 0
    Entry_No = rs_PVD!vcp_entry_no
    Temp_Var = (Entry_No \ 10) * 10
    Main_Entry = 0
    If Temp_Var = Entry_No Then Main_Entry = 1
    uChqCnt = 0
    If uBkType = 10 And Main_Entry = 1 And Cash_Flag = 0 Then Call Get_Cheq_Details(rs_PVD!vcp_unit, rs_PVD!vcp_ac_year, uBkType, uBkCode, rs_PVD!vcp_vocno, rs_PVD!vcp_recflag, rs_PVD!vcp_entry_no, uChqNo(), uChqCnt)
    If Main_Entry = 0 Then GoTo Proc_Exit
    Main_Entry_Ledger = UCase(Left$(Trim$(rs_PVD!vcp_accode), 1))
    If Main_Entry_Ledger = MyClass.Master_Gl_Code Then GoTo No_Main_Entry
    
    Main_Entry_Amount = rs_PVD!vcp_amt
    Main_Entry_Dbcr = rs_PVD!vcp_crdr
    Main_Entry_RecType = rs_PVD!vcp_bktype
    If Find_Sub_Entries(rs_PVD!vcp_unit, rs_PVD!vcp_bktype, rs_PVD!vcp_bkcode, rs_PVD!vcp_vocno, rs_PVD!vcp_recflag, Entry_No, uDbCr, rs_PVD!vcp_acyear) = 0 Then GoTo Proc_Exit
    uAmount = uAmount + SubEntry_Total
    Scroll_Available_Flag = 1
    GoTo Proc_Exit
    
Get_Payee_Name:
     
    If Trim$(rs_PVD!vp_pay) <> "" Then
        If RecFlag <= 1 Then Payee_Name = "Paid To " + Trim$(rs_PVD!vp_pay)
        If RecFlag >= 2 Then Payee_Name = "Recd.From " + Trim$(rs_PVD!vp_pay)
    End If
    Return
    
Get_Bill_Details:
    Bill_No = Trim$(rs_PVD!vp_bill_no)
    Bill_Date = rs_PVD!vp_bill_dt
    Bill_Amt = rs_PVD!vp_bill_amt
    Return
    
Proc_Exit:

    Temp_Narr = Trim$(IIf(IsNull(rs_PVD!vcp_refno), "", rs_PVD!vcp_refno))
    If Temp_Narr <> "" Then
        If uBkType = 60 And uBkCode = 2 Then
            uNarration = uNarration + " ATM Ref. Txn No. " + Temp_Narr
        Else
            uNarration = uNarration + " Ref. No./Chq No " + Temp_Narr
        End If
    End If
    

    Exit Sub
No_Main_Entry:

    Main_Entry = 0
    GoTo Proc_Exit
Proc_Error:
    GoTo Proc_Exit
End Sub

Private Function Find_Sub_Entries(ByVal Unit_Code As Integer, ByVal BkType As Byte, _
                                  ByVal BkCode As Integer, ByVal VochNo As Long, _
                                  ByVal RecFlag As Byte, ByVal Entry_No As Integer, _
                                  ByVal Main_Dbcr As Byte, ByVal AcPeriod As Integer) As Integer
Dim Sqlstr As String
Dim Entry_From As Integer, Entry_Till As Integer, Opposite_Entry_Flag As Byte
Dim Byte_Flag As Byte
Dim Temp_Db As String, Temp_Connection As Byte

    Temp_Db = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If Unit_Code <> MyClass.Unit_Code Then
        Temp_Db = MyClass.GLDb
        Temp_Connection = GL_Connection
    End If

    Entry_From = Entry_No + 1
    Entry_Till = Entry_No + 9

    Opposite_Entry_Flag = 0
    If Main_Entry_RecType = 10 Then Opposite_Entry_Flag = 1
    If Main_Entry_RecType <> 10 And Main_Entry_Dbcr >= 2 Then Opposite_Entry_Flag = 1
    
    Sqlstr = "select vcp_accode,vcp_crdr,vcp_amt from " & Temp_Db & "gl_voc_pass_dtl " & _
             " where vcp_unit = " & Unit_Code & " and vcp_acyear = " & AcPeriod & " and vcp_bktype = " & BkType & " and " & _
             " vpent_bkcode = " & BkCode & " and vcp_vocno = " & VochNo & " and vcp_recflag = " & RecFlag & " and" & _
             " vcp_entry_no >= " & Entry_From & " and vcp_entry_no <= " & Entry_Till & ""
    Call Fire_Sql(Sqlstr, SubEntry_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Find_Sub_Entries")
    
    SubEntry_Kount = 0
    SubEntry_Total = 0
    Do While Not SubEntry_Recset.EOF
        SubEntry_Kount = SubEntry_Kount + 1
        SubEntry_Ac(SubEntry_Kount) = Trim$(SubEntry_Recset!vcp_accode)
        If UCase(Left$(SubEntry_Ac(SubEntry_Kount), 1)) <> MyClass.Master_Gl_Code Then GoTo Skip_This_Record
        SubEntry_Dbcr(SubEntry_Kount) = SubEntry_Recset!vcp_crdr
        If SubEntry_Dbcr(SubEntry_Kount) = Main_Entry_Dbcr And Opposite_Entry_Flag >= 1 Then GoTo Skip_This_Record
        If SubEntry_Dbcr(SubEntry_Kount) <> Main_Entry_Dbcr And Opposite_Entry_Flag = 0 Then GoTo Skip_This_Record
        Call Get_The_Name("gl_account", "ac_unit", "ac_code", "ac_name", SubEntry_Ac(SubEntry_Kount), SubEntry_AcName(SubEntry_Kount), Byte_Flag, Unit_Code)
        SubEntry_Amt(SubEntry_Kount) = Format(SubEntry_Recset!vcp_amt, "0.00")
        If SubEntry_Amt(SubEntry_Kount) >= Main_Entry_Amount Then GoTo Skip_This_Record
        If SubEntry_Dbcr(SubEntry_Kount) = Main_Dbcr Then SubEntry_Total = SubEntry_Total + SubEntry_Amt(SubEntry_Kount)
        If SubEntry_Dbcr(SubEntry_Kount) <> Main_Dbcr Then SubEntry_Total = SubEntry_Total - SubEntry_Amt(SubEntry_Kount)
        GoTo Try_Next_Record
        
Skip_This_Record:
    
        SubEntry_Kount = SubEntry_Kount - 1
    
Try_Next_Record:
    
        SubEntry_Recset.MoveNext
    Loop
    If SubEntry_Kount = 0 Then GoTo No_Sub_Entries
    Find_Sub_Entries = SubEntry_Kount
    GoTo Proc_Exit

No_Sub_Entries:

    SubEntry_Kount = 0
    SubEntry_Total = 0
    Find_Sub_Entries = 0

Proc_Exit:
    Exit Function
Proc_Error:
End Function

Private Sub Return_Summaries(ByRef uBkType As Byte, ByRef uBkCode As Integer, ByRef uVochNo As Long, _
                        ByRef uVochDt As Date, ByRef uAmount As Currency, ByRef uDbCr As Byte, _
                        ByRef uRecTable As Byte, ByRef uRowID As Long, ByRef uNarration As String, _
                        ByRef uChqNo() As String, ByRef uChqCnt As Byte, ByRef SuccFlag As Byte)
                        
    SuccFlag = 0
    uBkType = 90
    uBkCode = 0
    uVochNo = 0
    uAmount = 0
    uChqCnt = 0
    uRecTable = 0
    uRowID = 0
    uVochDt = Next_Date
    Give_RecPay_Flag = 0
    Call Get_Cash_DocName(uBkType, uBkCode, Give_Cash_Flag, Give_Doc_Name)

    'Return Bank Summary
    If Num_Banks <= 0 Then GoTo Process_Ledg_Sum
    If Bank_Sum_Flag = 1 Or (Bank_Sum_Flag = 2 And Month_Flag = 1) Or (Bank_Sum_Flag >= 3 _
                    And Last_day_flag = 1) Then
        uNarration = " Summary From Bank Books"
        uDbCr = 2
        uAmount = Total_Debit(1)
        Total_Debit(1) = 0
        If uAmount > 0 Then
            SuccFlag = 1
            Exit Sub
        End If
        uDbCr = 1
        uAmount = Total_Credit(1)
        Total_Credit(1) = 0
        If uAmount > 0 Then
            SuccFlag = 1
            Exit Sub
        End If
    
        uNarration = " Summary From Debit Note Books"
        uDbCr = 2
        uAmount = Total_Debit(2)
        Total_Debit(2) = 0
        If uAmount > 0 Then
            SuccFlag = 1
            Exit Sub
        End If
        uNarration = " Summary From Purchase Books"
        uDbCr = 1
        uAmount = Total_Credit(2)
        Total_Credit(2) = 0
        If uAmount > 0 Then
            SuccFlag = 1
            Exit Sub
        End If
    
        uNarration = " Summary From UnPassed Bank Vouchers"
        uDbCr = 2
        uAmount = Total_Debit(3)
        Total_Debit(3) = 0
        If uAmount > 0 Then
            SuccFlag = 1
            Exit Sub
        End If
        uDbCr = 1
        uAmount = Total_Credit(3)
        Total_Credit(3) = 0
        If uAmount > 0 Then
            SuccFlag = 1
            Exit Sub
        End If
    
        uNarration = " Summary From UnPassed Debit Notes"
        uDbCr = 2
        uAmount = Total_Debit(4)
        Total_Debit(4) = 0
        If uAmount > 0 Then
            SuccFlag = 1
            Exit Sub
        End If
        uNarration = " Summary From UnPassed Purchase Vouchers"
        uDbCr = 1
        uAmount = Total_Credit(4)
        Total_Credit(4) = 0
        If uAmount > 0 Then
            SuccFlag = 1
            Exit Sub
        End If
    End If

Process_Ledg_Sum:

    'Return Sub Ledger Summaries
    
    If Num_Ledg <= 0 Then GoTo Process_Pur_Sum
    
    If Ledg_Sum_Flag = 1 Or (Ledg_Sum_Flag = 2 And Month_Flag = 1) Or (Ledg_Sum_Flag >= 3 _
                    And Last_day_flag = 1) Then
        
        uNarration = " Summary From Bank Books"
        uDbCr = 2
        uAmount = Total_Debit(5)
        Total_Debit(5) = 0
        If uAmount > 0 Then
            SuccFlag = 1
            Exit Sub
        End If
        uDbCr = 1
        uAmount = Total_Credit(5)
        Total_Credit(5) = 0
        If uAmount > 0 Then
            SuccFlag = 1
            Exit Sub
        End If
    
        uNarration = " Summary From Purchase Books"
        uDbCr = 2
        uAmount = Total_Debit(6)
        Total_Debit(6) = 0
        If uAmount > 0 Then
            SuccFlag = 1
            Exit Sub
        End If
        uNarration = "Summary From Debit Note Books"
        uDbCr = 1
        uAmount = Total_Credit(6)
        Total_Credit(6) = 0
        If uAmount > 0 Then
            SuccFlag = 1
            Exit Sub
        End If
        
        uNarration = " Summary From UnPassed Bank Vouchers"
        uDbCr = 2
        uAmount = Total_Debit(8)
        Total_Debit(8) = 0
        If uAmount > 0 Then
            SuccFlag = 1
            Exit Sub
        End If
        uDbCr = 1
        uAmount = Total_Credit(8)
        Total_Credit(8) = 0
        If uAmount > 0 Then
            SuccFlag = 1
            Exit Sub
        End If
    
        uNarration = " Summary From UnPassed Purchase Vouchers"
        uDbCr = 2
        uAmount = Total_Debit(9)
        Total_Debit(9) = 0
        If uAmount > 0 Then
            SuccFlag = 1
            Exit Sub
        End If
        uNarration = " Summary From UnPassed Debit Notes"
        uDbCr = 1
        uAmount = Total_Credit(9)
        Total_Credit(9) = 0
        If uAmount > 0 Then
            SuccFlag = 1
            Exit Sub
        End If
    End If
Process_Pur_Sum:
End Sub


Private Sub Get_Summary_Flags(ByVal Br_Code As Integer)
Dim Sqlstr As String, Recset As New ADODB.Recordset
Dim Temp_Db As String, Temp_Connection As Byte

    Temp_Db = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If Br_Code <> MyClass.Unit_Code Then
        Temp_Db = MyClass.GLDb
        Temp_Connection = GL_Connection
    End If

    Bank_Sum_Flag = 0
    Ledg_Sum_Flag = 0
    TDS_Sum_Flag = 0
    
    Sqlstr = "select * from " & Temp_Db & "gl_param"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Get_Summary_Flags")
    If Recset.EOF = False Then
        Bank_Sum_Flag = IIf(IsNull(Recset!Bank_Sum_Flag), 0, Recset!Bank_Sum_Flag)
        Ledg_Sum_Flag = IIf(IsNull(Recset!Ledg_Sum_Flag), 0, Recset!Ledg_Sum_Flag)
        TDS_Sum_Flag = IIf(IsNull(Recset!TDS_Sum_Flag), 0, Recset!TDS_Sum_Flag)
    End If
End Sub

Public Sub gl_Acnt_DateBal(ByVal UserUnit As Integer, ByVal UnpassedFlag As Byte, ByVal MemoFlag As Byte, ByVal AcntCode As String, ByVal Sent_Year As Integer, ByVal Sent_Month As Byte, ByRef DateArr() As Date, _
                            ByRef Balance() As Currency, ByRef Num_Dates As Byte)
Dim I As Byte, J As Integer, Opg_Bal As Currency, Cls_Bal As Currency, Current_Day As Byte
Dim BalArr(31) As Currency
Dim Temp_Recset As New ADODB.Recordset
Dim Sqlstr As String, Temp_Db As String, Temp_Connection As Byte

    If UserUnit = 0 Then UserUnit = MyClass.Unit_Code
    Temp_Db = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If UserUnit <> MyClass.Unit_Code Then
        Temp_Db = MyClass.GLDb
        Temp_Connection = GL_Connection
    End If
    
    For I = 1 To 31
        BalArr(I) = 0
    Next I
    AcntCode = Trim$(AcntCode)
    DateFrom = CDate("01" + "/" + CStr(Sent_Month) + "/" + CStr(Sent_Year))
    DateFrom = DateFrom - 1
    Call gl_Acnt_bal(UserUnit, AcntCode, DateFrom, UnpassedFlag, MemoFlag, Opg_Bal)
    DateFrom = DateFrom + 1
    I = Sent_Month + 1
    J = Sent_Year
    If I > 12 Then
        I = 1
        J = J + 1
    End If
    
    DateTill = CDate("01" + "/" + CStr(I) + "/" + CStr(J))
    DateTill = DateTill - 1
    Call gl_Acnt_bal(UserUnit, AcntCode, DateTill, UnpassedFlag, MemoFlag, Cls_Bal)
    
    DTFrom = Format$(DateFrom, "dd-mmm-yyyy")
    dtTill = Format$(DateTill, "dd-mmm-yyyy")
    
    'Check Unit & Account Validity
    'If IsInvalidUnit(UserUnit) Then Exit Sub
    'If IsInvalidAcnt(UserUnit, AcntCode) Then Exit Sub
    
    Call Init_Control_Param(UserUnit, AcntCode)
    
    'Process Direct Transactions from Pass Voucher Detail
    Sqlstr = "select vcp_date,sum(vcp_amt), vcp_crdr from " & Temp_Db & "gl_voc_pass_dtl " & _
                " where vcp_unit = " & UserUnit & " and " & _
                      " vcp_accode = '" & AcntCode & "' and " & _
                      " vcp_date >= '" & DTFrom & "' and " & _
                      " vcp_date <= '" & dtTill & "' and " & _
                      " vcp_bktype <> 70 and vcp_cancel <= 0 group by vcp_date,vcp_crdr"
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_DateBal_1")
    Do While Not Temp_Recset.EOF
        Current_Day = Day(Temp_Recset!vcp_date)
        If Temp_Recset!vcp_crdr <= 1 Then BalArr(Current_Day) = BalArr(Current_Day) - IIf(IsNull(Temp_Recset.Fields(1).value), 0, Temp_Recset.Fields(1).value)
        If Temp_Recset!vcp_crdr >= 2 Then BalArr(Current_Day) = BalArr(Current_Day) + IIf(IsNull(Temp_Recset.Fields(1).value), 0, Temp_Recset.Fields(1).value)
        Temp_Recset.MoveNext
    Loop
        
Process_Unpassed:
    
    If UnpassedFlag = 0 Then GoTo Process_Memo
     
    'Process Direct Transactions from UnPassed Voucher Detail
    
    Sqlstr = "select vc_date,sum(vc_amount), vc_cr_dr from " & Temp_Db & "gl_voc_unpass_dtl " & _
                " where vc_unit = " & UserUnit & " and vent_accode = '" & AcntCode & "' and " & _
                      " vc_date >= '" & DTFrom & "' and " & _
                      " vc_date <= '" & dtTill & "' and " & _
                      " vc_bktype <> 70 group by vc_date,vc_cr_dr"
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_DateBal_2")
    Do While Not Temp_Recset.EOF
        Current_Day = Day(Temp_Recset!vc_date)
        If Temp_Recset!vc_cr_dr <= 1 Then BalArr(Current_Day) = BalArr(Current_Day) - IIf(IsNull(Temp_Recset.Fields(1).value), 0, Temp_Recset.Fields(1).value)
        If Temp_Recset!vc_cr_dr >= 2 Then BalArr(Current_Day) = BalArr(Current_Day) + IIf(IsNull(Temp_Recset.Fields(1).value), 0, Temp_Recset.Fields(1).value)
        Temp_Recset.MoveNext
    Loop
    
    'Process Memo Transactions

Process_Memo:
  
    If MemoFlag = 0 Then GoTo Process_Indirect_Transactions
    
    Sqlstr = "select mm_date,mm_bkcode,mm_amount,mm_crdr from " & Temp_Db & "gl_memo " & _
                " where mm_unit = " & UserUnit & " and mm_accode = '" & AcntCode & "' and " & _
                      " mm_acpd = " & AcPeriod & " and  " & _
                      " mm_date <=  '" & dtTill & "' and  " & _
                      " mm_date >=  '" & DTFrom & "' " & _
                      " order by mm_bkcode asc , mm_date desc "
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_DateBal_3")

Memo_loop:
      
    If Temp_Recset.EOF Then GoTo Process_Indirect_Transactions
    Current_Day = Day(Temp_Recset!mm_date)
    If Temp_Recset!mm_crdr = 2 Then BalArr(Current_Day) = BalArr(Current_Day) + Temp_Recset!mm_amount
    If Temp_Recset!mm_crdr = 1 Then BalArr(Current_Day) = BalArr(Current_Day) - Temp_Recset!mm_amount
        
Next_memo_rec:
        
   Temp_Recset.MoveNext
   GoTo Memo_loop
        
   'Process Indirect Transactions
    
Process_Indirect_Transactions:

   If Num_Ledg = 0 And Num_Banks = 0 Then GoTo Try_Purchase_Table
    
   'First we take From Voucher Detail File
   
   Sqlstr = "select vcp_date,vcp_amt,vcp_crdr,vcp_accode,vcp_bktype,vcpt_bkcode " & _
              " from " & Temp_Db & "gl_voc_pass_dtl where vcp_date >= '" & DTFrom & "' and " & _
              " vcp_date <= '" & dtTill & "' and vcp_cancel <= 0 and " & _
              " vcp_unit = " & UserUnit
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_DateBal_4")
              
Ind_trans_VDt_Loop:
    
    If Temp_Recset.EOF Then GoTo Try_Purchase_Table
    Current_Day = Day(Temp_Recset!vcp_date)
    'Check For SubLedger Summary
    
    Rec_Ledger = Mid(Temp_Recset!vcp_accode, 1, 1)
    Rec_Debit = Temp_Recset!vcp_crdr
    Rec_Amount = Temp_Recset!vcp_amt
    Rec_Book_Type = Temp_Recset!vcp_bktype
    Rec_Bank_Code = Temp_Recset!vcp_bkcode
    
    If Rec_Book_Type <> 10 Then Rec_Bank_Code = 0
    If Rec_Ledger = MyClass.Master_Gl_Code Then GoTo Check_Bank_Sum_1
    
    If Num_Ledg <= 0 Then GoTo Check_Bank_Sum_1
    
    For I = 1 To Num_Ledg
        If Rec_Ledger = Arr_Ledg(I) Then
            If Rec_Debit >= 2 Then BalArr(Current_Day) = BalArr(Current_Day) + Rec_Amount
            If Rec_Debit <= 1 Then BalArr(Current_Day) = BalArr(Current_Day) - Rec_Amount
            Exit For
        End If
    Next I
         
Check_Bank_Sum_1:
    
    If Rec_Bank_Code = 0 Then GoTo Next_Vdt_Rec
    If Num_Banks = 0 Then GoTo Next_Vdt_Rec
    
    For I = 1 To Num_Banks
        If Rec_Bank_Code = Arr_Banks(I) Then
            If Rec_Debit >= 2 Then BalArr(Current_Day) = BalArr(Current_Day) - Rec_Amount
            If Rec_Debit <= 1 Then BalArr(Current_Day) = BalArr(Current_Day) + Rec_Amount
            Exit For
        End If
    Next I
    
Next_Vdt_Rec:
    
    Temp_Recset.MoveNext
    GoTo Ind_trans_VDt_Loop
    
Try_Purchase_Table:

    'Process Check_InDirect_Transaction_Unpassed

Check_InDirect_Transaction_Unpassed:
    
    If UnpassedFlag = 0 Then GoTo Process_Stores_Consumption
    
    If Num_Ledg = 0 And Num_Banks = 0 Then GoTo Try_Purchase_UnPass_Table
    
    'First we take From Voucher unPassed Detail File
   
    Sqlstr = "select vc_date,vc_amt,vc_cr_dr,vc_ac_code,vc_bktype,vc_bkcode " & _
              " from " & Temp_Db & "gl_voc_unpass_dtl where vc_date >= '" & DTFrom & "' and " & _
              " vc_date <= '" & dtTill & "' and " & _
              " vc_unit = " & UserUnit
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Datebal")
              
Ind_trans_VDt_UnPass_Loop:
    
    If Temp_Recset.EOF Then GoTo Try_Purchase_UnPass_Table
    Current_Day = Day(Temp_Recset!vc_date)
    'Check For SubLedger Summary
    
    Rec_Ledger = Mid(Temp_Recset!vc_accode, 1, 1)
    Rec_Debit = Temp_Recset!vc_crdr
    Rec_Amount = Temp_Recset!vc_amt
    Rec_Book_Type = Temp_Recset!vc_bktype
    Rec_Bank_Code = Temp_Recset!vc_bkcode
    
    If Rec_Book_Type <> 10 Then Rec_Bank_Code = 0
    If Rec_Ledger = MyClass.Master_Gl_Code Then GoTo Check_Bank_Sum_6
    
    If Num_Ledg <= 0 Then GoTo Check_Bank_Sum_6
    
    For I = 1 To Num_Ledg
        If Rec_Ledger = Arr_Ledg(I) Then
            If Rec_Debit >= 2 Then BalArr(Current_Day) = BalArr(Current_Day) + Rec_Amount
            If Rec_Debit <= 1 Then BalArr(Current_Day) = BalArr(Current_Day) - Rec_Amount
            Exit For
        End If
    Next I
         
Check_Bank_Sum_6:
    
    If Rec_Bank_Code = 0 Then GoTo Next_Vdt_UnPass_Rec
    If Num_Banks = 0 Then GoTo Next_Vdt_UnPass_Rec
    
    For I = 1 To Num_Banks
        If Rec_Bank_Code = Arr_Banks(I) Then
            If Rec_Debit >= 2 Then BalArr(Current_Day) = BalArr(Current_Day) - Rec_Amount
            If Rec_Debit <= 1 Then BalArr(Current_Day) = BalArr(Current_Day) + Rec_Amount
            Exit For
        End If
    Next I
    
Next_Vdt_UnPass_Rec:
    
    Temp_Recset.MoveNext
    GoTo Ind_trans_VDt_UnPass_Loop
    
Try_Purchase_UnPass_Table:


Process_Stores_Consumption:
    
AnyMoreTables:
    
    Num_Dates = 0
    For I = 1 To Day(DateSerial(Sent_Year, Sent_Month + 1, 0)) ' added by gautam
            Num_Dates = Num_Dates + 1
            DateArr(Num_Dates) = CDate(CStr(I) + "-" + CStr(Sent_Month) + "-" + CStr(Sent_Year))
            If Num_Dates = 1 Then Balance(Num_Dates) = BalArr(I) + Opg_Bal
            If Num_Dates > 1 Then Balance(Num_Dates) = Balance(Num_Dates - 1) + BalArr(I)
    Next I
    Balance(0) = Opg_Bal

Proc_Exit:

    Exit Sub
End Sub
Public Function gl_CheckControlAccount(ByVal Sent_Unit As Integer, ByVal Acnt_Code As String) As Boolean
Dim Sqlstr As String, Recset As New ADODB.Recordset

    gl_CheckControlAccount = False
    Acnt_Code = Trim$(Acnt_Code)
    If Acnt_Code = "" Then Exit Function

    'First Check in sub_legr
    Sqlstr = "select psl_code from " & MyClass.gUnifyDb & "sub_legr where psl_unit = " & Sent_Unit & " " & _
            " and psl_accode = '" & Acnt_Code & "'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_CheckControlAccount_01")
    If Recset.EOF = False Then
        gl_CheckControlAccount = True
        Exit Function
    End If
    
    'check in day books
    Sqlstr = "select pdb_code from " & MyClass.gUnifyDb & "prm_daybk where pdb_unit = " & Sent_Unit & " " & _
            " and pdb_accode = '" & Acnt_Code & "'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_CheckControlAccount_02")
    If Recset.EOF = False Then
        gl_CheckControlAccount = True
        Exit Function
    End If
            
    'check in wht
    Sqlstr = "select ptd_accode from " & MyClass.gUnifyDb & "wht_mst where ptd_unit = " & Sent_Unit & " " & _
            " and ptd_accode = '" & Acnt_Code & "'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_CheckControlAccount_03")
    If Recset.EOF = False Then
        gl_CheckControlAccount = True
        Exit Function
    End If
    Exit Function
End Function
Public Function Get_Bank_Stmt_Balance(ByVal As_on As Date, ByVal Bank_Book As Integer) As Currency
Dim Opg_Bal As Currency, Deposit_Amt As Currency, Payment_Amt As Currency
Dim Opg_Bal_Date As Date
Dim Sqlstr As String, Temp_Recset As New ADODB.Recordset

    'This Function Returns Closing Balance as on Specified Date
    Call Get_Bank_Stmt_Opg_Bal(Bank_Book, Opg_Bal_Date, Opg_Bal)
    Get_Bank_Stmt_Balance = Opg_Bal
    
    Deposit_Amt = 0
    Payment_Amt = 0

    'We Have to Ignore all Records with Settle Flag 2(Bank Book Entries settled with Another Bank Book Entries)
    'We also have to ignore unsettled bank book entries i.e Settlement Flag = 0 But Settlement Flag is also 0
    'incase of unsettled statement entries. Therefore for settlement Flag 0 we have to test bnm_st_date
    'Then Select Total Deposit and Total Credit Amt
    Sqlstr = "select sum(bnm_amt),bnm_dbcr from " & MyClass.gUnifyDb & "gl_banksettle " & _
            " where bnm_unit = " & MyClass.Unit_Code & " and bnm_book = " & Bank_Book & " " & _
            " and bnm_st_lineno <> 0 and bnm_st_date <= '" & Format(As_on, "dd-mmm-yyyy") & "'" & _
            " and bnm_st_date >= '" & Format(Opg_Bal_Date, "dd-mmm-yyyy") & "' and bnm_settle_flag <> 2 " & _
            " group by bnm_dbcr"
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Get_Bank_stmt_balance")
    Do While Not Temp_Recset.EOF
        If Temp_Recset!bnm_dbcr >= 2 Then Deposit_Amt = IIf(IsNull(Temp_Recset.Fields(0).value), 0, Temp_Recset.Fields(0).value)
        If Temp_Recset!bnm_dbcr <= 1 Then Payment_Amt = IIf(IsNull(Temp_Recset.Fields(0).value), 0, Temp_Recset.Fields(0).value)
        Temp_Recset.MoveNext
    Loop
    Get_Bank_Stmt_Balance = Get_Bank_Stmt_Balance + Deposit_Amt - Payment_Amt
Proc_Exit:
    Exit Function
End Function
Public Sub Get_Bank_Stmt_Opg_Bal(ByVal Bank_Book As Integer, ByRef Opg_Date As Date, ByRef Opg_Bal As Currency)
Dim Sqlstr As String, Temp_Recset As New ADODB.Recordset

    Opg_Date = #1/4/2001#
    Opg_Bal = 0

    'First Select Opening Balance from FaBank Settle
    Sqlstr = "select bnm_st_date,bnm_amt,bnm_dbcr from " & MyClass.gUnifyDb & "gl_banksettle " & _
             " where bnm_unit = " & MyClass.Unit_Code & " and bnm_book = " & Bank_Book & " " & _
             " and bnm_st_lineno = 0 and bnm_st_date >= '01-APR-2001' and bnm_settle_flag <> 2 order by bnm_st_date desc"
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(Me, "Get_Bank_Stmt_Opg_Bal")
    Do While Not Temp_Recset.EOF
        Opg_Date = Temp_Recset!bnm_st_date
        If Temp_Recset!bnm_dbcr >= 2 Then Opg_Bal = Opg_Bal + Temp_Recset!bnm_amt
        If Temp_Recset!bnm_dbcr <= 1 Then Opg_Bal = Opg_Bal - Temp_Recset!bnm_amt
        Temp_Recset.MoveNext
    Loop
    Exit Sub
End Sub

Public Function GL_Get_Row_ID(ByVal Par_key As String, Optional Current_Connection As Integer) As Long
Dim Sqlstr As String
Dim Recset As New ADODB.Recordset
Dim Row_Id As Long
Dim Temp_Recset As New ADODB.Recordset
Dim TempDb As String, Temp_Connection As Integer

        TempDb = MyClass.gUnifyDb
        Temp_Connection = MyClass.Connection_No
        If Current_Connection <> 0 Then
            TempDb = MyClass.ATM_DB
            Temp_Connection = Current_Connection
        End If

        Row_Id = 0
A100:

        Sqlstr = "update " & TempDb & "gl_row_id set par_no = par_no +1 " & _
                 " where par_key = '" & Par_key & "'"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(Me, "Abort_Voucher")
        
        Sqlstr = "select par_no from " & TempDb & "gl_row_id where par_key = '" & Par_key & "'"
        Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
        If Sql_Error <> 0 Then Call Abort_Program(Me, "Abort_Voucher")
        If Recset.EOF = False Then Row_Id = IIf(IsNull(Recset!Par_No), 0, Recset!Par_No)
        GL_Get_Row_ID = Row_Id
        Exit Function
End Function

Public Sub Get_Gl_Prev_Bal(ByVal Unit_Code As Integer, ByVal Process_Year As Integer, ByVal AcCode As String, _
                            ByVal Prev_Yr_Date As Date, ByRef Balance As Currency)
Dim Sqlstr As String
Dim Recset As New ADODB.Recordset
Dim Strt_Date As Date

    Strt_Date = CDate("01-01-" + CStr(Process_Year))

    Balance = 0
    Sqlstr = "select ob_bal from " & MyClass.gUnifyDb & "gl_ac_opbal" & _
            " where ob_unit = " & Unit_Code & " and ob_year = " & Process_Year & " and " & _
            " ob_accode = '" & AcCode & "'"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Get_Gl_Prev_Bal")
    If Recset.EOF = False Then Balance = IIf(IsNull(Recset!ob_bal), 0, Recset!ob_bal)
    
    Sqlstr = "select vcp_crdr,sum(vcp_amt) from " & MyClass.gUnifyDb & "gl_voc_pass_dtl " & _
             " where vcp_unit = " & Unit_Code & " and vcp_accode = '" & AcCode & "' and " & _
             " vcp_date>= '" & Format(Strt_Date, "dd-mmm-yyyy") & "' and vcp_date<= '" & Format(Prev_Yr_Date, "dd-mmm-yyyy") & "' and vcp_cancel =0" & _
             " group by vcp_crdr"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, MyClass.Connection_No, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Get_Gl_Prev_Bal_1")
    Do While Recset.EOF = False
        If Recset!vcp_crdr >= 2 Then
            Balance = Balance + IIf(IsNull(Recset.Fields(1).value), 0, Recset.Fields(1).value)
        Else
            Balance = Balance - IIf(IsNull(Recset.Fields(1).value), 0, Recset.Fields(1).value)
        End If
    
        Recset.MoveNext
    Loop
    Exit Sub
End Sub
Public Sub gl_Acnt_bal_Monthly(ByVal UserUnit As Integer, ByVal AcntCode As String, ByVal On_Date As Date, _
                       ByVal UnpassedFlag As Byte, ByVal MemoFlag As Byte, ByRef Balance As Currency)

Dim Temp_Recset As New ADODB.Recordset
Dim I As Integer
Dim Tot_Debit As Currency, Tot_Credit As Currency
Dim TempDb As String, Temp_Connection As Byte
Dim Temp_Year As String, Sqlstr As String
Dim OnDate_Year As Integer

    Balance = 0
    AcntCode = Trim$(AcntCode)
    
    'Check Unit & Account Validity
    If IsInvalidUnit(UserUnit) Then Exit Sub
    If IsInvalidAcnt(UserUnit, AcntCode) Then Exit Sub
    
    TempDb = MyClass.gUnifyDb
    Temp_Connection = MyClass.Connection_No
    If UserUnit <> MyClass.Unit_Code Then
        TempDb = MyClass.GLDb
        Temp_Connection = GL_Connection
    End If
    
    'Get Accounting Year Begin Date
    OpBal_Dt = #1/1/1900#
    Sqlstr = "select acyear_begin_date from " & TempDb & "gl_param"
    Call Fire_Sql(Sqlstr, Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Gl_Acnt_Bal_01")
    If Recset.EOF = False Then OpBal_Dt = IIf(IsNull(Recset!acyear_begin_date), #1/1/1900#, Recset!acyear_begin_date)
    Temp_Year = Year(OpBal_Dt)
    OnDate_Year = Year(On_Date)
    If OnDate_Year < Temp_Year And On_Date <> (OpBal_Dt - 1) Then
        Temp_Year = OnDate_Year
        OpBal_Dt = CDate("01-Jan-" + CStr(OnDate_Year))
    End If
    'Get Opening Balance
    Sqlstr = "select ob_bal from " & TempDb & "gl_ac_opbal " & _
            " where ob_unit = " & UserUnit & " and ob_year = " & Temp_Year & " and ob_accode = '" & AcntCode & "'"
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "Get_Nearest_Opbal")
    If Not Temp_Recset.EOF Then Balance = Format(IIf(IsNull(Temp_Recset!ob_bal), 0, Temp_Recset!ob_bal), "0.00")
    
    'Check User Specified Date Validity
    If On_Date = OpBal_Dt - 1 Then Exit Sub
                    
    'Find the dateup to which balance can be taken from gl_summary
    Temp_Date = On_Date + 1
    Temp_Month = Month(Temp_Date)
    Last_day_flag = 1
    Temp_Day = Day(Temp_Date)
    If Temp_Day <> 1 Then
        Temp_Day = 1
        Last_day_flag = 0
    End If
    Temp_Year = Year(Temp_Date)
    
    Temp_Date = Format$("01" + "/" + CStr(Temp_Month) + "/" + CStr(Temp_Year), "dd-mm-yyyy")
    Fst_Date = Temp_Date
    Temp_Date = Temp_Date - 1
    
    Temp_Month = Month(Temp_Date)
    Temp_Year = Year(Temp_Date)
   
    Temp_YYMM = (Temp_Year * 100) + Temp_Month
    Op_Month = Month(OpBal_Dt)
    Op_year = Year(OpBal_Dt)
    Op_YYMM = (Op_year * 100) + Op_Month
    
    'Accumulate Total Debit & Credit Amount for the FULL months between opening_date & as_on_date
    Tot_Debit = 0
    Tot_Credit = 0
    
    '''''Edited By Shaleen 06-03-07
    
    Sqlstr = "select sum(ts_debit),sum(ts_credit) from " & TempDb & "gl_transum " & _
                " where ts_unit = " & UserUnit & " and " & _
                      " ts_accode = '" & AcntCode & "' and " & _
                      " ts_year *100+ts_month >= " & Temp_YYMM & " and " & _
                      " ts_year * 100 + ts_month <= " & Temp_YYMM
    '''''''''''''''''''
    
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Bal_01")
    If Temp_Recset.EOF = False Then
        Tot_Debit = Format(IIf(IsNull(Temp_Recset.Fields(0).value), 0, Temp_Recset.Fields(0).value), "0.00")
        Tot_Credit = Format(IIf(IsNull(Temp_Recset.Fields(1).value), 0, Temp_Recset.Fields(1).value), "0.00")
        Balance = Balance + Tot_Debit - Tot_Credit
    End If
    
    Call Init_Control_Param(UserUnit, AcntCode)
    
    If Last_day_flag = 1 Then GoTo Process_Unpassed
    
    'See if there are any transactions at all in the current month from gl_transum
    Sqlstr = "select ts_debit,ts_credit from " & TempDb & "gl_transum where ts_unit = " & UserUnit & " and " & _
                      " ts_accode = '" & AcntCode & "' and " & _
                      " ts_year = " & Year(On_Date) & " and ts_month = " & Month(On_Date)
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Bal_02")
    If Temp_Recset.EOF = True Then
        Last_day_flag = 1
        GoTo Process_Unpassed
    End If
    'If 0 amount in current months gl_transum, then treat it as Last_day_of_Previous_Month
     If Temp_Recset.EOF = False Then
        If (Temp_Recset!ts_debit = 0 And Temp_Recset!ts_credit = 0) Then
            Last_day_flag = 1
            GoTo Process_Unpassed
        End If
    End If
      
    'Now Process Direct Transactions
    
Process_Direct_Trans:

    First_Date = Format(Fst_Date, "dd-mmm-yyyy")
    OnDate = Format(On_Date, "dd-mmm-yyyy")
    Tot_Debit = 0
    Tot_Credit = 0
    'Process Direct Transactions from Pass Voucher Detail
    Sqlstr = "select sum(vcp_amt), vcp_crdr from " & TempDb & "gl_voc_pass_dtl " & _
                " where vcp_unit = " & UserUnit & " and " & _
                      " vcp_accode = '" & AcntCode & "' and " & _
                      " vcp_date >= '" & Format(Fst_Date, "dd-mmm-yyyy") & "' and " & _
                      " vcp_date <= '" & Format(On_Date, "dd-mmm-yyyy") & "' and " & _
                      " vcp_cancel = 0 group by vcp_crdr"
    
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Bal_03")
    Do While Not Temp_Recset.EOF
        If Temp_Recset!vcp_crdr <= 1 Then Tot_Credit = Format(IIf(IsNull(Temp_Recset.Fields(0).value), 0, Temp_Recset.Fields(0).value), "0.00")
        If Temp_Recset!vcp_crdr >= 2 Then Tot_Debit = Format(IIf(IsNull(Temp_Recset.Fields(0).value), 0, Temp_Recset.Fields(0).value), "0.00")
        Temp_Recset.MoveNext
    Loop
    Balance = Balance + Tot_Debit - Tot_Credit
    
Process_Unpassed:

    OpBal_Date = Format(OpBal_Dt, "dd-mmm-yyyy")

    'Process UnPassed Direct Transactions
    If UnpassedFlag = 0 Then GoTo Process_Memo
     
     
     '''''Edited by Shaleen 05-20-07
    'Process Direct Transactions from UnPassed Voucher Detail
'    SQLStr = "select sum(vc_amt), vc_cr_dr from " & TempDb & "gl_voc_unpass_dtl " & _
'                " where vc_unit = " & UserUnit & " and vc_ac_code = '" & AcntCode & "' and " & _
'                      " vc_date >= '" & OpBal_Date & "' and " & _
'                      " vc_date <= '" & Format(On_Date, "dd-mmm-yyyy") & "' " & _
'                      " group by vc_cr_dr"
    
    Temp_Date = Format$("01" + "/" + CStr(Month(On_Date)) + "/" + CStr(Year(On_Date)), "dd-mm-yyyy")
    
    Sqlstr = "select sum(vc_amt), vc_cr_dr from " & TempDb & "gl_voc_unpass_dtl " & _
                " where vc_unit = " & UserUnit & " and vc_ac_code = '" & AcntCode & "' and " & _
                      " vc_date >= '" & Temp_Date & "' and " & _
                      " vc_date <= '" & Format(On_Date, "dd-mmm-yyyy") & "' " & _
                      " group by vc_cr_dr"
    
    
    
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Bal_04")
    Do While Not Temp_Recset.EOF
        If Temp_Recset!vc_cr_dr <= 1 Then Balance = Balance - IIf(IsNull(Temp_Recset.Fields(0).value), 0, Temp_Recset.Fields(0).value)
        If Temp_Recset!vc_cr_dr >= 2 Then Balance = Balance + IIf(IsNull(Temp_Recset.Fields(0).value), 0, Temp_Recset.Fields(0).value)
        Temp_Recset.MoveNext
    Loop
    
    'Process Memo Transactions

Process_Memo:
  
    If MemoFlag = 0 Then GoTo Process_Indirect_Transactions
    
    OnDate = Format(On_Date, "dd-mmm-yyyy")
    Memo_DtFrom = CDate("01" + "/" + CStr(Month(On_Date)) + "/" + CStr(Year(On_Date)))
    Sqlstr = "select mm_date,mm_bkcode,mm_amount,mm_crdr from " & TempDb & "gl_memo " & _
                " where mm_unit = " & UserUnit & " and mm_accode = '" & AcntCode & "' and " & _
                      " mm_date <=  '" & OnDate & "' and  " & _
                      " mm_date >=  '" & Format(Memo_DtFrom, "dd-mmm-yyyy") & "' " & _
                      " order by mm_bkcode asc , mm_date desc "
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Bal_05")

    Prev_Bkcode = 9999

Memo_loop:
      
    If Temp_Recset.EOF Then GoTo Process_Indirect_Transactions
    'If Temp_RecSet!mm_bkcode = Prev_Bkcode Then GoTo Next_memo_rec
        
    If Temp_Recset!mm_crdr = 2 Then Balance = Balance + Temp_Recset!mm_amount
    If Temp_Recset!mm_crdr = 1 Then Balance = Balance - Temp_Recset!mm_amount
    Prev_Bkcode = Temp_Recset!mm_bkcode
        
Next_memo_rec:
        
   Temp_Recset.MoveNext
   GoTo Memo_loop
        
   'Process Indirect Transactions

Process_Indirect_Transactions:

   OnDate = Format(On_Date, "dd-mmm-yyyy")

   If Last_day_flag = 1 Then GoTo Check_InDirect_Transaction_Unpassed
    
   If Num_Ledg = 0 And Num_Banks = 0 Then GoTo Check_InDirect_Transaction_Unpassed
    
   'First we take From Voucher Detail File
   Sqlstr = "select vcp_amt,vcp_crdr,vcp_accode,vcp_bktype,vcp_bkcode " & _
              " from " & TempDb & "gl_voc_pass_dtl " & _
              " where vcp_unit = " & UserUnit & " and vcp_date >= '" & First_Date & "' and " & _
              " vcp_date <= '" & OnDate & "' and vcp_cancel = 0 "
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Bal_06")
              
Ind_trans_VDt_Loop:
    
    If Temp_Recset.EOF Then GoTo Check_InDirect_Transaction_Unpassed
    
    'Check For SubLedger Summary
    Rec_Ledger = Mid(Temp_Recset!vcp_accode, 1, 1)
    Rec_Debit = Temp_Recset!vcp_crdr
    Rec_Amount = Temp_Recset!vcp_amt
    Rec_Book_Type = Temp_Recset!vcp_bktype
    Rec_Bank_Code = Temp_Recset!vcp_bkcode
    
    If Rec_Book_Type <> 10 Then Rec_Bank_Code = 0
    If Rec_Ledger = MyClass.Master_Gl_Code Then GoTo Check_Bank_Sum_1
    
    If Num_Ledg <= 0 Then GoTo Check_Bank_Sum_1
    
    For I = 1 To Num_Ledg
        If Rec_Ledger = Arr_Ledg(I) Then
            If Rec_Debit >= 2 Then Balance = Balance + Rec_Amount
            If Rec_Debit <= 1 Then Balance = Balance - Rec_Amount
            Exit For
        End If
    Next I
         
Check_Bank_Sum_1:
    
    If Rec_Bank_Code = 0 Then GoTo Next_Vdt_Rec
    If Num_Banks = 0 Then GoTo Next_Vdt_Rec
    
    For I = 1 To Num_Banks
        If Rec_Bank_Code = Arr_Banks(I) Then
            If Rec_Debit >= 2 Then Balance = Balance - Rec_Amount
            If Rec_Debit <= 1 Then Balance = Balance + Rec_Amount
            Exit For
        End If
    Next I
    
Next_Vdt_Rec:
    
    Temp_Recset.MoveNext
    GoTo Ind_trans_VDt_Loop

    'Process Check_InDirect_Transaction_Unpassed
Check_InDirect_Transaction_Unpassed:
    
    If UnpassedFlag = 0 Then GoTo AnyMoreTables
    
    If Num_Ledg = 0 And Num_Banks = 0 Then GoTo AnyMoreTables
    
    
    'Edited By shaleen 05-02-07
    'First we take From Voucher unPassed Detail File
'    SQLStr = "select vc_amt,vc_cr_dr,vc_ac_code,vc_bktype,vc_bkcode " & _
'              " from " & TempDb & "gl_voc_unpass_dtl where vc_unit = " & UserUnit & " and vc_date >= '" & OpBal_Date & "' and " & _
'              " vc_date <= '" & OnDate & "'"
    
    Temp_Date = Format$("01" + "/" + CStr(Month(OnDate)) + "/" + CStr(Year(OnDate)), "dd-mm-yyyy")
    Sqlstr = "select vc_amt,vc_cr_dr,vc_ac_code,vc_bktype,vc_bkcode " & _
              " from " & TempDb & "gl_voc_unpass_dtl where vc_unit = " & UserUnit & " and vc_date >= '" & Temp_Date & "' and " & _
              " vc_date <= '" & OnDate & "'"
    
    
    Call Fire_Sql(Sqlstr, Temp_Recset, Sql_Error, Temp_Connection, recs_read)
    If Sql_Error <> 0 Then Call Abort_Program(, "gl_Acnt_Bal_07")
              
Ind_trans_VDt_UnPass_Loop:
    
    If Temp_Recset.EOF Then GoTo AnyMoreTables
    
    'Check For SubLedger Summary
    
    Rec_Ledger = Mid(Temp_Recset!vc_ac_code, 1, 1)
    Rec_Debit = Temp_Recset!vc_cr_dr
    Rec_Amount = Temp_Recset!vc_amt
    Rec_Book_Type = Temp_Recset!vc_bktype
    Rec_Bank_Code = Temp_Recset!vc_bkcode
    
    If Rec_Book_Type <> 10 Then Rec_Bank_Code = 0
    If Rec_Ledger = MyClass.Master_Gl_Code Then GoTo Check_Bank_Sum_6
    
    If Num_Ledg <= 0 Then GoTo Check_Bank_Sum_6
    
    For I = 1 To Num_Ledg
        If Rec_Ledger = Arr_Ledg(I) Then
            If Rec_Debit >= 2 Then Balance = Balance + Rec_Amount
            If Rec_Debit <= 1 Then Balance = Balance - Rec_Amount
            Exit For
        End If
    Next I
         
Check_Bank_Sum_6:
    
    If Rec_Bank_Code = 0 Then GoTo Next_Vdt_UnPass_Rec
    If Num_Banks = 0 Then GoTo Next_Vdt_UnPass_Rec
    
    For I = 1 To Num_Banks
        If Rec_Bank_Code = Arr_Banks(I) Then
            If Rec_Debit >= 2 Then Balance = Balance - Rec_Amount
            If Rec_Debit <= 1 Then Balance = Balance + Rec_Amount
            Exit For
        End If
    Next I
    
Next_Vdt_UnPass_Rec:
    
    Temp_Recset.MoveNext
    GoTo Ind_trans_VDt_UnPass_Loop

AnyMoreTables:
    
Proc_Exit:
    Exit Sub
End Sub




