package com.impalapay.airtel.servlet.export.pdf;

import java.io.IOException;
import java.net.MalformedURLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;



import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.impalapay.airtel.beans.accountmgmt.Account;
import com.impalapay.airtel.accountmgmt.session.SessionConstants;
import com.impalapay.airtel.cache.CacheVariables;
import com.impalapay.airtel.persistence.util.CountUtils;
import com.impalapay.airtel.util.export.PdfUtil;

import net.sf.ehcache.Cache;
import net.sf.ehcache.CacheManager;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.log4j.Logger;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.draw.LineSeparator;

@WebServlet(name="exportPDF",value="/exportPDF")

public class ExportPDF2 extends HttpServlet {
	
	private Logger logger;
			
	private CountUtils countUtils;
	
	private Font bigFont = new Font(Font.FontFamily.TIMES_ROMAN, 22, Font.BOLD);
	private Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
	private Font normalText = new Font(Font.FontFamily.COURIER, 12);
	
	private Document document;
    private PdfWriter writer;
    
    // Strings used in the PDF Document
    final String PDF_TITLE = "ImpalaPay Transaction Summary";
    final String PDF_SUBTITLE = "Report Generated For: ";
    final String PDF_BOTTOM_TEXT = "Airtel Remitance\n" +
			"Web: http://impalapay.com\n" +
			"Email: info@impalapay.com\n" +
			"CONFIDENTIAL, Â© Copyright ImpalaPay Ltd";
    private Cache accountsCache;
    
    
   	/**
   	 * 
   	 * @param config
   	 * @throws ServletException
   	 */
       @Override
       public void init(ServletConfig config) throws ServletException {
   		super.init(config);
   				
   		countUtils = CountUtils.getInstance();
   		
   		CacheManager mgr = CacheManager.getInstance();
   		accountsCache = mgr.getCache(CacheVariables.CACHE_ACCOUNTS_BY_UUID);	
   	    
   	    logger = Logger.getLogger(this.getClass());
       }
       
   	
       /**
        * 
        * @param request
   	 * @param response
   	 * @throws ServletException, IOException
        */
       @Override
       protected void doPost(HttpServletRequest request, HttpServletResponse response)
           throws ServletException, IOException {
       	ServletContext context = getServletContext();
       	
           response.setContentType("application/pdf");
           int incomingTransactionCount = 0;
           double amount =0;
           
           
           Account account = new Account();
           HttpSession session = request.getSession(false);
   		
           String username = (String)session.getAttribute(SessionConstants.ACCOUNT_SIGN_IN_KEY);
           net.sf.ehcache.Element element;
           		
       	element = accountsCache.get(username);
          // account = (Account)element.getObjectValue();
           
       	incomingTransactionCount = countUtils.getAllTransactionCount(username);
         
   	      
           document = new Document(PageSize.A4, 36, 36, 54, 54);

   		try {
   			writer = PdfWriter.getInstance(document, response.getOutputStream());
   			
   			PdfUtil event = new PdfUtil();
   	        writer.setBoxSize("art", new Rectangle(36, 54, 559, 788));
   	        writer.setPageEvent(event);
   	        
   	        populatePDFDocument(incomingTransactionCount, account,
   	        		context.getRealPath("/images/impala.gif"));
   	        
   		} catch (DocumentException e) {
   			logger.error("DocumentException while writing into the document");
   			logger.error(ExceptionUtils.getStackTrace(e));
   		}  
       }
       
       
       
       
       /**
        * This method Populates the PDF document
        * 
        * @param incomingSMSCount
        * @param outgoingSMSCount
        */
       private void populatePDFDocument(int incomingTransactionCount, Account account,
       		String logoFilePath) {    	
       	SimpleDateFormat formatter;
       	String formattedDate;
       	Date date = new Date();
       	
       	try {            
               document.open();
               
               Paragraph preface = new Paragraph();
       		// We add one empty line
       		addEmptyLine(preface, 1);
       		// Lets write a big header
       		preface.add(new Paragraph(PDF_TITLE, bigFont));

       		addEmptyLine(preface, 1);
       		
       		formatter = new SimpleDateFormat("dd, MMM yyyy HH:mm z");
       		formatter.setTimeZone(TimeZone.getTimeZone("GMT+3"));
               formattedDate = formatter.format(date);
               
       		// Will create: Report generated by: _name, _date
       		preface.add(new Paragraph(PDF_SUBTITLE + account.getUsername(), smallBold));
       		
       		preface.add(new Paragraph(formattedDate, smallBold));

       		addEmptyLine(preface, 30);
       		
       		preface.add(createImage(logoFilePath));
       		
       		preface.add(new Paragraph(PDF_BOTTOM_TEXT));
       		
       		preface.setAlignment(Element.ALIGN_RIGHT);

       		document.add(preface);
               
       		// Start a new page
       		document.newPage();
               
               // step 4
       		Phrase phrase = new Phrase(formattedDate, normalText);
       		
       		document.add(new LineSeparator(1, 200, null, Element.ALIGN_CENTER, -2));
       		document.add(phrase);
               
               PdfPTable table = new PdfPTable(2);
       		
       		PdfPCell cell = new PdfPCell(new Paragraph("Summary of Account Activity"));
       		cell.setColspan(2);
       		table.addCell(cell);
       		
       		table.addCell("Item");
       		table.addCell("Count");

       		table.addCell("Received Transaction");
       		table.addCell(String.valueOf(incomingTransactionCount));

       				
       		
       		document.add(table);
               
               // step 5
               document.close();
               
           } catch (DocumentException e) {
           	logger.error("DocumentException while writing into the document");
           	logger.error(ExceptionUtils.getStackTrace(e));
           }
       }
       
       
       /**
        * This method returns an itext image of the Tawi Logo
        * @return {@link Image}
        */
       private Image createImage(String logoFilePath) {
       	Image imgLogo = null;
       	
       	try {
   			imgLogo = Image.getInstance(logoFilePath);
   			imgLogo.scaleToFit(100, 100);
   			imgLogo.setAlignment(Element.ALIGN_RIGHT);
   			
   		} catch (BadElementException e) {
   		    logger.error("BadElementException while creating an image");
   		    logger.error(ExceptionUtils.getStackTrace(e));
   		    
   		} catch (MalformedURLException e) {
   			logger.error("MalformedURLException for the path");
   			logger.error(ExceptionUtils.getStackTrace(e));
   		    
   		} catch (IOException e) {
   			logger.error("IOException while creating an image");
   			logger.error(ExceptionUtils.getStackTrace(e));
   		}
       	
       	return imgLogo;
       }
       
       
       /**
        * This method adds an empty line to the PDF document
        * @param paragraph
        * @param number
        */
       private void addEmptyLine(Paragraph paragraph, int number) {
   		for (int i = 0; i < number; i++) {
   			paragraph.add(new Paragraph(" "));
   		}
   	}
       
       
       /**
   	 * 
   	 * @param request
   	 * @param response
   	 * @throws ServletException, IOException
   	 */	
       @Override
       protected void doGet(HttpServletRequest request, HttpServletResponse response)
           throws ServletException, IOException {
       	doPost(request, response);
       }
    
       
       /**
        * A serial version uid
        */
       private static final long serialVersionUID = 4262544639420765610L;

   }

   /*
   ** Local Variables:
   **   mode: java
   **   c-basic-offset: 2
   **   tab-width: 2
   **   indent-tabs-mode: nil
   ** End:
   **
   ** ex: set softtabstop=2 tabstop=2 expandtab:
   **
   */

